<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="694.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="677" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="677" > </text>
<g id="frames">
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (845,360,796 samples, 1.74%)</title><rect x="637.5" y="309" width="20.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="640.46" y="319.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="325" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.50" y="335.5" ></text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="341" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="14.50" y="351.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (3,969,072,030 samples, 8.18%)</title><rect x="915.9" y="389" width="96.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="918.86" y="399.5" >vertex* std..</text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex const*, vertex*&gt; (876,288,630 samples, 1.81%)</title><rect x="851.7" y="309" width="21.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="854.71" y="319.5" >v..</text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (30,927,834 samples, 0.06%)</title><rect x="658.3" y="341" width="0.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="661.26" y="351.5" ></text>
</g>
<g >
<title>getGroundColorAveraged (8,185,566,732 samples, 16.86%)</title><rect x="404.7" y="437" width="198.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="407.67" y="447.5" >getGroundColorAveraged</text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="213" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1100.28" y="223.5" ></text>
</g>
<g >
<title>[libdxcore.so] (10,309,278 samples, 0.02%)</title><rect x="748.2" y="325" width="0.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="751.22" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="748.0" y="245" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="750.97" y="255.5" ></text>
</g>
<g >
<title>[amdxc64.so] (103,092,780 samples, 0.21%)</title><rect x="711.6" y="277" width="2.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="714.64" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (20,618,556 samples, 0.04%)</title><rect x="899.6" y="341" width="0.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="902.57" y="351.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (1,092,783,468 samples, 2.25%)</title><rect x="671.0" y="373" width="26.6" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="674.04" y="383.5" >v..</text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::capacity (20,618,556 samples, 0.04%)</title><rect x="605.6" y="421" width="0.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="608.64" y="431.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (134,020,614 samples, 0.28%)</title><rect x="896.3" y="245" width="3.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="899.32" y="255.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.08%)</title><rect x="739.2" y="229" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="742.20" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (577,319,568 samples, 1.19%)</title><rect x="369.1" y="373" width="14.0" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="372.09" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="197" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="15.00" y="207.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="731.9" y="277" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="734.93" y="287.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Lerp&lt;double&gt; (20,618,556 samples, 0.04%)</title><rect x="836.2" y="309" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="839.18" y="319.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="421" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="15.00" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::push_back (1,432,989,642 samples, 2.95%)</title><rect x="627.2" y="453" width="34.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="630.19" y="463.5" >st..</text>
</g>
<g >
<title>smoothstep (195,876,282 samples, 0.40%)</title><rect x="56.4" y="437" width="4.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="59.36" y="447.5" ></text>
</g>
<g >
<title>[amdxc64.so] (216,494,838 samples, 0.45%)</title><rect x="741.5" y="277" width="5.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="744.45" y="287.5" ></text>
</g>
<g >
<title>tcache_put (20,618,556 samples, 0.04%)</title><rect x="850.5" y="293" width="0.5" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="853.46" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;double&gt;::operator (896,907,186 samples, 1.85%)</title><rect x="343.8" y="341" width="21.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="346.78" y="351.5" >s..</text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="517" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.50" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (10,309,278 samples, 0.02%)</title><rect x="383.1" y="357" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="386.12" y="367.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex*, vertex*&gt; (1,649,484,480 samples, 3.40%)</title><rect x="1141.6" y="405" width="40.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1144.64" y="415.5" >ver..</text>
</g>
<g >
<title>groundInfo::operator== (185,567,004 samples, 0.38%)</title><rect x="375.4" y="309" width="4.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="378.35" y="319.5" ></text>
</g>
<g >
<title>void Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::_init1&lt;vectorWorldspace&gt; (10,309,278 samples, 0.02%)</title><rect x="13.0" y="437" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="16.01" y="447.5" ></text>
</g>
<g >
<title>Eigen::internal::scalar_sum_op&lt;double, double&gt;::operator (10,309,278 samples, 0.02%)</title><rect x="16.0" y="373" width="0.3" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="19.01" y="383.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="909.6" y="325" width="0.2" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="912.60" y="335.5" ></text>
</g>
<g >
<title>void Eigen::internal::quaternionbase_assign_impl&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, 4, 1&gt;::run&lt;Eigen::Quaternion&lt;double, 0&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="909.6" y="389" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="912.60" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl::_Vector_impl (92,783,502 samples, 0.19%)</title><rect x="659.8" y="293" width="2.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="662.76" y="303.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="49.6" y="277" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="52.59" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="708.1" y="325" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="711.13" y="335.5" ></text>
</g>
<g >
<title>__memset_avx512_unaligned_erms (20,618,556 samples, 0.04%)</title><rect x="722.7" y="325" width="0.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="725.66" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10,711,339,842 samples, 22.06%)</title><rect x="105.2" y="405" width="260.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="108.22" y="415.5" >std::_Hashtable&lt;groundInfo, std::p..</text>
</g>
<g >
<title>_int_free (649,484,514 samples, 1.34%)</title><rect x="878.8" y="309" width="15.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="881.77" y="319.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="716.6" y="309" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="719.65" y="319.5" ></text>
</g>
<g >
<title>double __vector (30,927,834 samples, 0.06%)</title><rect x="819.1" y="277" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="822.14" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (989,690,688 samples, 2.04%)</title><rect x="673.5" y="277" width="24.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="676.55" y="287.5" >s..</text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::push_back (175,257,726 samples, 0.36%)</title><rect x="900.1" y="453" width="4.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="903.07" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (20,618,556 samples, 0.04%)</title><rect x="899.6" y="325" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="902.57" y="335.5" ></text>
</g>
<g >
<title>Eigen::internal::div_assign_op&lt;double, double&gt;::assignCoeff (103,092,780 samples, 0.21%)</title><rect x="816.6" y="293" width="2.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="819.63" y="303.5" ></text>
</g>
<g >
<title>model&amp; std::vector&lt;model, std::allocator&lt;model&gt; &gt;::emplace_back&lt;model&gt; (175,257,726 samples, 0.36%)</title><rect x="900.1" y="437" width="4.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="903.07" y="447.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="277" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="15.00" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (154,639,170 samples, 0.32%)</title><rect x="606.6" y="389" width="3.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="609.64" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="197" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="207.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_LinearTraversal_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 2, 3&gt;::run (103,092,780 samples, 0.21%)</title><rect x="816.6" y="325" width="2.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="819.63" y="335.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="10.8" y="469" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.75" y="479.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise2D (216,494,838 samples, 0.45%)</title><rect x="831.4" y="341" width="5.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="834.41" y="351.5" ></text>
</g>
<g >
<title>checked_request2size (10,309,278 samples, 0.02%)</title><rect x="850.2" y="293" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="853.21" y="303.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@plt (10,309,278 samples, 0.02%)</title><rect x="704.1" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="707.12" y="319.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (123,711,336 samples, 0.25%)</title><rect x="731.7" y="325" width="3.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="734.68" y="335.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex*, vertex*&gt; (3,969,072,030 samples, 8.18%)</title><rect x="915.9" y="341" width="96.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="918.86" y="351.5" >vertex* std..</text>
</g>
<g >
<title>[amdxc64.so] (61,855,668 samples, 0.13%)</title><rect x="745.0" y="165" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="747.96" y="175.5" ></text>
</g>
<g >
<title>load_GL_VERSION_1_3 (10,309,278 samples, 0.02%)</title><rect x="809.4" y="437" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="812.36" y="447.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.8" y="357" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.75" y="367.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (113,402,058 samples, 0.23%)</title><rect x="750.0" y="309" width="2.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="752.97" y="319.5" ></text>
</g>
<g >
<title>void Eigen::internal::div_assign_op&lt;double, double&gt;::assignPacket&lt;0, double __vector (30,927,834 samples, 0.06%)</title><rect x="819.1" y="293" width="0.8" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="822.14" y="303.5" ></text>
</g>
<g >
<title>Eigen::internal::rotation_base_generic_product_selector&lt;Eigen::Quaternion&lt;double, 0&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;::IsVectorAtCompileTime&gt;::ReturnType Eigen::RotationBase&lt;Eigen::Quaternion&lt;double, 0&gt;, 3&gt;::operator*&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (82,474,224 samples, 0.17%)</title><rect x="909.8" y="437" width="2.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="912.85" y="447.5" ></text>
</g>
<g >
<title>_dl_relocate_object (10,309,278 samples, 0.02%)</title><rect x="11.8" y="53" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="14.75" y="63.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, double, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt; &gt;::find (10,742,267,676 samples, 22.13%)</title><rect x="104.5" y="421" width="261.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="107.47" y="431.5" >std::unordered_map&lt;groundInfo, dou..</text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (4,309,278,204 samples, 8.88%)</title><rect x="700.1" y="421" width="104.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="703.11" y="431.5" >[libgallium-..</text>
</g>
<g >
<title>[libd3d12core.so] (309,278,340 samples, 0.64%)</title><rect x="710.1" y="357" width="7.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="713.13" y="367.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="837.9" y="357" width="0.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="840.93" y="367.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (92,783,502 samples, 0.19%)</title><rect x="1095.8" y="341" width="2.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1098.78" y="351.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Lerp&lt;double&gt; (20,618,556 samples, 0.04%)</title><rect x="103.7" y="325" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="106.72" y="335.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (134,020,614 samples, 0.28%)</title><rect x="816.6" y="405" width="3.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="819.63" y="415.5" ></text>
</g>
<g >
<title>__libc_recvmsg (10,309,278 samples, 0.02%)</title><rect x="809.6" y="357" width="0.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="812.61" y="367.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;::assignCoeff (10,309,278 samples, 0.02%)</title><rect x="13.0" y="325" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="16.01" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_create_storage (1,268,041,194 samples, 2.61%)</title><rect x="627.2" y="373" width="30.8" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="630.19" y="383.5" >st..</text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="533" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="14.50" y="543.5" ></text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="469" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1192.75" y="479.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="830.9" y="277" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="833.91" y="287.5" ></text>
</g>
<g >
<title>renderer::runWindow (10,309,278 samples, 0.02%)</title><rect x="911.9" y="469" width="0.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="914.85" y="479.5" ></text>
</g>
<g >
<title>getTriangleNormal (30,927,834 samples, 0.06%)</title><rect x="48.6" y="405" width="0.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="51.59" y="415.5" ></text>
</g>
<g >
<title>unlink_chunk (20,618,556 samples, 0.04%)</title><rect x="851.0" y="293" width="0.5" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="853.96" y="303.5" ></text>
</g>
<g >
<title>tcache_get (41,237,112 samples, 0.08%)</title><rect x="609.4" y="309" width="1.0" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="612.40" y="319.5" ></text>
</g>
<g >
<title>[libglapi.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="14.5" y="485" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="17.51" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (123,711,336 samples, 0.25%)</title><rect x="662.0" y="405" width="3.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="665.02" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;double&gt;::operator (742,268,016 samples, 1.53%)</title><rect x="549.3" y="341" width="18.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="552.26" y="351.5" ></text>
</g>
<g >
<title>void std::destroy_at&lt;model&gt; (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="501" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1192.75" y="511.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;true, vertex*, vertex*&gt; (3,391,752,462 samples, 6.99%)</title><rect x="1012.3" y="325" width="82.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1015.34" y="335.5" >vertex* s..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;::__normal_iterator (185,567,004 samples, 0.38%)</title><rect x="1181.7" y="437" width="4.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1184.73" y="447.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="810.4" y="405" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="813.37" y="415.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common (10,309,278 samples, 0.02%)</title><rect x="812.4" y="325" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="815.37" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="740.0" y="149" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="742.95" y="159.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="722.4" y="213" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="725.41" y="223.5" ></text>
</g>
<g >
<title>[unknown] (82,474,224 samples, 0.17%)</title><rect x="10.3" y="613" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.25" y="623.5" ></text>
</g>
<g >
<title>renderer::runWindow (10,309,278 samples, 0.02%)</title><rect x="12.0" y="517" width="0.3" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="15.00" y="527.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="731.2" y="213" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="734.18" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,814,432,894 samples, 5.80%)</title><rect x="412.2" y="357" width="68.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="415.19" y="367.5" >std::__..</text>
</g>
<g >
<title>Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;::assignCoeff (154,639,170 samples, 0.32%)</title><rect x="42.6" y="325" width="3.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="45.58" y="335.5" ></text>
</g>
<g >
<title>_XReply (10,309,278 samples, 0.02%)</title><rect x="806.4" y="341" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="809.36" y="351.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (10,309,278 samples, 0.02%)</title><rect x="716.4" y="261" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="719.40" y="271.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (20,618,556 samples, 0.04%)</title><rect x="909.8" y="309" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="912.85" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (649,484,514 samples, 1.34%)</title><rect x="587.8" y="309" width="15.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="590.85" y="319.5" ></text>
</g>
<g >
<title>XNextEvent (41,237,112 samples, 0.08%)</title><rect x="807.6" y="453" width="1.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="810.61" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (103,092,780 samples, 0.21%)</title><rect x="711.6" y="293" width="2.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="714.64" y="303.5" ></text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="738.4" y="309" width="2.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="741.45" y="319.5" ></text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="357" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="14.50" y="367.5" ></text>
</g>
<g >
<title>groundInfoHash::operator (814,432,962 samples, 1.68%)</title><rect x="547.5" y="357" width="19.8" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="550.50" y="367.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.8" y="277" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.75" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (10,309,278 samples, 0.02%)</title><rect x="904.6" y="357" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="907.58" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (61,855,668 samples, 0.13%)</title><rect x="751.0" y="197" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="753.98" y="207.5" ></text>
</g>
<g >
<title>double const&amp; std::max&lt;double&gt; (113,402,058 samples, 0.23%)</title><rect x="57.4" y="405" width="2.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="60.36" y="415.5" ></text>
</g>
<g >
<title>arena_for_chunk (10,309,278 samples, 0.02%)</title><rect x="657.5" y="261" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="660.51" y="271.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Grad&lt;double&gt; (123,711,336 samples, 0.25%)</title><rect x="826.4" y="309" width="3.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="829.40" y="319.5" ></text>
</g>
<g >
<title>vectorLocalspace::toWorldspace (10,309,278 samples, 0.02%)</title><rect x="12.8" y="501" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="15.76" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::_M_allocate (30,927,834 samples, 0.06%)</title><rect x="659.0" y="421" width="0.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="662.01" y="431.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;&amp; Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::_set_noalias&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (20,618,556 samples, 0.04%)</title><rect x="909.8" y="357" width="0.5" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="912.85" y="367.5" ></text>
</g>
<g >
<title>___pthread_cond_wait (10,309,278 samples, 0.02%)</title><rect x="812.4" y="373" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="815.37" y="383.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="909.8" y="181" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="912.85" y="191.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (41,237,112 samples, 0.08%)</title><rect x="725.7" y="325" width="1.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="728.67" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (494,845,344 samples, 1.02%)</title><rect x="569.8" y="389" width="12.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="572.80" y="399.5" ></text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (144,329,892 samples, 0.30%)</title><rect x="905.3" y="421" width="3.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="908.34" y="431.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="10.8" y="597" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="13.75" y="607.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (855,670,074 samples, 1.76%)</title><rect x="735.2" y="341" width="20.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="738.19" y="351.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="293" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1100.28" y="303.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="133" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="143.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (41,237,112 samples, 0.08%)</title><rect x="1096.5" y="325" width="1.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1099.53" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_free (979,381,410 samples, 2.02%)</title><rect x="673.5" y="245" width="23.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="676.55" y="255.5" >_..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (30,927,834 samples, 0.06%)</title><rect x="830.2" y="325" width="0.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="833.16" y="335.5" ></text>
</g>
<g >
<title>unsigned long std::_Hash_impl::hash&lt;double&gt; (855,670,074 samples, 1.76%)</title><rect x="344.8" y="325" width="20.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="347.78" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::vector (92,783,502 samples, 0.19%)</title><rect x="659.8" y="325" width="2.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="662.76" y="335.5" ></text>
</g>
<g >
<title>glfwCreateWindow (72,164,946 samples, 0.15%)</title><rect x="809.6" y="469" width="1.8" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="812.61" y="479.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex const, vertex&gt; (876,288,630 samples, 1.81%)</title><rect x="851.7" y="293" width="21.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="854.71" y="303.5" >v..</text>
</g>
<g >
<title>start_thread (48,402,060,210 samples, 99.70%)</title><rect x="13.3" y="597" width="1176.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="16.26" y="607.5" >start_thread</text>
</g>
<g >
<title>std::__invoke_result&lt;void  (10,309,278 samples, 0.02%)</title><rect x="12.0" y="549" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="15.00" y="559.5" ></text>
</g>
<g >
<title>operator delete (10,309,278 samples, 0.02%)</title><rect x="894.6" y="325" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="897.56" y="335.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (20,618,556 samples, 0.04%)</title><rect x="904.8" y="373" width="0.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="907.84" y="383.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="806.4" y="389" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="809.36" y="399.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (4,381,443,150 samples, 9.03%)</title><rect x="698.6" y="469" width="106.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="701.60" y="479.5" >[libGLX_mesa...</text>
</g>
<g >
<title>unlink_chunk (20,618,556 samples, 0.04%)</title><rect x="696.9" y="197" width="0.5" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="699.85" y="207.5" ></text>
</g>
<g >
<title>renderer::createModelsFromPhysicsObjects (10,309,278 samples, 0.02%)</title><rect x="910.1" y="197" width="0.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="913.10" y="207.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.06%)</title><rect x="730.9" y="277" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="733.93" y="287.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (10,309,278 samples, 0.02%)</title><rect x="11.0" y="581" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.00" y="591.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="373" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="15.00" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (876,288,630 samples, 1.81%)</title><rect x="383.4" y="389" width="21.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="386.37" y="399.5" >s..</text>
</g>
<g >
<title>elf_dynamic_do_Rela (10,309,278 samples, 0.02%)</title><rect x="811.1" y="197" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="814.12" y="207.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::sum (41,237,112 samples, 0.08%)</title><rect x="16.0" y="421" width="1.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="19.01" y="431.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex const*, vertex*&gt; (144,329,892 samples, 0.30%)</title><rect x="905.3" y="357" width="3.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="908.34" y="367.5" ></text>
</g>
<g >
<title>stepPhysicsObjects (41,237,112 samples, 0.08%)</title><rect x="12.3" y="549" width="1.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="15.26" y="559.5" ></text>
</g>
<g >
<title>Eigen::internal::dot_nocheck&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, false&gt;::run (10,309,278 samples, 0.02%)</title><rect x="815.6" y="421" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="818.63" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, double, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt; &gt;::find (10,309,278 samples, 0.02%)</title><rect x="836.7" y="405" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="839.68" y="415.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="806.4" y="405" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="809.36" y="415.5" ></text>
</g>
<g >
<title>_dlerror_run (10,309,278 samples, 0.02%)</title><rect x="811.1" y="373" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="814.12" y="383.5" ></text>
</g>
<g >
<title>double const&amp; std::min&lt;double&gt; (41,237,112 samples, 0.08%)</title><rect x="60.1" y="405" width="1.0" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="63.12" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, double, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt; &gt;::find (41,237,112 samples, 0.08%)</title><rect x="829.9" y="405" width="1.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="832.91" y="415.5" ></text>
</g>
<g >
<title>elf_dynamic_do_Rela (10,309,278 samples, 0.02%)</title><rect x="11.8" y="37" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="14.75" y="47.5" ></text>
</g>
<g >
<title>[libglfw.so.3.3] (20,618,556 samples, 0.04%)</title><rect x="810.6" y="453" width="0.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="813.62" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (4,886,597,772 samples, 10.07%)</title><rect x="221.7" y="325" width="118.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="224.74" y="335.5" >std::__detail:..</text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="501" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.25" y="511.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (92,783,502 samples, 0.19%)</title><rect x="659.8" y="373" width="2.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="662.76" y="383.5" ></text>
</g>
<g >
<title>tcache_get (10,309,278 samples, 0.02%)</title><rect x="657.8" y="261" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="660.76" y="271.5" ></text>
</g>
<g >
<title>unsigned long std::_Hash_impl::hash&lt;double&gt; (690,721,626 samples, 1.42%)</title><rect x="550.5" y="325" width="16.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="553.51" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (371,134,008 samples, 0.76%)</title><rect x="374.1" y="357" width="9.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="377.10" y="367.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (134,020,614 samples, 0.28%)</title><rect x="816.6" y="373" width="3.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="819.63" y="383.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,907,216,430 samples, 3.93%)</title><rect x="1095.3" y="421" width="46.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1098.28" y="431.5" >[lib..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (247,422,672 samples, 0.51%)</title><rect x="575.8" y="357" width="6.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="578.82" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (134,020,614 samples, 0.28%)</title><rect x="743.2" y="245" width="3.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="746.21" y="255.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="909.8" y="149" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="912.85" y="159.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (10,309,278 samples, 0.02%)</title><rect x="683.1" y="213" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="686.07" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (82,474,224 samples, 0.17%)</title><rect x="367.1" y="357" width="2.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="370.08" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (20,618,556 samples, 0.04%)</title><rect x="899.6" y="357" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="902.57" y="367.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (268,041,228 samples, 0.55%)</title><rect x="720.2" y="357" width="6.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="723.16" y="367.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (2,113,401,990 samples, 4.35%)</title><rect x="706.4" y="389" width="51.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="709.37" y="399.5" >[libg..</text>
</g>
<g >
<title>__GI___clock_gettime (10,309,278 samples, 0.02%)</title><rect x="756.0" y="357" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="758.99" y="367.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.8" y="325" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.75" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10,309,278 samples, 0.02%)</title><rect x="836.7" y="373" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="839.68" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.06%)</title><rect x="721.9" y="245" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="724.91" y="255.5" ></text>
</g>
<g >
<title>setVertexColorsByBrightness (618,556,680 samples, 1.27%)</title><rect x="49.8" y="453" width="15.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="52.84" y="463.5" ></text>
</g>
<g >
<title>_XReply (20,618,556 samples, 0.04%)</title><rect x="812.1" y="421" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="815.12" y="431.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;::Matrix&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="49.6" y="421" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="52.59" y="431.5" ></text>
</g>
<g >
<title>dlopen_implementation (10,309,278 samples, 0.02%)</title><rect x="11.8" y="229" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="14.75" y="239.5" ></text>
</g>
<g >
<title>__GI___ioctl (10,309,278 samples, 0.02%)</title><rect x="724.4" y="309" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="727.41" y="319.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (10,309,278 samples, 0.02%)</title><rect x="702.9" y="357" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="705.86" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::insert&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, void&gt; (7,453,607,994 samples, 15.35%)</title><rect x="913.6" y="453" width="181.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="916.61" y="463.5" >__gnu_cxx::__normal_ite..</text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*&gt; (10,309,278 samples, 0.02%)</title><rect x="904.6" y="421" width="0.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="907.58" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (185,567,004 samples, 0.38%)</title><rect x="895.1" y="293" width="4.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="898.06" y="303.5" ></text>
</g>
<g >
<title>operator new (474,226,788 samples, 0.98%)</title><rect x="840.2" y="341" width="11.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="843.18" y="351.5" ></text>
</g>
<g >
<title>std::equal_to&lt;groundInfo&gt;::operator (164,948,448 samples, 0.34%)</title><rect x="499.9" y="309" width="4.0" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="502.89" y="319.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (20,618,556 samples, 0.04%)</title><rect x="703.4" y="341" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="706.37" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10,309,278 samples, 0.02%)</title><rect x="373.8" y="357" width="0.3" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="376.85" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, double&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, double&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;groundInfo const&amp;&gt;, std::tuple&lt;&gt; &gt; (20,618,556 samples, 0.04%)</title><rect x="582.1" y="373" width="0.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="585.08" y="383.5" ></text>
</g>
<g >
<title>_dl_open (10,309,278 samples, 0.02%)</title><rect x="811.1" y="309" width="0.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="814.12" y="319.5" ></text>
</g>
<g >
<title>Eigen::QuaternionBase&lt;Eigen::Quaternion&lt;double, 0&gt; &gt;::operator= (10,309,278 samples, 0.02%)</title><rect x="12.5" y="501" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="15.51" y="511.5" ></text>
</g>
<g >
<title>_int_malloc (41,237,112 samples, 0.08%)</title><rect x="753.2" y="261" width="1.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="756.23" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (742,268,016 samples, 1.53%)</title><rect x="639.5" y="261" width="18.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="642.47" y="271.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (690,721,626 samples, 1.42%)</title><rect x="610.4" y="373" width="16.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="613.40" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (144,329,892 samples, 0.30%)</title><rect x="578.3" y="341" width="3.5" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="581.32" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,309,278 samples, 0.02%)</title><rect x="575.6" y="325" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="578.57" y="335.5" ></text>
</g>
<g >
<title>xcb_poll_for_reply64 (10,309,278 samples, 0.02%)</title><rect x="809.9" y="405" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="812.86" y="415.5" ></text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="165" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1100.28" y="175.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (3,969,072,030 samples, 8.18%)</title><rect x="915.9" y="373" width="96.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="918.86" y="383.5" >vertex* std..</text>
</g>
<g >
<title>moveCamera (10,309,278 samples, 0.02%)</title><rect x="873.0" y="453" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="876.01" y="463.5" ></text>
</g>
<g >
<title>_int_free_create_chunk (381,443,286 samples, 0.79%)</title><rect x="687.6" y="197" width="9.3" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="690.58" y="207.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="708.4" y="277" width="1.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="711.38" y="287.5" ></text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="909.8" y="229" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="912.85" y="239.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; const&amp;&gt; (10,309,278 samples, 0.02%)</title><rect x="837.9" y="421" width="0.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="840.93" y="431.5" ></text>
</g>
<g >
<title>tcache_get_n (10,309,278 samples, 0.02%)</title><rect x="851.5" y="293" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="854.46" y="303.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (144,329,892 samples, 0.30%)</title><rect x="714.1" y="341" width="3.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="717.14" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="149" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="159.5" ></text>
</g>
<g >
<title>collisionModel::collider::update (10,309,278 samples, 0.02%)</title><rect x="13.0" y="517" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="16.01" y="527.5" ></text>
</g>
<g >
<title>_int_free (742,268,016 samples, 1.53%)</title><rect x="679.3" y="229" width="18.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="682.31" y="239.5" ></text>
</g>
<g >
<title>__GI__dl_catch_exception (10,309,278 samples, 0.02%)</title><rect x="811.1" y="293" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="814.12" y="303.5" ></text>
</g>
<g >
<title>Eigen::internal::sqrt_retval&lt;Eigen::internal::global_math_functions_filtering_base&lt;double, void&gt;::type&gt;::type Eigen::numext::sqrt&lt;double&gt; (10,309,278 samples, 0.02%)</title><rect x="819.9" y="405" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="822.89" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::size (144,329,892 samples, 0.30%)</title><rect x="1186.2" y="469" width="3.5" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1189.24" y="479.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_create_storage (20,618,556 samples, 0.04%)</title><rect x="904.8" y="421" width="0.5" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="907.84" y="431.5" ></text>
</g>
<g >
<title>Eigen::internal::sqrt_retval&lt;Eigen::internal::global_math_functions_filtering_base&lt;double, void&gt;::type&gt;::type Eigen::numext::sqrt&lt;double&gt; (61,855,668 samples, 0.13%)</title><rect x="47.8" y="421" width="1.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="50.84" y="431.5" ></text>
</g>
<g >
<title>getTriangleNormal (51,546,390 samples, 0.11%)</title><rect x="46.3" y="277" width="1.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="49.33" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (20,618,556 samples, 0.04%)</title><rect x="582.1" y="293" width="0.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="585.08" y="303.5" ></text>
</g>
<g >
<title>Eigen::internal::cross_impl&lt;Eigen::Block&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, 3, 1, false&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, 3&gt;::run (61,855,668 samples, 0.13%)</title><rect x="910.3" y="373" width="1.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="913.35" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="708.9" y="245" width="1.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="711.88" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (618,556,680 samples, 1.27%)</title><rect x="389.6" y="309" width="15.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="392.63" y="319.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,618,556,646 samples, 3.33%)</title><rect x="717.6" y="373" width="39.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="720.65" y="383.5" >[li..</text>
</g>
<g >
<title>__pthread_mutex_cond_lock (10,309,278 samples, 0.02%)</title><rect x="705.4" y="277" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="708.37" y="287.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (61,855,668 samples, 0.13%)</title><rect x="715.6" y="325" width="1.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="718.64" y="335.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (144,329,892 samples, 0.30%)</title><rect x="723.2" y="341" width="3.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="726.16" y="351.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*&gt; (1,340,206,140 samples, 2.76%)</title><rect x="665.0" y="405" width="32.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="668.03" y="415.5" >vo..</text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,752,577,226 samples, 5.67%)</title><rect x="480.6" y="357" width="66.9" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="483.60" y="367.5" >std::_H..</text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (30,927,834 samples, 0.06%)</title><rect x="806.4" y="421" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="809.36" y="431.5" ></text>
</g>
<g >
<title>getGroundModel (577,319,568 samples, 1.19%)</title><rect x="824.1" y="453" width="14.1" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="827.15" y="463.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.8" y="293" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.75" y="303.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="453" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.50" y="463.5" ></text>
</g>
<g >
<title>double Eigen::DenseBase&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::redux&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="47.6" y="389" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="50.59" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="731.2" y="229" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="734.18" y="239.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (30,927,834 samples, 0.06%)</title><rect x="658.3" y="261" width="0.7" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="661.26" y="271.5" ></text>
</g>
<g >
<title>xcb_writev (20,618,556 samples, 0.04%)</title><rect x="703.9" y="325" width="0.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="706.87" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (51,546,390 samples, 0.11%)</title><rect x="914.6" y="341" width="1.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="917.61" y="351.5" ></text>
</g>
<g >
<title>alloc_perturb (10,309,278 samples, 0.02%)</title><rect x="653.8" y="245" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="656.75" y="255.5" ></text>
</g>
<g >
<title>model::~model (1,082,474,190 samples, 2.23%)</title><rect x="873.3" y="341" width="26.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="876.26" y="351.5" >m..</text>
</g>
<g >
<title>gladLoadGL (10,309,278 samples, 0.02%)</title><rect x="809.4" y="469" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="812.36" y="479.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*, vertex&gt; (30,927,834 samples, 0.06%)</title><rect x="658.3" y="389" width="0.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="661.26" y="399.5" ></text>
</g>
<g >
<title>___dlopen (10,309,278 samples, 0.02%)</title><rect x="11.8" y="245" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="14.75" y="255.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="709.9" y="197" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="712.88" y="207.5" ></text>
</g>
<g >
<title>Eigen::ScalarBinaryOpTraits&lt;double, Eigen::internal::traits&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::Scalar, Eigen::internal::scalar_product_op&lt;double, Eigen::internal::traits&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::Scalar&gt; &gt;::ReturnType Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::dot&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="815.6" y="437" width="0.3" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="818.63" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;visualModel*, std::vector&lt;visualModel, std::allocator&lt;visualModel&gt; &gt; &gt;::__normal_iterator (10,309,278 samples, 0.02%)</title><rect x="908.8" y="437" width="0.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="911.84" y="447.5" ></text>
</g>
<g >
<title>unlink_chunk (10,309,278 samples, 0.02%)</title><rect x="696.6" y="181" width="0.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="699.60" y="191.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.06%)</title><rect x="751.7" y="149" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="754.73" y="159.5" ></text>
</g>
<g >
<title>__GI__dl_catch_exception (10,309,278 samples, 0.02%)</title><rect x="811.1" y="261" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="814.12" y="271.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="725.2" y="293" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="728.17" y="303.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex const*, vertex*&gt; (690,721,626 samples, 1.42%)</title><rect x="610.4" y="309" width="16.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="613.40" y="319.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (876,288,630 samples, 1.81%)</title><rect x="851.7" y="357" width="21.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="854.71" y="367.5" >v..</text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D (216,494,838 samples, 0.45%)</title><rect x="824.6" y="373" width="5.3" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="827.65" y="383.5" ></text>
</g>
<g >
<title>_XReadEvents (41,237,112 samples, 0.08%)</title><rect x="807.6" y="437" width="1.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="810.61" y="447.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (10,309,278 samples, 0.02%)</title><rect x="705.6" y="325" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="708.62" y="335.5" ></text>
</g>
<g >
<title>unsigned long std::_Hash_impl::hash&lt;double&gt; (628,865,958 samples, 1.30%)</title><rect x="389.4" y="341" width="15.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="392.38" y="351.5" ></text>
</g>
<g >
<title>_int_free_create_chunk (247,422,672 samples, 0.51%)</title><rect x="887.3" y="277" width="6.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="890.29" y="287.5" ></text>
</g>
<g >
<title>double const&amp; std::clamp&lt;double&gt; (10,309,278 samples, 0.02%)</title><rect x="822.9" y="405" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="825.89" y="415.5" ></text>
</g>
<g >
<title>__GI___futex_abstimed_wait_cancelable64 (10,309,278 samples, 0.02%)</title><rect x="812.4" y="341" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="815.37" y="351.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::sum (10,309,278 samples, 0.02%)</title><rect x="47.6" y="405" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="50.59" y="415.5" ></text>
</g>
<g >
<title>operator new (10,309,278 samples, 0.02%)</title><rect x="905.1" y="341" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="908.09" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::erase (20,618,556 samples, 0.04%)</title><rect x="899.6" y="453" width="0.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="902.57" y="463.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="581" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.25" y="591.5" ></text>
</g>
<g >
<title>Eigen::internal::assign_op&lt;double, double&gt;::assignCoeff (10,309,278 samples, 0.02%)</title><rect x="13.0" y="309" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.01" y="319.5" ></text>
</g>
<g >
<title>groundInfo::operator== (257,731,950 samples, 0.53%)</title><rect x="215.5" y="293" width="6.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="218.48" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::clear (1,082,474,190 samples, 2.23%)</title><rect x="873.3" y="453" width="26.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="876.26" y="463.5" >s..</text>
</g>
<g >
<title>__sincos_fma (10,309,278 samples, 0.02%)</title><rect x="12.5" y="485" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="15.51" y="495.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (103,092,780 samples, 0.21%)</title><rect x="750.2" y="293" width="2.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="753.23" y="303.5" ></text>
</g>
<g >
<title>XGetInputFocus (30,927,834 samples, 0.06%)</title><rect x="811.9" y="437" width="0.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="814.87" y="447.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="405" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.50" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Eigen::Quaternion&lt;double, 0&gt;, std::allocator&lt;Eigen::Quaternion&lt;double, 0&gt; &gt; &gt;::push_back (10,309,278 samples, 0.02%)</title><rect x="873.0" y="437" width="0.3" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="876.01" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::vector (10,309,278 samples, 0.02%)</title><rect x="837.9" y="309" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="840.93" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::capacity (10,309,278 samples, 0.02%)</title><rect x="838.4" y="421" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="841.43" y="431.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex*, vertex*&gt; (1,649,484,480 samples, 3.40%)</title><rect x="1141.6" y="389" width="40.1" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="1144.64" y="399.5" >ver..</text>
</g>
<g >
<title>Eigen::internal::cross_impl&lt;Eigen::Block&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, 3, 1, false&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, 3&gt;::return_type Eigen::MatrixBase&lt;Eigen::Block&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, 3, 1, false&gt; &gt;::cross&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (61,855,668 samples, 0.13%)</title><rect x="910.3" y="389" width="1.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="913.35" y="399.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex const*, vertex*&gt; (30,927,834 samples, 0.06%)</title><rect x="658.3" y="293" width="0.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="661.26" y="303.5" ></text>
</g>
<g >
<title>decltype  (92,783,502 samples, 0.19%)</title><rect x="659.8" y="341" width="2.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="662.76" y="351.5" ></text>
</g>
<g >
<title>getGroundModel_Sub (22,948,452,828 samples, 47.27%)</title><rect x="69.4" y="453" width="557.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="72.39" y="463.5" >getGroundModel_Sub</text>
</g>
<g >
<title>___pthread_mutex_unlock (10,309,278 samples, 0.02%)</title><rect x="716.4" y="277" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="719.40" y="287.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex const*, vertex*&gt; (30,927,834 samples, 0.06%)</title><rect x="658.3" y="309" width="0.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="661.26" y="319.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_linearvec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 0, 2&gt;::run (10,309,278 samples, 0.02%)</title><rect x="49.6" y="309" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="52.59" y="319.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="716.4" y="309" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="719.40" y="319.5" ></text>
</g>
<g >
<title>Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::norm (10,309,278 samples, 0.02%)</title><rect x="819.9" y="421" width="0.2" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="822.89" y="431.5" ></text>
</g>
<g >
<title>[libGLX.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="808.9" y="453" width="0.5" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="811.86" y="463.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (10,309,278 samples, 0.02%)</title><rect x="909.6" y="293" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="912.60" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;* std::__relocate_a_1&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (92,783,502 samples, 0.19%)</title><rect x="659.8" y="389" width="2.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="662.76" y="399.5" ></text>
</g>
<g >
<title>getGroundColor (134,020,614 samples, 0.28%)</title><rect x="406.9" y="421" width="3.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="409.93" y="431.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="469" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="15.00" y="479.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="469" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.50" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,948,453,508 samples, 6.07%)</title><rect x="107.2" y="373" width="71.7" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="110.23" y="383.5" >std::_Ha..</text>
</g>
<g >
<title>void std::destroy_at&lt;model&gt; (1,082,474,190 samples, 2.23%)</title><rect x="873.3" y="357" width="26.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="876.26" y="367.5" >v..</text>
</g>
<g >
<title>renderer::runWindow (20,247,421,992 samples, 41.71%)</title><rect x="697.6" y="485" width="492.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="700.60" y="495.5" >renderer::runWindow</text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (577,319,568 samples, 1.19%)</title><rect x="369.1" y="389" width="14.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="372.09" y="399.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="809.9" y="389" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="812.86" y="399.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (989,690,688 samples, 2.04%)</title><rect x="673.5" y="261" width="24.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="676.55" y="271.5" >s..</text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="261" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1100.28" y="271.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="806.6" y="357" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="809.61" y="367.5" ></text>
</g>
<g >
<title>unlink_chunk (92,783,502 samples, 0.19%)</title><rect x="655.3" y="245" width="2.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="658.25" y="255.5" ></text>
</g>
<g >
<title>__GI__dl_catch_exception (10,309,278 samples, 0.02%)</title><rect x="11.8" y="133" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="14.75" y="143.5" ></text>
</g>
<g >
<title>[amdxc64.so] (113,402,058 samples, 0.23%)</title><rect x="743.7" y="213" width="2.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="746.71" y="223.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_move_if_noexcept_a&lt;vertex*, vertex*, std::allocator&lt;vertex&gt; &gt; (3,391,752,462 samples, 6.99%)</title><rect x="1012.3" y="421" width="82.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1015.34" y="431.5" >vertex* s..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,309,278 samples, 0.02%)</title><rect x="836.7" y="325" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="839.68" y="335.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common64 (10,309,278 samples, 0.02%)</title><rect x="812.4" y="309" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="815.37" y="319.5" ></text>
</g>
<g >
<title>_dl_open_relocate_one_object (10,309,278 samples, 0.02%)</title><rect x="811.1" y="229" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="814.12" y="239.5" ></text>
</g>
<g >
<title>Eigen::internal::dense_assignment_loop&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 3, 2&gt;::run (134,020,614 samples, 0.28%)</title><rect x="816.6" y="341" width="3.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="819.63" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (206,185,560 samples, 0.42%)</title><rect x="42.6" y="389" width="5.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="45.58" y="399.5" ></text>
</g>
<g >
<title>getGroundColor (216,494,838 samples, 0.45%)</title><rect x="831.4" y="405" width="5.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="834.41" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="708.1" y="357" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="711.13" y="367.5" ></text>
</g>
<g >
<title>futex_wait (20,618,556 samples, 0.04%)</title><rect x="756.5" y="309" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="759.49" y="319.5" ></text>
</g>
<g >
<title>round@plt (30,927,834 samples, 0.06%)</title><rect x="603.6" y="437" width="0.8" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="606.63" y="447.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;::Matrix&lt;vectorWorldspace&gt; (10,309,278 samples, 0.02%)</title><rect x="13.0" y="453" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="16.01" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.08%)</title><rect x="721.7" y="261" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="724.66" y="271.5" ></text>
</g>
<g >
<title>glXGetProcAddress (10,309,278 samples, 0.02%)</title><rect x="809.4" y="405" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="812.36" y="415.5" ></text>
</g>
<g >
<title>smoothstep (30,927,834 samples, 0.06%)</title><rect x="822.4" y="421" width="0.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="825.39" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (82,474,224 samples, 0.17%)</title><rect x="576.3" y="341" width="2.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="579.32" y="351.5" ></text>
</g>
<g >
<title>__GI_getpid (10,309,278 samples, 0.02%)</title><rect x="809.4" y="373" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="812.36" y="383.5" ></text>
</g>
<g >
<title>_dl_relocate_object (10,309,278 samples, 0.02%)</title><rect x="811.1" y="213" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="814.12" y="223.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="10.0" y="613" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>tcache_put (20,618,556 samples, 0.04%)</title><rect x="664.5" y="325" width="0.5" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="667.53" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (48,402,060,210 samples, 99.70%)</title><rect x="13.3" y="581" width="1176.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="16.26" y="591.5" >[libstdc++.so.6.0.33]</text>
</g>
<g >
<title>renderer::createModelsFromPhysicsObjects (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="613" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1192.75" y="623.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="485" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.25" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10,309,278 samples, 0.02%)</title><rect x="575.6" y="357" width="0.2" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="578.57" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (92,783,502 samples, 0.19%)</title><rect x="744.2" y="181" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="747.21" y="191.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D_01 (216,494,838 samples, 0.45%)</title><rect x="824.6" y="389" width="5.3" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="827.65" y="399.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex const*, vertex*&gt; (876,288,630 samples, 1.81%)</title><rect x="851.7" y="325" width="21.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="854.71" y="335.5" >v..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (61,855,668 samples, 0.13%)</title><rect x="568.3" y="357" width="1.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="571.30" y="367.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (690,721,626 samples, 1.42%)</title><rect x="610.4" y="357" width="16.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="613.40" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::~vector (1,340,206,140 samples, 2.76%)</title><rect x="665.0" y="437" width="32.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="668.03" y="447.5" >st..</text>
</g>
<g >
<title>three_point_interpolate (41,237,112 samples, 0.08%)</title><rect x="823.1" y="421" width="1.0" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="826.15" y="431.5" ></text>
</g>
<g >
<title>main (48,546,390,102 samples, 100.00%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >main</text>
</g>
<g >
<title>unlink_chunk (51,546,390 samples, 0.11%)</title><rect x="893.3" y="277" width="1.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="896.31" y="287.5" ></text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (876,288,630 samples, 1.81%)</title><rect x="851.7" y="389" width="21.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="854.71" y="399.5" >v..</text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*, vertex&gt; (3,969,072,030 samples, 8.18%)</title><rect x="915.9" y="421" width="96.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="918.86" y="431.5" >vertex* std..</text>
</g>
<g >
<title>__GI___libc_malloc (30,927,834 samples, 0.06%)</title><rect x="755.2" y="325" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="758.24" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;Eigen::Quaternion&lt;double, 0&gt;, std::allocator&lt;Eigen::Quaternion&lt;double, 0&gt; &gt; &gt;::_M_allocate (10,309,278 samples, 0.02%)</title><rect x="873.0" y="405" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="876.01" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.06%)</title><rect x="745.7" y="133" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="748.71" y="143.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="549" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="14.50" y="559.5" ></text>
</g>
<g >
<title>_int_malloc (10,309,278 samples, 0.02%)</title><rect x="757.2" y="357" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="760.24" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::begin (185,567,004 samples, 0.38%)</title><rect x="1181.7" y="453" width="4.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1184.73" y="463.5" ></text>
</g>
<g >
<title>__libc_start_call_main (41,237,112 samples, 0.08%)</title><rect x="12.3" y="581" width="1.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="15.26" y="591.5" ></text>
</g>
<g >
<title>__GI_eventfd (10,309,278 samples, 0.02%)</title><rect x="756.2" y="357" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="759.24" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (30,927,834 samples, 0.06%)</title><rect x="837.2" y="293" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="840.18" y="303.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;::Matrix&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (20,618,556 samples, 0.04%)</title><rect x="909.8" y="389" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="912.85" y="399.5" ></text>
</g>
<g >
<title>tcache_get (10,309,278 samples, 0.02%)</title><rect x="851.5" y="309" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="854.46" y="319.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="909.8" y="165" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="912.85" y="175.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (144,329,892 samples, 0.30%)</title><rect x="905.3" y="405" width="3.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="908.34" y="415.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="10.8" y="533" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.75" y="543.5" ></text>
</g>
<g >
<title>std::equal_to&lt;groundInfo&gt;::operator (82,474,224 samples, 0.17%)</title><rect x="576.3" y="325" width="2.0" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="579.32" y="335.5" ></text>
</g>
<g >
<title>Eigen::internal::div_assign_op&lt;double, double&gt;::assignCoeff (154,639,170 samples, 0.32%)</title><rect x="42.6" y="309" width="3.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="45.58" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;groundInfo const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="830.9" y="373" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="833.91" y="383.5" ></text>
</g>
<g >
<title>setVertexColorsByBrightness (164,948,448 samples, 0.34%)</title><rect x="820.1" y="437" width="4.0" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="823.14" y="447.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;&amp; Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;::operator=&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="909.6" y="373" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="912.60" y="383.5" ></text>
</g>
<g >
<title>std::allocator&lt;Eigen::Quaternion&lt;double, 0&gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="873.0" y="373" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="876.01" y="383.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (876,288,630 samples, 1.81%)</title><rect x="851.7" y="373" width="21.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="854.71" y="383.5" >v..</text>
</g>
<g >
<title>__libc_recvmsg (10,309,278 samples, 0.02%)</title><rect x="808.1" y="373" width="0.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="811.11" y="383.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="13.0" y="373" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="16.01" y="383.5" ></text>
</g>
<g >
<title>_int_free (20,618,556 samples, 0.04%)</title><rect x="899.6" y="261" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="902.57" y="271.5" ></text>
</g>
<g >
<title>tcache_get (10,309,278 samples, 0.02%)</title><rect x="754.5" y="293" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="757.49" y="303.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.8" y="261" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.75" y="271.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise3D (216,494,838 samples, 0.45%)</title><rect x="831.4" y="325" width="5.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="834.41" y="335.5" ></text>
</g>
<g >
<title>groundInfoHash::operator (865,979,352 samples, 1.78%)</title><rect x="582.6" y="373" width="21.0" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="585.58" y="383.5" ></text>
</g>
<g >
<title>double __vector (30,927,834 samples, 0.06%)</title><rect x="16.3" y="373" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="19.26" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (20,618,556 samples, 0.04%)</title><rect x="899.6" y="373" width="0.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="902.57" y="383.5" ></text>
</g>
<g >
<title>tcache_put (51,546,390 samples, 0.11%)</title><rect x="654.0" y="245" width="1.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="657.00" y="255.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="706.1" y="341" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="709.12" y="351.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="453" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="15.00" y="463.5" ></text>
</g>
<g >
<title>Eigen::internal::abs2_retval&lt;Eigen::internal::global_math_functions_filtering_base&lt;double, void&gt;::type&gt;::type Eigen::numext::abs2&lt;double&gt; (10,309,278 samples, 0.02%)</title><rect x="47.6" y="309" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="50.59" y="319.5" ></text>
</g>
<g >
<title>xcb_wait_for_event (41,237,112 samples, 0.08%)</title><rect x="807.6" y="421" width="1.0" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="810.61" y="431.5" ></text>
</g>
<g >
<title>getGroundModel_Sub (567,010,290 samples, 1.17%)</title><rect x="824.1" y="437" width="13.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="827.15" y="447.5" ></text>
</g>
<g >
<title>sysmalloc (10,309,278 samples, 0.02%)</title><rect x="915.6" y="309" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="918.61" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::operator= (1,340,206,140 samples, 2.76%)</title><rect x="665.0" y="469" width="32.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="668.03" y="479.5" >st..</text>
</g>
<g >
<title>void Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;::assignPacket&lt;0, 0, double __vector (20,618,556 samples, 0.04%)</title><rect x="909.8" y="261" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="912.85" y="271.5" ></text>
</g>
<g >
<title>tcache_get_n (10,309,278 samples, 0.02%)</title><rect x="754.5" y="277" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="757.49" y="287.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (20,618,556 samples, 0.04%)</title><rect x="899.6" y="293" width="0.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="902.57" y="303.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="10.0" y="597" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex const, vertex&gt; (690,721,626 samples, 1.42%)</title><rect x="610.4" y="293" width="16.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="613.40" y="303.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.06%)</title><rect x="730.9" y="245" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="733.93" y="255.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="309" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="15.00" y="319.5" ></text>
</g>
<g >
<title>operator new (20,618,556 samples, 0.04%)</title><rect x="582.1" y="309" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="585.08" y="319.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (10,309,278 samples, 0.02%)</title><rect x="756.0" y="341" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="758.99" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_free (123,711,336 samples, 0.25%)</title><rect x="662.0" y="357" width="3.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="665.02" y="367.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="806.9" y="405" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="809.86" y="415.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (10,309,278 samples, 0.02%)</title><rect x="810.1" y="357" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="813.11" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="10.3" y="565" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.25" y="575.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="806.4" y="277" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="809.36" y="287.5" ></text>
</g>
<g >
<title>_IO_getc (10,309,278 samples, 0.02%)</title><rect x="11.0" y="565" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="14.00" y="575.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (206,185,560 samples, 0.42%)</title><rect x="42.6" y="405" width="5.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="45.58" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;double&gt;::operator (30,927,834 samples, 0.06%)</title><rect x="837.2" y="341" width="0.7" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="840.18" y="351.5" ></text>
</g>
<g >
<title>unlink_chunk (10,309,278 samples, 0.02%)</title><rect x="893.1" y="261" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="896.06" y="271.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (247,422,672 samples, 0.51%)</title><rect x="728.7" y="341" width="6.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="731.67" y="351.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="747.7" y="261" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="750.72" y="271.5" ></text>
</g>
<g >
<title>get_proc (10,309,278 samples, 0.02%)</title><rect x="809.4" y="421" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="812.36" y="431.5" ></text>
</g>
<g >
<title>clone3 (48,402,060,210 samples, 99.70%)</title><rect x="13.3" y="613" width="1176.4" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="16.26" y="623.5" >clone3</text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="715.4" y="325" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="718.39" y="335.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="13.0" y="405" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="16.01" y="415.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="705.9" y="373" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="708.87" y="383.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (144,329,892 samples, 0.30%)</title><rect x="905.3" y="373" width="3.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="908.34" y="383.5" ></text>
</g>
<g >
<title>_XSend (20,618,556 samples, 0.04%)</title><rect x="703.9" y="341" width="0.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="706.87" y="351.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="705.9" y="389" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="708.87" y="399.5" ></text>
</g>
<g >
<title>__memset_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="11.5" y="69" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="14.50" y="79.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="49.6" y="341" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="52.59" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="725.2" y="261" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="728.17" y="271.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="389" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.50" y="399.5" ></text>
</g>
<g >
<title>D3DKMTQueryVideoMemoryInfo (10,309,278 samples, 0.02%)</title><rect x="734.9" y="309" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="737.94" y="319.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (422,680,398 samples, 0.87%)</title><rect x="707.4" y="373" width="10.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="710.38" y="383.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (10,309,278 samples, 0.02%)</title><rect x="754.2" y="309" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="757.23" y="319.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="722.4" y="197" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="725.41" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,309,278 samples, 0.02%)</title><rect x="373.8" y="325" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="376.85" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.06%)</title><rect x="732.4" y="213" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="735.43" y="223.5" ></text>
</g>
<g >
<title>dlopen_doit (10,309,278 samples, 0.02%)</title><rect x="811.1" y="325" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="814.12" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="731.9" y="261" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="734.93" y="271.5" ></text>
</g>
<g >
<title>[libGLX.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="811.1" y="437" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="814.12" y="447.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="752.5" y="277" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="755.48" y="287.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (10,309,278 samples, 0.02%)</title><rect x="904.6" y="229" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="907.58" y="239.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="213" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="223.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="117" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="127.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="703.9" y="293" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="706.87" y="303.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="729.9" y="293" width="1.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="732.93" y="303.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="10.3" y="597" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.25" y="607.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="309" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.50" y="319.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="261" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.50" y="271.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;model*&gt; (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="533" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1192.75" y="543.5" ></text>
</g>
<g >
<title>[amdxc64.so] (61,855,668 samples, 0.13%)</title><rect x="721.2" y="293" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="724.16" y="303.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="909.6" y="309" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="912.60" y="319.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="810.1" y="453" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="813.11" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="750.5" y="261" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="753.48" y="271.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,886,597,874 samples, 3.89%)</title><rect x="1095.8" y="389" width="45.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1098.78" y="399.5" >[lib..</text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="197" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1100.28" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl::_Vector_impl (10,309,278 samples, 0.02%)</title><rect x="837.9" y="277" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="840.93" y="287.5" ></text>
</g>
<g >
<title>__GI___errno_location (10,309,278 samples, 0.02%)</title><rect x="808.6" y="453" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="811.61" y="463.5" ></text>
</g>
<g >
<title>decltype  (10,309,278 samples, 0.02%)</title><rect x="837.9" y="325" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="840.93" y="335.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex, vertex&gt; (3,391,752,462 samples, 6.99%)</title><rect x="1012.3" y="293" width="82.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1015.34" y="303.5" >vertex* s..</text>
</g>
<g >
<title>_XReply (10,309,278 samples, 0.02%)</title><rect x="810.1" y="389" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="813.11" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (41,237,112 samples, 0.08%)</title><rect x="836.9" y="389" width="1.0" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="839.93" y="399.5" ></text>
</g>
<g >
<title>memmove@plt (10,309,278 samples, 0.02%)</title><rect x="626.9" y="277" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="629.94" y="287.5" ></text>
</g>
<g >
<title>_start (41,237,112 samples, 0.08%)</title><rect x="12.3" y="613" width="1.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="15.26" y="623.5" ></text>
</g>
<g >
<title>void Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;::assignPacket&lt;0, 0, double __vector (10,309,278 samples, 0.02%)</title><rect x="49.6" y="293" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="52.59" y="303.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="738.9" y="277" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="741.95" y="287.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (3,969,072,030 samples, 8.18%)</title><rect x="915.9" y="357" width="96.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="918.86" y="367.5" >vertex* std..</text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (690,721,626 samples, 1.42%)</title><rect x="610.4" y="341" width="16.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="613.40" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (41,237,112 samples, 0.08%)</title><rect x="914.9" y="325" width="1.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="917.86" y="335.5" ></text>
</g>
<g >
<title>operator new (144,329,892 samples, 0.30%)</title><rect x="606.9" y="341" width="3.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="609.89" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::internal::assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (10,309,278 samples, 0.02%)</title><rect x="13.0" y="389" width="0.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="16.01" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="213" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="15.00" y="223.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.08%)</title><rect x="721.7" y="277" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="724.66" y="287.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="909.6" y="277" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="912.60" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (92,783,502 samples, 0.19%)</title><rect x="744.2" y="197" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="747.21" y="207.5" ></text>
</g>
<g >
<title>void std::destroy_at&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (1,092,783,468 samples, 2.25%)</title><rect x="671.0" y="357" width="26.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="674.04" y="367.5" >v..</text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="809.6" y="389" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="812.61" y="399.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (154,639,170 samples, 0.32%)</title><rect x="606.6" y="373" width="3.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="609.64" y="383.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (48,402,060,210 samples, 99.70%)</title><rect x="13.3" y="501" width="1176.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="16.26" y="511.5" >void std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="712.1" y="261" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="715.14" y="271.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="421" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.50" y="431.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D_01 (216,494,838 samples, 0.45%)</title><rect x="831.4" y="389" width="5.3" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="834.41" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.06%)</title><rect x="751.7" y="165" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="754.73" y="175.5" ></text>
</g>
<g >
<title>Eigen::internal::dense_assignment_loop&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 3, 2&gt;::run (10,309,278 samples, 0.02%)</title><rect x="13.0" y="357" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="16.01" y="367.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="810.4" y="421" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="813.37" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::size (134,020,614 samples, 0.28%)</title><rect x="64.9" y="453" width="3.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="67.88" y="463.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;model&gt; (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="517" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1192.75" y="527.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="732.7" y="181" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="735.68" y="191.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (20,618,556 samples, 0.04%)</title><rect x="904.8" y="357" width="0.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="907.84" y="367.5" ></text>
</g>
<g >
<title>aerodynamicSurface::update_dynamicSurface (10,309,278 samples, 0.02%)</title><rect x="12.5" y="517" width="0.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="15.51" y="527.5" ></text>
</g>
<g >
<title>getGroundAltitudeAveraged (298,969,062 samples, 0.62%)</title><rect x="824.1" y="421" width="7.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="827.15" y="431.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="734.4" y="245" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="737.44" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (10,309,278 samples, 0.02%)</title><rect x="904.6" y="341" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="907.58" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::evaluator_base&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt;::~evaluator_base (10,309,278 samples, 0.02%)</title><rect x="909.6" y="229" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="912.60" y="239.5" ></text>
</g>
<g >
<title>auto siv::perlin_detail::Octave2D&lt;siv::BasicPerlinNoise&lt;double&gt;, double&gt; (154,639,170 samples, 0.32%)</title><rect x="100.5" y="373" width="3.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="103.46" y="383.5" ></text>
</g>
<g >
<title>tcache_get_n (41,237,112 samples, 0.08%)</title><rect x="609.4" y="293" width="1.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="612.40" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (484,536,066 samples, 1.00%)</title><rect x="839.9" y="405" width="11.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="842.93" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="293" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="15.00" y="303.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; const&amp;&gt; (1,309,278,306 samples, 2.70%)</title><rect x="627.2" y="437" width="31.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="630.19" y="447.5" >vo..</text>
</g>
<g >
<title>[libX11.so.6.4.0] (10,309,278 samples, 0.02%)</title><rect x="810.1" y="373" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="813.11" y="383.5" ></text>
</g>
<g >
<title>glfwGetWindowAttrib (30,927,834 samples, 0.06%)</title><rect x="811.9" y="453" width="0.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="814.87" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="722.4" y="181" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="725.41" y="191.5" ></text>
</g>
<g >
<title>_dl_new_hash (10,309,278 samples, 0.02%)</title><rect x="811.1" y="133" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="814.12" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10,628,865,618 samples, 21.89%)</title><rect x="107.2" y="389" width="258.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="110.23" y="399.5" >std::_Hashtable&lt;groundInfo, std::p..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, double&gt;, true&gt; &gt;::allocate (20,618,556 samples, 0.04%)</title><rect x="582.1" y="325" width="0.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="585.08" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10,309,278 samples, 0.02%)</title><rect x="581.8" y="389" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="584.83" y="399.5" ></text>
</g>
<g >
<title>vectorLocalspace::toWorldspace (113,402,058 samples, 0.23%)</title><rect x="909.1" y="453" width="2.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="912.10" y="463.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;::allocate (30,927,834 samples, 0.06%)</title><rect x="659.0" y="389" width="0.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="662.01" y="399.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (20,618,556 samples, 0.04%)</title><rect x="754.7" y="309" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="757.74" y="319.5" ></text>
</g>
<g >
<title>model::~model (20,618,556 samples, 0.04%)</title><rect x="899.6" y="389" width="0.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="902.57" y="399.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (72,164,946 samples, 0.15%)</title><rect x="805.6" y="453" width="1.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="808.60" y="463.5" ></text>
</g>
<g >
<title>___pthread_cond_signal (10,309,278 samples, 0.02%)</title><rect x="807.9" y="373" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="810.86" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (144,329,892 samples, 0.30%)</title><rect x="710.6" y="341" width="3.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.63" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_base (10,309,278 samples, 0.02%)</title><rect x="837.9" y="293" width="0.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="840.93" y="303.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (10,309,278 samples, 0.02%)</title><rect x="12.0" y="533" width="0.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="15.00" y="543.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (10,309,278 samples, 0.02%)</title><rect x="809.6" y="405" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="812.61" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.08%)</title><rect x="732.2" y="229" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="735.18" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (41,237,112 samples, 0.08%)</title><rect x="829.9" y="389" width="1.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="832.91" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (10,309,278 samples, 0.02%)</title><rect x="831.2" y="373" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="834.16" y="383.5" ></text>
</g>
<g >
<title>_int_malloc (10,309,278 samples, 0.02%)</title><rect x="1097.8" y="309" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1100.79" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, double&gt;, true&gt; &gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="830.9" y="341" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="833.91" y="351.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="533" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.25" y="543.5" ></text>
</g>
<g >
<title>dl_open_worker (10,309,278 samples, 0.02%)</title><rect x="11.8" y="117" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="14.75" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_free (20,618,556 samples, 0.04%)</title><rect x="899.6" y="277" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="902.57" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (61,855,668 samples, 0.13%)</title><rect x="731.7" y="293" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="734.68" y="303.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::operator/= (134,020,614 samples, 0.28%)</title><rect x="816.6" y="421" width="3.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="819.63" y="431.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="740.0" y="165" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="742.95" y="175.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;true, vertex*, vertex*&gt; (3,391,752,462 samples, 6.99%)</title><rect x="1012.3" y="309" width="82.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1015.34" y="319.5" >vertex* s..</text>
</g>
<g >
<title>void std::vector&lt;Eigen::Quaternion&lt;double, 0&gt;, std::allocator&lt;Eigen::Quaternion&lt;double, 0&gt; &gt; &gt;::_M_realloc_insert&lt;Eigen::Quaternion&lt;double, 0&gt; const&amp;&gt; (10,309,278 samples, 0.02%)</title><rect x="873.0" y="421" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="876.01" y="431.5" ></text>
</g>
<g >
<title>double Eigen::DenseBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::redux&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="815.6" y="389" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="818.63" y="399.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="809.6" y="373" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="812.61" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, double, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt; &gt;::find (6,463,917,306 samples, 13.31%)</title><rect x="410.2" y="421" width="157.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="413.18" y="431.5" >std::unordered_map&lt;g..</text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_LinearTraversal_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 2, 3&gt;::run (154,639,170 samples, 0.32%)</title><rect x="42.6" y="341" width="3.7" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="45.58" y="351.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (1,793,814,372 samples, 3.70%)</title><rect x="1098.0" y="373" width="43.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1101.04" y="383.5" >__me..</text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.08%)</title><rect x="739.2" y="245" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="742.20" y="255.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="485" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.50" y="495.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (134,020,614 samples, 0.28%)</title><rect x="816.6" y="389" width="3.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="819.63" y="399.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="293" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.50" y="303.5" ></text>
</g>
<g >
<title>[libglfw.so.3.3] (61,855,668 samples, 0.13%)</title><rect x="807.4" y="469" width="1.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="810.36" y="479.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="750.7" y="229" width="1.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="753.73" y="239.5" ></text>
</g>
<g >
<title>glfwGetTime (10,309,278 samples, 0.02%)</title><rect x="811.4" y="469" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="814.37" y="479.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (61,855,668 samples, 0.13%)</title><rect x="733.2" y="293" width="1.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="736.19" y="303.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (10,309,278 samples, 0.02%)</title><rect x="899.8" y="245" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="902.82" y="255.5" ></text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="181" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1100.28" y="191.5" ></text>
</g>
<g >
<title>getGroundAltitude (226,804,116 samples, 0.47%)</title><rect x="824.4" y="405" width="5.5" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="827.40" y="415.5" ></text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="909.8" y="245" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="912.85" y="255.5" ></text>
</g>
<g >
<title>heap_for_ptr (10,309,278 samples, 0.02%)</title><rect x="657.5" y="229" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="660.51" y="239.5" ></text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (30,927,834 samples, 0.06%)</title><rect x="658.3" y="373" width="0.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="661.26" y="383.5" ></text>
</g>
<g >
<title>__libc_calloc (20,618,556 samples, 0.04%)</title><rect x="757.0" y="373" width="0.5" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="759.99" y="383.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;std::move_iterator&lt;vertex*&gt;, vertex*&gt; (3,391,752,462 samples, 6.99%)</title><rect x="1012.3" y="357" width="82.5" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1015.34" y="367.5" >vertex* s..</text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="1097.5" y="325" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1100.53" y="335.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;&amp; Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::_set_noalias&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="49.6" y="389" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="52.59" y="399.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (123,711,336 samples, 0.25%)</title><rect x="662.0" y="389" width="3.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="665.02" y="399.5" ></text>
</g>
<g >
<title>unsigned long std::_Hash_impl::hash&lt;double&gt; (680,412,348 samples, 1.40%)</title><rect x="587.1" y="341" width="16.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="590.09" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6,381,443,082 samples, 13.15%)</title><rect x="412.2" y="389" width="155.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="415.19" y="399.5" >std::_Hashtable&lt;gro..</text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::_M_erase_at_end (1,082,474,190 samples, 2.23%)</title><rect x="873.3" y="437" width="26.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="876.26" y="447.5" >s..</text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (3,381,443,184 samples, 6.97%)</title><rect x="1012.6" y="277" width="82.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1015.59" y="287.5" >__memcpy_..</text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (61,855,668 samples, 0.13%)</title><rect x="805.9" y="437" width="1.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="808.85" y="447.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (20,618,556 samples, 0.04%)</title><rect x="756.5" y="357" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="759.49" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (82,474,224 samples, 0.17%)</title><rect x="367.1" y="389" width="2.0" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="370.08" y="399.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="49.6" y="261" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="52.59" y="271.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="229" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1100.28" y="239.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="708.4" y="261" width="1.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="711.38" y="271.5" ></text>
</g>
<g >
<title>_XReply (113,402,058 samples, 0.23%)</title><rect x="703.1" y="357" width="2.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="706.12" y="367.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="10.8" y="581" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="13.75" y="591.5" ></text>
</g>
<g >
<title>main (41,237,112 samples, 0.08%)</title><rect x="12.3" y="565" width="1.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="15.26" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (51,546,390 samples, 0.11%)</title><rect x="914.6" y="421" width="1.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="917.61" y="431.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="739.7" y="197" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="742.70" y="207.5" ></text>
</g>
<g >
<title>_int_malloc (30,927,834 samples, 0.06%)</title><rect x="659.0" y="325" width="0.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="662.01" y="335.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Grad&lt;double&gt; (164,948,448 samples, 0.34%)</title><rect x="832.2" y="309" width="4.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="835.17" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::size (10,309,278 samples, 0.02%)</title><rect x="904.3" y="453" width="0.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="907.33" y="463.5" ></text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="149" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1100.28" y="159.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="245" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1100.28" y="255.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="565" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="14.50" y="575.5" ></text>
</g>
<g >
<title>[amdxc64.so] (103,092,780 samples, 0.21%)</title><rect x="711.6" y="309" width="2.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="714.64" y="319.5" ></text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (3,969,072,030 samples, 8.18%)</title><rect x="915.9" y="405" width="96.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="918.86" y="415.5" >vertex* std..</text>
</g>
<g >
<title>double const&amp; std::clamp&lt;double&gt; (154,639,170 samples, 0.32%)</title><rect x="57.4" y="421" width="3.7" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="60.36" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="905.1" y="325" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="908.09" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (48,402,060,210 samples, 99.70%)</title><rect x="13.3" y="517" width="1176.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="16.26" y="527.5" >std::__invoke_result&lt;void </text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6,432,989,472 samples, 13.25%)</title><rect x="410.9" y="405" width="156.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="413.93" y="415.5" >std::_Hashtable&lt;grou..</text>
</g>
<g >
<title>_dl_catch_error (10,309,278 samples, 0.02%)</title><rect x="11.8" y="197" width="0.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="14.75" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (10,309,278 samples, 0.02%)</title><rect x="104.2" y="405" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="107.22" y="415.5" ></text>
</g>
<g >
<title>Eigen::internal::abs2_impl&lt;double&gt;::run (10,309,278 samples, 0.02%)</title><rect x="47.6" y="293" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="50.59" y="303.5" ></text>
</g>
<g >
<title>operator new (30,927,834 samples, 0.06%)</title><rect x="659.0" y="357" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="662.01" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (432,989,676 samples, 0.89%)</title><rect x="840.9" y="309" width="10.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="843.94" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::vector (164,948,448 samples, 0.34%)</title><rect x="904.8" y="453" width="4.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="907.84" y="463.5" ></text>
</g>
<g >
<title>operator new (845,360,796 samples, 1.74%)</title><rect x="637.5" y="293" width="20.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="640.46" y="303.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="806.4" y="373" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="809.36" y="383.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,206,185,526 samples, 2.48%)</title><rect x="726.7" y="357" width="29.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="729.67" y="367.5" >[l..</text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (30,927,834 samples, 0.06%)</title><rect x="658.3" y="325" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="661.26" y="335.5" ></text>
</g>
<g >
<title>collisionModel::collider::update (10,309,278 samples, 0.02%)</title><rect x="13.0" y="501" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="16.01" y="511.5" ></text>
</g>
<g >
<title>__libc_calloc (51,546,390 samples, 0.11%)</title><rect x="753.0" y="277" width="1.2" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="755.98" y="287.5" ></text>
</g>
<g >
<title>__GI___ioctl (10,309,278 samples, 0.02%)</title><rect x="734.9" y="293" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="737.94" y="303.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise2D (123,711,336 samples, 0.25%)</title><rect x="407.2" y="357" width="3.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="410.18" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (92,783,502 samples, 0.19%)</title><rect x="608.1" y="325" width="2.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="611.14" y="335.5" ></text>
</g>
<g >
<title>resolve_map (10,309,278 samples, 0.02%)</title><rect x="811.1" y="165" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="814.12" y="175.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D (216,494,838 samples, 0.45%)</title><rect x="831.4" y="373" width="5.3" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="834.41" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.08%)</title><rect x="745.5" y="149" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="748.46" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10,309,278 samples, 0.02%)</title><rect x="575.6" y="341" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="578.57" y="351.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (577,319,568 samples, 1.19%)</title><rect x="683.3" y="213" width="14.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="686.32" y="223.5" ></text>
</g>
<g >
<title>[amdxc64.so] (123,711,336 samples, 0.25%)</title><rect x="743.5" y="229" width="3.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="746.46" y="239.5" ></text>
</g>
<g >
<title>[libGLX.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="811.1" y="421" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="814.12" y="431.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (319,587,618 samples, 0.66%)</title><rect x="740.5" y="309" width="7.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="743.45" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10,309,278 samples, 0.02%)</title><rect x="383.1" y="373" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="386.12" y="383.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (144,329,892 samples, 0.30%)</title><rect x="905.3" y="389" width="3.5" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="908.34" y="399.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;std::move_iterator&lt;vertex*&gt;, vertex*, vertex&gt; (3,391,752,462 samples, 6.99%)</title><rect x="1012.3" y="405" width="82.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1015.34" y="415.5" >vertex* s..</text>
</g>
<g >
<title>__recvmsg_syscall (10,309,278 samples, 0.02%)</title><rect x="809.6" y="341" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="812.61" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (628,865,958 samples, 1.30%)</title><rect x="389.4" y="325" width="15.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="392.38" y="335.5" ></text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="277" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1100.28" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="750.5" y="277" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="753.48" y="287.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_linearvec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 0, 2&gt;::run (20,618,556 samples, 0.04%)</title><rect x="909.8" y="277" width="0.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="912.85" y="287.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex const*, vertex*&gt; (690,721,626 samples, 1.42%)</title><rect x="610.4" y="325" width="16.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="613.40" y="335.5" ></text>
</g>
<g >
<title>auto siv::perlin_detail::Octave2D&lt;siv::BasicPerlinNoise&lt;double&gt;, double&gt; (216,494,838 samples, 0.45%)</title><rect x="824.6" y="357" width="5.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="827.65" y="367.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="10.8" y="453" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.75" y="463.5" ></text>
</g>
<g >
<title>operator delete (10,309,278 samples, 0.02%)</title><rect x="697.4" y="245" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="700.35" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (154,639,170 samples, 0.32%)</title><rect x="606.6" y="405" width="3.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="609.64" y="415.5" ></text>
</g>
<g >
<title>Eigen::ScalarBinaryOpTraits&lt;double, Eigen::internal::traits&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::Scalar, Eigen::internal::scalar_product_op&lt;double, Eigen::internal::traits&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::Scalar&gt; &gt;::ReturnType Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::dot&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (41,237,112 samples, 0.08%)</title><rect x="16.0" y="453" width="1.0" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="19.01" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,948,453,508 samples, 6.07%)</title><rect x="107.2" y="341" width="71.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="110.23" y="351.5" >std::__d..</text>
</g>
<g >
<title>double siv::perlin_detail::Grad&lt;double&gt; (103,092,780 samples, 0.21%)</title><rect x="101.2" y="325" width="2.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="104.21" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,309,278 samples, 0.02%)</title><rect x="829.9" y="325" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="832.91" y="335.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1097.3" y="133" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1100.28" y="143.5" ></text>
</g>
<g >
<title>__GI__dl_catch_exception (10,309,278 samples, 0.02%)</title><rect x="811.1" y="341" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="814.12" y="351.5" ></text>
</g>
<g >
<title>applySunlightToModel (2,195,876,214 samples, 4.52%)</title><rect x="14.8" y="469" width="53.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="17.76" y="479.5" >apply..</text>
</g>
<g >
<title>XQueryExtension (10,309,278 samples, 0.02%)</title><rect x="810.1" y="405" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="813.11" y="415.5" ></text>
</g>
<g >
<title>Eigen::internal::rotation_base_generic_product_selector&lt;Eigen::Quaternion&lt;double, 0&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, true&gt;::run (82,474,224 samples, 0.17%)</title><rect x="909.8" y="421" width="2.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="912.85" y="431.5" ></text>
</g>
<g >
<title>Eigen::internal::conj_helper&lt;double __vector (30,927,834 samples, 0.06%)</title><rect x="16.3" y="325" width="0.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="19.26" y="335.5" ></text>
</g>
<g >
<title>getTriangleNormal (10,309,278 samples, 0.02%)</title><rect x="819.9" y="389" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="822.89" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (82,474,224 samples, 0.17%)</title><rect x="367.1" y="373" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="370.08" y="383.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="501" width="0.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="15.00" y="511.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D_01 (154,639,170 samples, 0.32%)</title><rect x="100.5" y="405" width="3.7" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="103.46" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (123,711,336 samples, 0.25%)</title><rect x="662.0" y="421" width="3.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="665.02" y="431.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="85" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="95.5" ></text>
</g>
<g >
<title>all (48,546,390,102 samples, 100%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10,309,278 samples, 0.02%)</title><rect x="829.9" y="341" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="832.91" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::dense_assignment_loop&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 3, 2&gt;::run (206,185,560 samples, 0.42%)</title><rect x="42.6" y="357" width="5.0" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="45.58" y="367.5" ></text>
</g>
<g >
<title>dl_open_worker_begin (10,309,278 samples, 0.02%)</title><rect x="11.8" y="85" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="14.75" y="95.5" ></text>
</g>
<g >
<title>double Eigen::internal::redux_impl&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::internal::redux_evaluator&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, 3, 2&gt;::run&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="47.6" y="373" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="50.59" y="383.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (10,309,278 samples, 0.02%)</title><rect x="12.0" y="581" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="15.00" y="591.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (639,175,236 samples, 1.32%)</title><rect x="551.8" y="293" width="15.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="554.76" y="303.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*, vertex&gt; (690,721,626 samples, 1.42%)</title><rect x="610.4" y="405" width="16.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="613.40" y="415.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;void  (10,309,278 samples, 0.02%)</title><rect x="12.0" y="565" width="0.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="15.00" y="575.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex, vertex&gt; (3,969,072,030 samples, 8.18%)</title><rect x="915.9" y="309" width="96.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="918.86" y="319.5" >vertex* std..</text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (30,927,834 samples, 0.06%)</title><rect x="658.3" y="357" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="661.26" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (1,092,783,468 samples, 2.25%)</title><rect x="671.0" y="325" width="26.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="674.04" y="335.5" >s..</text>
</g>
<g >
<title>__GI__dl_catch_exception (10,309,278 samples, 0.02%)</title><rect x="11.8" y="101" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="14.75" y="111.5" ></text>
</g>
<g >
<title>groundInfoHash::operator (876,288,630 samples, 1.81%)</title><rect x="383.4" y="373" width="21.3" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="386.37" y="383.5" >g..</text>
</g>
<g >
<title>__memset_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="757.5" y="373" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="760.49" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (30,927,834 samples, 0.06%)</title><rect x="830.2" y="357" width="0.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="833.16" y="367.5" ></text>
</g>
<g >
<title>renderer::createModelsFromPhysicsObjects (4,082,474,088 samples, 8.41%)</title><rect x="812.6" y="469" width="99.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="815.62" y="479.5" >renderer::cr..</text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;* std::__relocate_a&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (92,783,502 samples, 0.19%)</title><rect x="659.8" y="405" width="2.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="662.76" y="415.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (257,731,950 samples, 0.53%)</title><rect x="748.5" y="325" width="6.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="751.47" y="335.5" ></text>
</g>
<g >
<title>double __vector (30,927,834 samples, 0.06%)</title><rect x="16.3" y="341" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="19.26" y="351.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (51,546,390 samples, 0.11%)</title><rect x="914.6" y="373" width="1.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="917.61" y="383.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;model*&gt; (1,082,474,190 samples, 2.23%)</title><rect x="873.3" y="389" width="26.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="876.26" y="399.5" >v..</text>
</g>
<g >
<title>XCheckTypedWindowEvent (20,618,556 samples, 0.04%)</title><rect x="809.6" y="453" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="812.61" y="463.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wait (20,618,556 samples, 0.04%)</title><rect x="756.5" y="325" width="0.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="759.49" y="335.5" ></text>
</g>
<g >
<title>Eigen::internal::scalar_sum_op&lt;double, double&gt;::operator (10,309,278 samples, 0.02%)</title><rect x="815.6" y="357" width="0.3" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="818.63" y="367.5" ></text>
</g>
<g >
<title>Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::squaredNorm (10,309,278 samples, 0.02%)</title><rect x="47.6" y="421" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="50.59" y="431.5" ></text>
</g>
<g >
<title>groundInfoHash::operator (30,927,834 samples, 0.06%)</title><rect x="837.2" y="357" width="0.7" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="840.18" y="367.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (20,618,556 samples, 0.04%)</title><rect x="909.8" y="341" width="0.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="912.85" y="351.5" ></text>
</g>
<g >
<title>aerodynamicSurface::update_staticSurface (10,309,278 samples, 0.02%)</title><rect x="12.8" y="517" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="15.76" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (30,927,834 samples, 0.06%)</title><rect x="837.2" y="373" width="0.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="840.18" y="383.5" ></text>
</g>
<g >
<title>auto siv::perlin_detail::Octave2D&lt;siv::BasicPerlinNoise&lt;double&gt;, double&gt; (216,494,838 samples, 0.45%)</title><rect x="831.4" y="357" width="5.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="834.41" y="367.5" ></text>
</g>
<g >
<title>void Eigen::internal::div_assign_op&lt;double, double&gt;::assignPacket&lt;0, double __vector (51,546,390 samples, 0.11%)</title><rect x="46.3" y="309" width="1.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="49.33" y="319.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="10.8" y="565" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.75" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (185,567,004 samples, 0.38%)</title><rect x="375.4" y="341" width="4.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="378.35" y="351.5" ></text>
</g>
<g >
<title>double __vector (30,927,834 samples, 0.06%)</title><rect x="16.3" y="357" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="19.26" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,608,247,368 samples, 3.31%)</title><rect x="365.6" y="405" width="39.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="368.58" y="415.5" >std..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (20,618,556 samples, 0.04%)</title><rect x="904.8" y="389" width="0.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="907.84" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10,309,278 samples, 0.02%)</title><rect x="581.8" y="373" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="584.83" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (195,876,282 samples, 0.40%)</title><rect x="894.8" y="309" width="4.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="897.81" y="319.5" ></text>
</g>
<g >
<title>model::model (1,432,989,642 samples, 2.95%)</title><rect x="838.2" y="453" width="34.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="841.18" y="463.5" >mo..</text>
</g>
<g >
<title>__round (92,783,502 samples, 0.19%)</title><rect x="96.5" y="437" width="2.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="99.45" y="447.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::PlainObjectBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="49.6" y="405" width="0.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="52.59" y="415.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (134,020,614 samples, 0.28%)</title><rect x="816.6" y="357" width="3.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="819.63" y="367.5" ></text>
</g>
<g >
<title>xcb_wait_for_reply64 (61,855,668 samples, 0.13%)</title><rect x="704.4" y="341" width="1.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="707.37" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (814,432,962 samples, 1.68%)</title><rect x="345.8" y="293" width="19.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="348.78" y="303.5" ></text>
</g>
<g >
<title>_int_malloc (10,309,278 samples, 0.02%)</title><rect x="873.0" y="309" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="876.01" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="904.6" y="261" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="907.58" y="271.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="909.8" y="197" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="912.85" y="207.5" ></text>
</g>
<g >
<title>XShmPutImage (61,855,668 samples, 0.13%)</title><rect x="701.6" y="373" width="1.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="704.61" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="325" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="15.00" y="335.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_linearvec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 0, 2&gt;::run (51,546,390 samples, 0.11%)</title><rect x="46.3" y="341" width="1.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="49.33" y="351.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (4,278,350,370 samples, 8.81%)</title><rect x="700.9" y="405" width="104.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="703.86" y="415.5" >[libgallium-..</text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (206,185,560 samples, 0.42%)</title><rect x="42.6" y="373" width="5.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="45.58" y="383.5" ></text>
</g>
<g >
<title>XSync (113,402,058 samples, 0.23%)</title><rect x="703.1" y="373" width="2.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="706.12" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::vector (1,309,278,306 samples, 2.70%)</title><rect x="627.2" y="405" width="31.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="630.19" y="415.5" >st..</text>
</g>
<g >
<title>Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::norm (72,164,946 samples, 0.15%)</title><rect x="47.6" y="437" width="1.7" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="50.59" y="447.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (144,329,892 samples, 0.30%)</title><rect x="905.3" y="309" width="3.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="908.34" y="319.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (92,783,502 samples, 0.19%)</title><rect x="659.8" y="357" width="2.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="662.76" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_base (20,618,556 samples, 0.04%)</title><rect x="904.8" y="437" width="0.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="907.84" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (164,948,448 samples, 0.34%)</title><rect x="499.9" y="325" width="4.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="502.89" y="335.5" ></text>
</g>
<g >
<title>glfwSwapBuffers (10,309,278 samples, 0.02%)</title><rect x="811.6" y="469" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="814.62" y="479.5" ></text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;std::move_iterator&lt;vertex*&gt;, vertex*&gt; (3,391,752,462 samples, 6.99%)</title><rect x="1012.3" y="389" width="82.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1015.34" y="399.5" >vertex* s..</text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::clear (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="597" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1192.75" y="607.5" ></text>
</g>
<g >
<title>applySunlightToModel (20,618,556 samples, 0.04%)</title><rect x="16.5" y="293" width="0.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="19.52" y="303.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D_01 (134,020,614 samples, 0.28%)</title><rect x="406.9" y="405" width="3.3" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="409.93" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::_M_erase (20,618,556 samples, 0.04%)</title><rect x="899.6" y="437" width="0.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="902.57" y="447.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="806.6" y="373" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="809.61" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::allocate (30,927,834 samples, 0.06%)</title><rect x="659.0" y="405" width="0.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="662.01" y="415.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (20,618,556 samples, 0.04%)</title><rect x="909.8" y="325" width="0.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="912.85" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="101" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="111.5" ></text>
</g>
<g >
<title>auto siv::perlin_detail::Octave2D&lt;siv::BasicPerlinNoise&lt;double&gt;, double&gt; (134,020,614 samples, 0.28%)</title><rect x="406.9" y="373" width="3.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="409.93" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.08%)</title><rect x="739.2" y="213" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="742.20" y="223.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="10.3" y="581" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.25" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, double&gt;, true&gt; &gt; &gt;::allocate (20,618,556 samples, 0.04%)</title><rect x="582.1" y="357" width="0.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="585.08" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (257,731,950 samples, 0.53%)</title><rect x="740.5" y="293" width="6.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="743.45" y="303.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (10,309,278 samples, 0.02%)</title><rect x="757.7" y="373" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="760.74" y="383.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;model*, model&gt; (1,082,474,190 samples, 2.23%)</title><rect x="873.3" y="421" width="26.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="876.26" y="431.5" >v..</text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="721.2" y="341" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="724.16" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::scalar_abs2_op&lt;double&gt;::operator (10,309,278 samples, 0.02%)</title><rect x="47.6" y="325" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="50.59" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="725.4" y="245" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="728.42" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6,649,484,310 samples, 13.70%)</title><rect x="178.9" y="357" width="161.6" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="181.89" y="367.5" >std::_Hashtable&lt;grou..</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*&gt; (1,340,206,140 samples, 2.76%)</title><rect x="665.0" y="389" width="32.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="668.03" y="399.5" >vo..</text>
</g>
<g >
<title>__GI___clock_gettime (10,309,278 samples, 0.02%)</title><rect x="757.7" y="389" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="760.74" y="399.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="904.6" y="389" width="0.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="907.58" y="399.5" ></text>
</g>
<g >
<title>_int_free_create_chunk (10,309,278 samples, 0.02%)</title><rect x="904.6" y="213" width="0.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="907.58" y="223.5" ></text>
</g>
<g >
<title>tcache_get_n (30,927,834 samples, 0.06%)</title><rect x="755.2" y="293" width="0.8" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="758.24" y="303.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, double&gt;, true&gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="830.9" y="309" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="833.91" y="319.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, double, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt; &gt;::operator[] (41,237,112 samples, 0.08%)</title><rect x="836.9" y="405" width="1.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="839.93" y="415.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;model*, model&gt; (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="565" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1192.75" y="575.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, double&gt;, true&gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="830.9" y="325" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="833.91" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl_data::_Vector_impl_data (10,309,278 samples, 0.02%)</title><rect x="658.0" y="357" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="661.01" y="367.5" ></text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (690,721,626 samples, 1.42%)</title><rect x="610.4" y="389" width="16.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="613.40" y="399.5" ></text>
</g>
<g >
<title>getGroundModel (24,556,700,196 samples, 50.58%)</title><rect x="68.1" y="469" width="596.9" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="71.14" y="479.5" >getGroundModel</text>
</g>
<g >
<title>elf_machine_rela (10,309,278 samples, 0.02%)</title><rect x="811.1" y="181" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="814.12" y="191.5" ></text>
</g>
<g >
<title>gladLoadGLLoader (10,309,278 samples, 0.02%)</title><rect x="809.4" y="453" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="812.36" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (134,020,614 samples, 0.28%)</title><rect x="896.3" y="277" width="3.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="899.32" y="287.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (10,309,278 samples, 0.02%)</title><rect x="716.4" y="245" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="719.40" y="255.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="549" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.25" y="559.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*, vertex&gt; (144,329,892 samples, 0.30%)</title><rect x="905.3" y="437" width="3.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="908.34" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (1,092,783,468 samples, 2.25%)</title><rect x="671.0" y="341" width="26.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="674.04" y="351.5" >s..</text>
</g>
<g >
<title>double __vector (51,546,390 samples, 0.11%)</title><rect x="46.3" y="293" width="1.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="49.33" y="303.5" ></text>
</g>
<g >
<title>__libc_start_main_impl (41,237,112 samples, 0.08%)</title><rect x="12.3" y="597" width="1.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="15.26" y="607.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="501" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.50" y="511.5" ></text>
</g>
<g >
<title>Eigen::internal::binary_evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double&gt;::~binary_evaluator (10,309,278 samples, 0.02%)</title><rect x="909.6" y="245" width="0.2" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="912.60" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (463,917,510 samples, 0.96%)</title><rect x="840.4" y="325" width="11.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="843.44" y="335.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (1,917,525,708 samples, 3.95%)</title><rect x="758.2" y="389" width="46.7" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="761.24" y="399.5" >__me..</text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (154,639,170 samples, 0.32%)</title><rect x="606.6" y="357" width="3.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="609.64" y="367.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (20,618,556 samples, 0.04%)</title><rect x="754.7" y="325" width="0.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="757.74" y="335.5" ></text>
</g>
<g >
<title>vertex* std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (1,360,824,696 samples, 2.80%)</title><rect x="839.9" y="421" width="33.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="842.93" y="431.5" >ve..</text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::size (20,618,556 samples, 0.04%)</title><rect x="606.1" y="421" width="0.5" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="609.14" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Eigen::Quaternion&lt;double, 0&gt; &gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="873.0" y="389" width="0.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="876.01" y="399.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="904.6" y="437" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="907.58" y="447.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::operator/= (206,185,560 samples, 0.42%)</title><rect x="42.6" y="437" width="5.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="45.58" y="447.5" ></text>
</g>
<g >
<title>Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt;::~evaluator (10,309,278 samples, 0.02%)</title><rect x="909.6" y="261" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="912.60" y="271.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;::allocate (30,927,834 samples, 0.06%)</title><rect x="659.0" y="373" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="662.01" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_base (92,783,502 samples, 0.19%)</title><rect x="659.8" y="309" width="2.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="662.76" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl_data::_Vector_impl_data (10,309,278 samples, 0.02%)</title><rect x="837.9" y="261" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="840.93" y="271.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Grad&lt;double&gt; (72,164,946 samples, 0.15%)</title><rect x="408.2" y="325" width="1.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="411.18" y="335.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex const, vertex&gt; (30,927,834 samples, 0.06%)</title><rect x="658.3" y="277" width="0.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="661.26" y="287.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (4,371,133,872 samples, 9.00%)</title><rect x="698.9" y="453" width="106.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="701.86" y="463.5" >[libGLX_mesa...</text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;groundInfo const&amp;&gt;, std::tuple&lt;&gt; &gt; (20,618,556 samples, 0.04%)</title><rect x="582.1" y="389" width="0.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="585.08" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::_S_relocate (10,309,278 samples, 0.02%)</title><rect x="837.9" y="405" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="840.93" y="415.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;model*&gt; (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="549" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1192.75" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2,752,577,226 samples, 5.67%)</title><rect x="480.6" y="373" width="66.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="483.60" y="383.5" >std::_H..</text>
</g>
<g >
<title>renderer::setVerticesByModels (11,278,350,132 samples, 23.23%)</title><rect x="912.1" y="469" width="274.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="915.10" y="479.5" >renderer::setVerticesByModels</text>
</g>
<g >
<title>[libdxcore.so] (10,309,278 samples, 0.02%)</title><rect x="748.2" y="309" width="0.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="751.22" y="319.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (10,309,278 samples, 0.02%)</title><rect x="811.1" y="149" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="814.12" y="159.5" ></text>
</g>
<g >
<title>[libGLdispatch.so.0.0.0] (51,546,390 samples, 0.11%)</title><rect x="13.3" y="485" width="1.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="16.26" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (20,618,556 samples, 0.04%)</title><rect x="904.8" y="405" width="0.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="907.84" y="415.5" ></text>
</g>
<g >
<title>dl_open_worker_begin (10,309,278 samples, 0.02%)</title><rect x="811.1" y="245" width="0.3" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="814.12" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6,649,484,310 samples, 13.70%)</title><rect x="178.9" y="373" width="161.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="181.89" y="383.5" >std::_Hashtable&lt;grou..</text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="10.8" y="517" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.75" y="527.5" ></text>
</g>
<g >
<title>__memset_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="746.5" y="261" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="749.47" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="716.9" y="309" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="719.90" y="319.5" ></text>
</g>
<g >
<title>Eigen::Quaternion&lt;double, 0&gt;::Quaternion&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="909.6" y="421" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="912.60" y="431.5" ></text>
</g>
<g >
<title>groundInfo::operator== (82,474,224 samples, 0.17%)</title><rect x="576.3" y="309" width="2.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="579.32" y="319.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="705.9" y="357" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="708.87" y="367.5" ></text>
</g>
<g >
<title>tcache_get_n (10,309,278 samples, 0.02%)</title><rect x="657.8" y="245" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="660.76" y="255.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="703.9" y="309" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="706.87" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10,309,278 samples, 0.02%)</title><rect x="836.7" y="341" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="839.68" y="351.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (10,309,278 samples, 0.02%)</title><rect x="804.9" y="437" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="807.85" y="447.5" ></text>
</g>
<g >
<title>three_point_interpolate (154,639,170 samples, 0.32%)</title><rect x="61.1" y="437" width="3.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="64.12" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (814,432,962 samples, 1.68%)</title><rect x="547.5" y="373" width="19.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="550.50" y="383.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (546,391,734 samples, 1.13%)</title><rect x="881.3" y="293" width="13.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="884.28" y="303.5" ></text>
</g>
<g >
<title>_dlerror_run (10,309,278 samples, 0.02%)</title><rect x="11.8" y="213" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="14.75" y="223.5" ></text>
</g>
<g >
<title>[libdxcore.so] (10,309,278 samples, 0.02%)</title><rect x="734.9" y="325" width="0.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="737.94" y="335.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="373" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.50" y="383.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="10.8" y="485" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.75" y="495.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*, vertex&gt; (876,288,630 samples, 1.81%)</title><rect x="851.7" y="405" width="21.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="854.71" y="415.5" >v..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::~vector (10,309,278 samples, 0.02%)</title><rect x="904.6" y="453" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="907.58" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (1,793,814,372 samples, 3.70%)</title><rect x="503.9" y="325" width="43.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="506.90" y="335.5" >std:..</text>
</g>
<g >
<title>xcb_writev (10,309,278 samples, 0.02%)</title><rect x="806.4" y="309" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="809.36" y="319.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (92,783,502 samples, 0.19%)</title><rect x="1095.8" y="357" width="2.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1098.78" y="367.5" ></text>
</g>
<g >
<title>__GI__dl_catch_exception (10,309,278 samples, 0.02%)</title><rect x="11.8" y="181" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="14.75" y="191.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="10.8" y="501" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.75" y="511.5" ></text>
</g>
<g >
<title>_XEventsQueued (20,618,556 samples, 0.04%)</title><rect x="809.6" y="437" width="0.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="812.61" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (61,855,668 samples, 0.13%)</title><rect x="568.3" y="389" width="1.5" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="571.30" y="399.5" ></text>
</g>
<g >
<title>glXSwapBuffers (20,618,556 samples, 0.04%)</title><rect x="808.9" y="469" width="0.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="811.86" y="479.5" ></text>
</g>
<g >
<title>arena_for_chunk (10,309,278 samples, 0.02%)</title><rect x="657.5" y="245" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="660.51" y="255.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,927,834,986 samples, 3.97%)</title><rect x="1094.8" y="437" width="46.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1097.78" y="447.5" >[lib..</text>
</g>
<g >
<title>dlopen_implementation (10,309,278 samples, 0.02%)</title><rect x="811.1" y="389" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="814.12" y="399.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="437" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.50" y="447.5" ></text>
</g>
<g >
<title>getTriangleNormal (30,927,834 samples, 0.06%)</title><rect x="819.1" y="261" width="0.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="822.14" y="271.5" ></text>
</g>
<g >
<title>XGetGeometry (10,309,278 samples, 0.02%)</title><rect x="806.4" y="357" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="809.36" y="367.5" ></text>
</g>
<g >
<title>double Eigen::internal::redux_impl&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::internal::redux_evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, 3, 2&gt;::run&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="815.6" y="373" width="0.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="818.63" y="383.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (845,360,796 samples, 1.74%)</title><rect x="637.5" y="325" width="20.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="640.46" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="729.7" y="325" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="732.68" y="335.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (51,546,390 samples, 0.11%)</title><rect x="733.4" y="277" width="1.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="736.44" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::_S_relocate (92,783,502 samples, 0.19%)</title><rect x="659.8" y="421" width="2.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="662.76" y="431.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (20,618,556 samples, 0.04%)</title><rect x="705.1" y="293" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="708.12" y="303.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (48,402,060,210 samples, 99.70%)</title><rect x="13.3" y="565" width="1176.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="16.26" y="575.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="758.0" y="389" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="760.99" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="746.2" y="117" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="749.22" y="127.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (10,309,278 samples, 0.02%)</title><rect x="11.0" y="597" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.00" y="607.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="810.1" y="437" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="813.11" y="447.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex, vertex&gt; (1,649,484,480 samples, 3.40%)</title><rect x="1141.6" y="373" width="40.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1144.64" y="383.5" >ver..</text>
</g>
<g >
<title>std::vector&lt;visualModel, std::allocator&lt;visualModel&gt; &gt;::end (10,309,278 samples, 0.02%)</title><rect x="908.8" y="453" width="0.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="911.84" y="463.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (1,340,206,140 samples, 2.76%)</title><rect x="665.0" y="421" width="32.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="668.03" y="431.5" >vo..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,948,453,508 samples, 6.07%)</title><rect x="107.2" y="357" width="71.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="110.23" y="367.5" >std::__d..</text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="709.6" y="229" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="712.63" y="239.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="341" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="15.00" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (123,711,336 samples, 0.25%)</title><rect x="711.1" y="325" width="3.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="714.13" y="335.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (10,309,278 samples, 0.02%)</title><rect x="12.0" y="597" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="15.00" y="607.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;&amp; Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::_set_noalias&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="13.0" y="421" width="0.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="16.01" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="754.5" y="309" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="757.49" y="319.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (4,319,587,482 samples, 8.90%)</title><rect x="699.9" y="437" width="105.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="702.86" y="447.5" >[libgallium-..</text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (876,288,630 samples, 1.81%)</title><rect x="851.7" y="341" width="21.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="854.71" y="351.5" >v..</text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="485" width="0.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="15.00" y="495.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (10,309,278 samples, 0.02%)</title><rect x="812.4" y="357" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="815.37" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, double, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt; &gt;::operator[] (1,608,247,368 samples, 3.31%)</title><rect x="365.6" y="421" width="39.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="368.58" y="431.5" >std..</text>
</g>
<g >
<title>unsigned long std::_Hash_impl::hash&lt;double&gt; (30,927,834 samples, 0.06%)</title><rect x="837.2" y="325" width="0.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="840.18" y="335.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (123,711,336 samples, 0.25%)</title><rect x="662.0" y="373" width="3.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="665.02" y="383.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; const&amp;&gt; (123,711,336 samples, 0.25%)</title><rect x="659.0" y="437" width="3.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="662.01" y="447.5" ></text>
</g>
<g >
<title>applySunlightToModel (360,824,730 samples, 0.74%)</title><rect x="815.4" y="453" width="8.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="818.38" y="463.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (3,948,453,474 samples, 8.13%)</title><rect x="916.4" y="293" width="95.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="919.36" y="303.5" >__memcpy_av..</text>
</g>
<g >
<title>__GI___poll (10,309,278 samples, 0.02%)</title><rect x="808.4" y="389" width="0.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="811.36" y="399.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex*, vertex*&gt; (3,969,072,030 samples, 8.18%)</title><rect x="915.9" y="325" width="96.4" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="918.86" y="335.5" >vertex* std..</text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="729.7" y="309" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="732.68" y="319.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="49.6" y="373" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="52.59" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (164,948,448 samples, 0.34%)</title><rect x="742.5" y="261" width="4.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="745.46" y="271.5" ></text>
</g>
<g >
<title>double const&amp; std::min&lt;double&gt; (10,309,278 samples, 0.02%)</title><rect x="822.9" y="389" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="825.89" y="399.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise2D (154,639,170 samples, 0.32%)</title><rect x="100.5" y="357" width="3.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="103.46" y="367.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;::assignCoeff (103,092,780 samples, 0.21%)</title><rect x="816.6" y="309" width="2.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="819.63" y="319.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="699.6" y="437" width="0.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="702.61" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (30,927,834 samples, 0.06%)</title><rect x="830.2" y="309" width="0.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="833.16" y="319.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="10.3" y="549" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.25" y="559.5" ></text>
</g>
<g >
<title>renderer::applyKeyResponses (30,927,834 samples, 0.06%)</title><rect x="811.9" y="469" width="0.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="814.87" y="479.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="812.4" y="389" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="815.37" y="399.5" ></text>
</g>
<g >
<title>groundInfo::operator== (164,948,448 samples, 0.34%)</title><rect x="499.9" y="293" width="4.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="502.89" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;double&gt;::operator (742,268,016 samples, 1.53%)</title><rect x="386.6" y="357" width="18.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="389.63" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="716.4" y="293" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="719.40" y="303.5" ></text>
</g>
<g >
<title>[amdxc64.so] (61,855,668 samples, 0.13%)</title><rect x="731.7" y="309" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="734.68" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,030,927,800 samples, 2.12%)</title><rect x="340.5" y="373" width="25.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="343.52" y="383.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (494,845,344 samples, 1.02%)</title><rect x="569.8" y="373" width="12.0" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="572.80" y="383.5" ></text>
</g>
<g >
<title>vectorLocalspace::Matrix&lt;vectorWorldspace&gt; (10,309,278 samples, 0.02%)</title><rect x="13.0" y="469" width="0.3" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="16.01" y="479.5" ></text>
</g>
<g >
<title>_int_free (10,309,278 samples, 0.02%)</title><rect x="904.6" y="245" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="907.58" y="255.5" ></text>
</g>
<g >
<title>operator new (10,309,278 samples, 0.02%)</title><rect x="830.9" y="293" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="833.91" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::push_back (10,309,278 samples, 0.02%)</title><rect x="837.9" y="437" width="0.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="840.93" y="447.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::sum (10,309,278 samples, 0.02%)</title><rect x="815.6" y="405" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="818.63" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_base (1,278,350,472 samples, 2.63%)</title><rect x="627.2" y="389" width="31.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="630.19" y="399.5" >st..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (5,164,948,278 samples, 10.64%)</title><rect x="215.0" y="341" width="125.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="217.98" y="351.5" >std::__detail::..</text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="810.6" y="437" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="813.62" y="447.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Lerp&lt;double&gt; (20,618,556 samples, 0.04%)</title><rect x="829.4" y="309" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="832.41" y="319.5" ></text>
</g>
<g >
<title>model::~model (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="485" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1192.75" y="495.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (1,649,484,480 samples, 3.40%)</title><rect x="1141.6" y="421" width="40.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1144.64" y="431.5" >ver..</text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.08%)</title><rect x="724.7" y="325" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="727.67" y="335.5" ></text>
</g>
<g >
<title>_XSend (10,309,278 samples, 0.02%)</title><rect x="806.4" y="325" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="809.36" y="335.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,907,216,430 samples, 3.93%)</title><rect x="1095.3" y="405" width="46.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1098.28" y="415.5" >[lib..</text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="708.1" y="293" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="711.13" y="303.5" ></text>
</g>
<g >
<title>void std::destroy_at&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="904.6" y="373" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="907.58" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (61,855,668 samples, 0.13%)</title><rect x="721.2" y="325" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="724.16" y="335.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (51,546,390 samples, 0.11%)</title><rect x="753.0" y="293" width="1.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="755.98" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (123,711,336 samples, 0.25%)</title><rect x="662.0" y="453" width="3.0" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="665.02" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_free (876,288,630 samples, 1.81%)</title><rect x="873.3" y="325" width="21.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="876.26" y="335.5" >_..</text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="261" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="15.00" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (484,536,066 samples, 1.00%)</title><rect x="839.9" y="389" width="11.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="842.93" y="399.5" ></text>
</g>
<g >
<title>renderer::createModelsFromPhysicsObjects (10,309,278 samples, 0.02%)</title><rect x="909.8" y="133" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="912.85" y="143.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (20,618,556 samples, 0.04%)</title><rect x="807.9" y="389" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="810.86" y="399.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="1097.0" y="309" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1100.03" y="319.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.08%)</title><rect x="724.7" y="309" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="727.67" y="319.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (92,783,502 samples, 0.19%)</title><rect x="1095.8" y="373" width="2.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1098.78" y="383.5" ></text>
</g>
<g >
<title>vertex* std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (845,360,796 samples, 1.74%)</title><rect x="606.6" y="421" width="20.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="609.64" y="431.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;void  (48,402,060,210 samples, 99.70%)</title><rect x="13.3" y="533" width="1176.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="16.26" y="543.5" >void std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>xcb_wait_for_reply64 (20,618,556 samples, 0.04%)</title><rect x="812.1" y="405" width="0.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="815.12" y="415.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;Eigen::Quaternion&lt;double, 0&gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="873.0" y="357" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="876.01" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="709.9" y="181" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="712.88" y="191.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (876,288,630 samples, 1.81%)</title><rect x="851.7" y="277" width="21.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="854.71" y="287.5" >_..</text>
</g>
<g >
<title>Eigen::QuaternionBase&lt;Eigen::Quaternion&lt;double, 0&gt; &gt;::_transformVector (82,474,224 samples, 0.17%)</title><rect x="909.8" y="405" width="2.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="912.85" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,814,432,894 samples, 5.80%)</title><rect x="412.2" y="341" width="68.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="415.19" y="351.5" >std::__..</text>
</g>
<g >
<title>[libGLX.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="809.4" y="389" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="812.36" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (41,237,112 samples, 0.08%)</title><rect x="829.9" y="373" width="1.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="832.91" y="383.5" ></text>
</g>
<g >
<title>getGroundColorAveraged (268,041,228 samples, 0.55%)</title><rect x="831.4" y="421" width="6.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="834.41" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl::_Vector_impl (10,309,278 samples, 0.02%)</title><rect x="658.0" y="373" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="661.01" y="383.5" ></text>
</g>
<g >
<title>Eigen::QuaternionBase&lt;Eigen::Quaternion&lt;double, 0&gt; &gt;::inverse (30,927,834 samples, 0.06%)</title><rect x="909.1" y="437" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="912.10" y="447.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="752.5" y="261" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="755.48" y="271.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (10,309,278 samples, 0.02%)</title><rect x="899.6" y="245" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="902.57" y="255.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="405" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="15.00" y="415.5" ></text>
</g>
<g >
<title>dlopen_doit (10,309,278 samples, 0.02%)</title><rect x="11.8" y="165" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.75" y="175.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (10,309,278 samples, 0.02%)</title><rect x="807.1" y="421" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="810.11" y="431.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (175,257,726 samples, 0.36%)</title><rect x="701.6" y="389" width="4.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="704.61" y="399.5" ></text>
</g>
<g >
<title>getTriangleNormal (1,350,515,418 samples, 2.78%)</title><rect x="17.0" y="453" width="32.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="20.02" y="463.5" >ge..</text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;&amp; Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; &gt;::_set&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="909.6" y="357" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="912.60" y="367.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_linearvec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 0, 2&gt;::run (30,927,834 samples, 0.06%)</title><rect x="819.1" y="325" width="0.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="822.14" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (61,855,668 samples, 0.13%)</title><rect x="568.3" y="373" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="571.30" y="383.5" ></text>
</g>
<g >
<title>collisionModel::collider::rotateModelData (10,309,278 samples, 0.02%)</title><rect x="13.0" y="485" width="0.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="16.01" y="495.5" ></text>
</g>
<g >
<title>double __vector (30,927,834 samples, 0.06%)</title><rect x="16.3" y="309" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="19.26" y="319.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="517" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.25" y="527.5" ></text>
</g>
<g >
<title>__condvar_release_lock (10,309,278 samples, 0.02%)</title><rect x="807.9" y="357" width="0.2" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="810.86" y="367.5" ></text>
</g>
<g >
<title>operator new (51,546,390 samples, 0.11%)</title><rect x="914.6" y="357" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="917.61" y="367.5" ></text>
</g>
<g >
<title>physicsObject::updateModules (30,927,834 samples, 0.06%)</title><rect x="12.5" y="533" width="0.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="15.51" y="543.5" ></text>
</g>
<g >
<title>XInitExtension (10,309,278 samples, 0.02%)</title><rect x="810.1" y="421" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="813.11" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10,309,278 samples, 0.02%)</title><rect x="836.7" y="389" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="839.68" y="399.5" ></text>
</g>
<g >
<title>Eigen::internal::unary_evaluator&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::IndexBased, double&gt;::coeff (10,309,278 samples, 0.02%)</title><rect x="47.6" y="341" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="50.59" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="709.6" y="213" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="712.63" y="223.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.8" y="341" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.75" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,989,690,654 samples, 4.10%)</title><rect x="499.1" y="341" width="48.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="502.14" y="351.5" >std:..</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*&gt; (10,309,278 samples, 0.02%)</title><rect x="904.6" y="405" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="907.58" y="415.5" ></text>
</g>
<g >
<title>double Eigen::DenseBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::redux&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt; &gt; (41,237,112 samples, 0.08%)</title><rect x="16.0" y="405" width="1.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="19.01" y="415.5" ></text>
</g>
<g >
<title>Eigen::internal::abs2_impl_default&lt;double, false&gt;::run (10,309,278 samples, 0.02%)</title><rect x="47.6" y="277" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="50.59" y="287.5" ></text>
</g>
<g >
<title>[libGLX.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="809.1" y="437" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="812.11" y="447.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="734.2" y="261" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="737.19" y="271.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise3D (123,711,336 samples, 0.25%)</title><rect x="407.2" y="341" width="3.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="410.18" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_LinearTraversal_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 2, 3&gt;::run (10,309,278 samples, 0.02%)</title><rect x="13.0" y="341" width="0.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="16.01" y="351.5" ></text>
</g>
<g >
<title>getGroundAltitudeAveraged (12,587,628,438 samples, 25.93%)</title><rect x="98.7" y="437" width="306.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="101.71" y="447.5" >getGroundAltitudeAveraged</text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (123,711,336 samples, 0.25%)</title><rect x="662.0" y="437" width="3.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="665.02" y="447.5" ></text>
</g>
<g >
<title>vectorWorldspace::Matrix&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="49.6" y="437" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="52.59" y="447.5" ></text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="909.8" y="213" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="912.85" y="223.5" ></text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="708.1" y="309" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="711.13" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10,309,278 samples, 0.02%)</title><rect x="829.9" y="357" width="0.3" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="832.91" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.06%)</title><rect x="751.7" y="133" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="754.73" y="143.5" ></text>
</g>
<g >
<title>[libglfw.so.3.3] (10,309,278 samples, 0.02%)</title><rect x="811.4" y="453" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="814.37" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (20,618,556 samples, 0.04%)</title><rect x="830.9" y="389" width="0.5" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="833.91" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="725.2" y="277" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="728.17" y="287.5" ></text>
</g>
<g >
<title>void std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (7,453,607,994 samples, 15.35%)</title><rect x="913.6" y="437" width="181.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="916.61" y="447.5" >void std::vector&lt;vertex..</text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (134,020,614 samples, 0.28%)</title><rect x="896.3" y="261" width="3.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="899.32" y="271.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="11.5" y="581" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="14.50" y="591.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (680,412,348 samples, 1.40%)</title><rect x="610.4" y="277" width="16.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="613.40" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (845,360,796 samples, 1.74%)</title><rect x="637.5" y="341" width="20.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="640.46" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (865,979,352 samples, 1.78%)</title><rect x="582.6" y="389" width="21.0" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="585.58" y="399.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (484,536,066 samples, 1.00%)</title><rect x="839.9" y="357" width="11.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="842.93" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::size (51,546,390 samples, 0.11%)</title><rect x="838.7" y="421" width="1.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="841.68" y="431.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::PlainObjectBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (20,618,556 samples, 0.04%)</title><rect x="909.8" y="373" width="0.5" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="912.85" y="383.5" ></text>
</g>
<g >
<title>getTriangleNormal (175,257,726 samples, 0.36%)</title><rect x="815.9" y="437" width="4.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="818.88" y="447.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (20,618,556 samples, 0.04%)</title><rect x="899.6" y="309" width="0.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="902.57" y="319.5" ></text>
</g>
<g >
<title>void Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;::assignPacket&lt;0, 16, double __vector (51,546,390 samples, 0.11%)</title><rect x="46.3" y="325" width="1.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="49.33" y="335.5" ></text>
</g>
<g >
<title>___dlopen (10,309,278 samples, 0.02%)</title><rect x="811.1" y="405" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="814.12" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="750.7" y="213" width="1.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="753.73" y="223.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="909.6" y="341" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="912.60" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="732.7" y="197" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="735.68" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl_data::_Vector_impl_data (92,783,502 samples, 0.19%)</title><rect x="659.8" y="277" width="2.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="662.76" y="287.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="597" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.25" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10,309,278 samples, 0.02%)</title><rect x="373.8" y="341" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="376.85" y="351.5" ></text>
</g>
<g >
<title>__libc_calloc (10,309,278 samples, 0.02%)</title><rect x="1097.8" y="325" width="0.2" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1100.79" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, double, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt; &gt;::operator[] (20,618,556 samples, 0.04%)</title><rect x="830.9" y="405" width="0.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="833.91" y="415.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="437" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="15.00" y="447.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.06%)</title><rect x="730.9" y="261" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="733.93" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (680,412,348 samples, 1.40%)</title><rect x="587.1" y="325" width="16.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="590.09" y="335.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (1,649,484,480 samples, 3.40%)</title><rect x="1141.6" y="437" width="40.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1144.64" y="447.5" >ver..</text>
</g>
<g >
<title>tcache_get (30,927,834 samples, 0.06%)</title><rect x="755.2" y="309" width="0.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="758.24" y="319.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (1,649,484,480 samples, 3.40%)</title><rect x="1141.6" y="357" width="40.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1144.64" y="367.5" >__m..</text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::_M_erase_at_end (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="581" width="0.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1192.75" y="591.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise3D (185,567,004 samples, 0.38%)</title><rect x="825.4" y="325" width="4.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="828.40" y="335.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="389" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="15.00" y="399.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Lerp&lt;double&gt; (10,309,278 samples, 0.02%)</title><rect x="409.9" y="325" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="412.93" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (30,927,834 samples, 0.06%)</title><rect x="837.2" y="309" width="0.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="840.18" y="319.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.08%)</title><rect x="713.1" y="245" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="716.14" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10,309,278 samples, 0.02%)</title><rect x="836.7" y="357" width="0.2" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="839.68" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (1,082,474,190 samples, 2.23%)</title><rect x="671.3" y="309" width="26.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="674.29" y="319.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (10,309,278 samples, 0.02%)</title><rect x="581.8" y="357" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="584.83" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, double, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt; &gt;::operator[] (1,494,845,310 samples, 3.08%)</title><rect x="567.3" y="421" width="36.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="570.30" y="431.5" >std..</text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="181" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="191.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (51,546,390 samples, 0.11%)</title><rect x="914.6" y="389" width="1.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="917.61" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (824,742,240 samples, 1.70%)</title><rect x="638.0" y="277" width="20.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="640.96" y="287.5" ></text>
</g>
<g >
<title>operator new (10,309,278 samples, 0.02%)</title><rect x="873.0" y="341" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="876.01" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (257,731,950 samples, 0.53%)</title><rect x="215.5" y="325" width="6.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="218.48" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="739.7" y="181" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="742.70" y="191.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.06%)</title><rect x="721.9" y="229" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="724.91" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (195,876,282 samples, 0.40%)</title><rect x="894.8" y="325" width="4.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="897.81" y="335.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex const*, vertex*&gt; (144,329,892 samples, 0.30%)</title><rect x="905.3" y="341" width="3.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="908.34" y="351.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (48,402,060,210 samples, 99.70%)</title><rect x="13.3" y="549" width="1176.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="16.26" y="559.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="229" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="239.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="750.7" y="245" width="1.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="753.73" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,814,432,894 samples, 5.80%)</title><rect x="412.2" y="373" width="68.4" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="415.19" y="383.5" >std::_H..</text>
</g>
<g >
<title>_int_malloc (20,618,556 samples, 0.04%)</title><rect x="582.1" y="277" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="585.08" y="287.5" ></text>
</g>
<g >
<title>decltype  (1,309,278,306 samples, 2.70%)</title><rect x="627.2" y="421" width="31.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="630.19" y="431.5" >de..</text>
</g>
<g >
<title>malloc_consolidate (10,309,278 samples, 0.02%)</title><rect x="899.6" y="229" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="902.57" y="239.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;true, vertex*, vertex*&gt; (3,391,752,462 samples, 6.99%)</title><rect x="1012.3" y="341" width="82.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1015.34" y="351.5" >vertex* s..</text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (92,783,502 samples, 0.19%)</title><rect x="805.1" y="469" width="2.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="808.10" y="479.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Fade&lt;double&gt; (10,309,278 samples, 0.02%)</title><rect x="101.0" y="325" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="103.96" y="335.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;model&gt; &gt;::destroy&lt;model&gt; (20,618,556 samples, 0.04%)</title><rect x="899.6" y="421" width="0.5" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="902.57" y="431.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (463,917,510 samples, 0.96%)</title><rect x="736.9" y="325" width="11.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="739.94" y="335.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.8" y="309" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.75" y="319.5" ></text>
</g>
<g >
<title>dl_open_worker (10,309,278 samples, 0.02%)</title><rect x="811.1" y="277" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="814.12" y="287.5" ></text>
</g>
<g >
<title>_IO_getc (10,309,278 samples, 0.02%)</title><rect x="10.5" y="533" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="13.50" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::operator[] (10,309,278 samples, 0.02%)</title><rect x="49.3" y="437" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="52.34" y="447.5" ></text>
</g>
<g >
<title>Eigen::internal::dense_assignment_loop&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 3, 2&gt;::run (20,618,556 samples, 0.04%)</title><rect x="909.8" y="293" width="0.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="912.85" y="303.5" ></text>
</g>
<g >
<title>glfwCreateWindow (20,618,556 samples, 0.04%)</title><rect x="11.5" y="597" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="14.50" y="607.5" ></text>
</g>
<g >
<title>getGroundAltitude (164,948,448 samples, 0.34%)</title><rect x="100.5" y="421" width="4.0" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="103.46" y="431.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="738.9" y="261" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="741.95" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;* std::__relocate_a&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="837.9" y="389" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="840.93" y="399.5" ></text>
</g>
<g >
<title>_dl_open_relocate_one_object (10,309,278 samples, 0.02%)</title><rect x="11.8" y="69" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="14.75" y="79.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (855,670,074 samples, 1.76%)</title><rect x="344.8" y="309" width="20.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="347.78" y="319.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (20,618,556 samples, 0.04%)</title><rect x="756.5" y="341" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="759.49" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::dense_assignment_loop&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 3, 2&gt;::run (10,309,278 samples, 0.02%)</title><rect x="49.6" y="325" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="52.59" y="335.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (20,618,556 samples, 0.04%)</title><rect x="717.1" y="325" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="720.15" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="229" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="15.00" y="239.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (61,855,668 samples, 0.13%)</title><rect x="752.7" y="309" width="1.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="755.73" y="319.5" ></text>
</g>
<g >
<title>groundInfoHash::operator (1,030,927,800 samples, 2.12%)</title><rect x="340.5" y="357" width="25.1" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="343.52" y="367.5" >g..</text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (10,309,278 samples, 0.02%)</title><rect x="904.6" y="325" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="907.58" y="335.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;model&gt; (1,082,474,190 samples, 2.23%)</title><rect x="873.3" y="373" width="26.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="876.26" y="383.5" >v..</text>
</g>
<g >
<title>checked_request2size (10,309,278 samples, 0.02%)</title><rect x="830.9" y="261" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="833.91" y="271.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (10,309,278 samples, 0.02%)</title><rect x="740.2" y="277" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="743.20" y="287.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="810.4" y="389" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="813.37" y="399.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="49.6" y="245" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="52.59" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;* std::__relocate_a_1&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="837.9" y="373" width="0.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="840.93" y="383.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="837.9" y="341" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="840.93" y="351.5" ></text>
</g>
<g >
<title>_int_free (82,474,224 samples, 0.17%)</title><rect x="663.0" y="341" width="2.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="666.02" y="351.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="747.7" y="277" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="750.72" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="165" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="175.5" ></text>
</g>
<g >
<title>renderer::setVertices (3,577,319,466 samples, 7.37%)</title><rect x="1094.8" y="453" width="86.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1097.78" y="463.5" >renderer::..</text>
</g>
<g >
<title>std::hash&lt;double&gt;::operator (762,886,572 samples, 1.57%)</title><rect x="585.1" y="357" width="18.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="588.09" y="367.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="357" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="15.00" y="367.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="277" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.50" y="287.5" ></text>
</g>
<g >
<title>groundInfoHash::operator (10,309,278 samples, 0.02%)</title><rect x="831.2" y="357" width="0.2" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="834.16" y="367.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (51,546,390 samples, 0.11%)</title><rect x="704.4" y="325" width="1.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="707.37" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (51,546,390 samples, 0.11%)</title><rect x="914.6" y="405" width="1.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="917.61" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::operator= (938,144,298 samples, 1.93%)</title><rect x="604.4" y="437" width="22.8" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="607.39" y="447.5" >s..</text>
</g>
<g >
<title>recalculateGround (28,092,782,550 samples, 57.87%)</title><rect x="14.8" y="485" width="682.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="17.76" y="495.5" >recalculateGround</text>
</g>
<g >
<title>Eigen::Quaternion&lt;double, 0&gt;&amp; Eigen::QuaternionBase&lt;Eigen::Quaternion&lt;double, 0&gt; &gt;::operator=&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="909.6" y="405" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="912.60" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (30,927,834 samples, 0.06%)</title><rect x="659.0" y="341" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="662.01" y="351.5" ></text>
</g>
<g >
<title>_mm_mul_pd (10,309,278 samples, 0.02%)</title><rect x="16.3" y="293" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="19.26" y="303.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="751.2" y="181" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="754.23" y="191.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="11.5" y="245" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.50" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (30,927,834 samples, 0.06%)</title><rect x="830.2" y="341" width="0.7" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="833.16" y="351.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (20,618,556 samples, 0.04%)</title><rect x="704.6" y="309" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="707.62" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="873.0" y="325" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="876.01" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (61,855,668 samples, 0.13%)</title><rect x="721.2" y="309" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="724.16" y="319.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (10,309,278 samples, 0.02%)</title><rect x="49.6" y="357" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="52.59" y="367.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (10,309,278 samples, 0.02%)</title><rect x="881.0" y="293" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="884.03" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (134,020,614 samples, 0.28%)</title><rect x="379.9" y="341" width="3.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="382.86" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, double&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, double&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;groundInfo const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="830.9" y="357" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="833.91" y="367.5" ></text>
</g>
<g >
<title>double Eigen::internal::redux_impl&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::internal::redux_evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, 3, 2&gt;::run&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (41,237,112 samples, 0.08%)</title><rect x="16.0" y="389" width="1.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="19.01" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,494,845,310 samples, 3.08%)</title><rect x="567.3" y="405" width="36.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="570.30" y="415.5" >std..</text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise2D (185,567,004 samples, 0.38%)</title><rect x="825.4" y="341" width="4.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="828.40" y="351.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="904.6" y="293" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="907.58" y="303.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D (154,639,170 samples, 0.32%)</title><rect x="100.5" y="389" width="3.7" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="103.46" y="399.5" ></text>
</g>
<g >
<title>___pthread_cond_wait (20,618,556 samples, 0.04%)</title><rect x="705.1" y="309" width="0.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="708.12" y="319.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (20,618,556 samples, 0.04%)</title><rect x="809.6" y="421" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="812.61" y="431.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="904.6" y="277" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="907.58" y="287.5" ></text>
</g>
<g >
<title>Eigen::internal::redux_novec_linear_unroller&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::internal::redux_evaluator&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, 2l, 1l&gt;::run (10,309,278 samples, 0.02%)</title><rect x="47.6" y="357" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="50.59" y="367.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, double&gt;, true&gt; &gt;::allocate (20,618,556 samples, 0.04%)</title><rect x="582.1" y="341" width="0.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="585.08" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::dot_nocheck&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, false&gt;::run (41,237,112 samples, 0.08%)</title><rect x="16.0" y="437" width="1.0" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="19.01" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (845,360,796 samples, 1.74%)</title><rect x="637.5" y="357" width="20.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="640.46" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="738.7" y="293" width="1.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="741.70" y="303.5" ></text>
</g>
<g >
<title>glXQueryExtensionsString (10,309,278 samples, 0.02%)</title><rect x="811.1" y="453" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="814.12" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="731.9" y="245" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="734.93" y="255.5" ></text>
</g>
<g >
<title>std::equal_to&lt;groundInfo&gt;::operator (185,567,004 samples, 0.38%)</title><rect x="375.4" y="325" width="4.5" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="378.35" y="335.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (61,855,668 samples, 0.13%)</title><rect x="746.7" y="293" width="1.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="749.72" y="303.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;std::move_iterator&lt;vertex*&gt;, vertex*&gt; (3,391,752,462 samples, 6.99%)</title><rect x="1012.3" y="373" width="82.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1015.34" y="383.5" >vertex* s..</text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise3D (154,639,170 samples, 0.32%)</title><rect x="100.5" y="341" width="3.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="103.46" y="351.5" ></text>
</g>
<g >
<title>void Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;::assignPacket&lt;0, 16, double __vector (30,927,834 samples, 0.06%)</title><rect x="819.1" y="309" width="0.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="822.14" y="319.5" ></text>
</g>
<g >
<title>void std::destroy_at&lt;model&gt; (20,618,556 samples, 0.04%)</title><rect x="899.6" y="405" width="0.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="902.57" y="415.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="10.8" y="549" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.75" y="559.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (61,855,668 samples, 0.13%)</title><rect x="733.2" y="309" width="1.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="736.19" y="319.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="806.4" y="293" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="809.36" y="303.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="565" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.25" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;model*&gt; (1,082,474,190 samples, 2.23%)</title><rect x="873.3" y="405" width="26.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="876.26" y="415.5" >v..</text>
</g>
<g >
<title>_dl_open (10,309,278 samples, 0.02%)</title><rect x="11.8" y="149" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="14.75" y="159.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (206,185,560 samples, 0.42%)</title><rect x="42.6" y="421" width="5.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="45.58" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, double&gt;, std::allocator&lt;std::pair&lt;groundInfo const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10,309,278 samples, 0.02%)</title><rect x="383.1" y="389" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="386.12" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (989,690,688 samples, 2.04%)</title><rect x="673.5" y="293" width="24.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="676.55" y="303.5" >s..</text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex const, vertex&gt; (144,329,892 samples, 0.30%)</title><rect x="905.3" y="325" width="3.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="908.34" y="335.5" ></text>
</g>
<g >
<title>getTriangleNormal (10,309,278 samples, 0.02%)</title><rect x="49.6" y="229" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="52.59" y="239.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (690,721,626 samples, 1.42%)</title><rect x="550.5" y="309" width="16.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="553.51" y="319.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="12.0" y="245" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="15.00" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::operator= (1,432,989,642 samples, 2.95%)</title><rect x="838.2" y="437" width="34.8" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="841.18" y="447.5" >st..</text>
</g>
<g >
<title>[libxcb.so.1.1.0] (30,927,834 samples, 0.06%)</title><rect x="807.9" y="405" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="810.86" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="708.1" y="341" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="711.13" y="351.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D (134,020,614 samples, 0.28%)</title><rect x="406.9" y="389" width="3.3" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="409.93" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="904.6" y="309" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="907.58" y="319.5" ></text>
</g>
<g >
<title>D3DKMTWaitForSynchronizationObjectFromCpu (10,309,278 samples, 0.02%)</title><rect x="724.4" y="325" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="727.41" y="335.5" ></text>
</g>
<g >
<title>[libdxcore.so] (20,618,556 samples, 0.04%)</title><rect x="734.7" y="341" width="0.5" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="737.69" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::_M_move_assign (1,340,206,140 samples, 2.76%)</title><rect x="665.0" y="453" width="32.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="668.03" y="463.5" >st..</text>
</g>
<g >
<title>std::equal_to&lt;groundInfo&gt;::operator (257,731,950 samples, 0.53%)</title><rect x="215.5" y="309" width="6.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="218.48" y="319.5" ></text>
</g>
<g >
<title>[libGLX.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="809.1" y="421" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="812.11" y="431.5" ></text>
</g>
<g >
<title>_dl_catch_error (10,309,278 samples, 0.02%)</title><rect x="811.1" y="357" width="0.3" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="814.12" y="367.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (484,536,066 samples, 1.00%)</title><rect x="839.9" y="373" width="11.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="842.93" y="383.5" ></text>
</g>
</g>
</svg>
