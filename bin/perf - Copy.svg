<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>tcache_get (10,309,278 samples, 0.02%)</title><rect x="739.7" y="325" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="742.66" y="335.5" ></text>
</g>
<g >
<title>_int_free (1,144,329,858 samples, 2.42%)</title><rect x="660.2" y="245" width="28.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="663.18" y="255.5" >_i..</text>
</g>
<g >
<title>__GI___clock_gettime (10,309,278 samples, 0.02%)</title><rect x="740.4" y="373" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="743.43" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="710.3" y="213" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.34" y="223.5" ></text>
</g>
<g >
<title>tcache_put (103,092,780 samples, 0.22%)</title><rect x="616.2" y="261" width="2.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="619.20" y="271.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*, vertex&gt; (113,402,058 samples, 0.24%)</title><rect x="624.2" y="405" width="2.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="627.18" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;groundInfo const&amp;&gt;, std::tuple&lt;&gt; &gt; (41,237,112 samples, 0.09%)</title><rect x="527.2" y="405" width="1.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="530.21" y="415.5" ></text>
</g>
<g >
<title>operator new (10,309,278 samples, 0.02%)</title><rect x="814.8" y="309" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="817.76" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::operator= (1,958,762,820 samples, 4.14%)</title><rect x="641.2" y="485" width="48.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="644.15" y="495.5" >std:..</text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (10,309,278 samples, 0.02%)</title><rect x="933.1" y="437" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="936.06" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (30,927,834 samples, 0.07%)</title><rect x="813.2" y="357" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="816.21" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, std::pair&lt;double, double&gt;, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt; &gt;::find (14,113,401,582 samples, 29.84%)</title><rect x="150.7" y="437" width="352.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="153.68" y="447.5" >std::unordered_map&lt;groundInfo, std::pair&lt;double..</text>
</g>
<g >
<title>__memset_chk_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="785.7" y="421" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="788.69" y="431.5" ></text>
</g>
<g >
<title>getGroundModel_Sub (649,484,514 samples, 1.37%)</title><rect x="799.1" y="453" width="16.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="802.07" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="10.0" y="565" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>xcb_wait_for_reply64 (20,618,556 samples, 0.04%)</title><rect x="789.0" y="421" width="0.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="792.04" y="431.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="734.0" y="149" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="737.00" y="159.5" ></text>
</g>
<g >
<title>[libGLdispatch.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="14.4" y="501" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="17.37" y="511.5" ></text>
</g>
<g >
<title>malloc@plt (20,618,556 samples, 0.04%)</title><rect x="623.1" y="293" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="626.15" y="303.5" ></text>
</g>
<g >
<title>dl_open_worker (10,309,278 samples, 0.02%)</title><rect x="11.3" y="133" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="14.29" y="143.5" ></text>
</g>
<g >
<title>decltype  (20,618,556 samples, 0.04%)</title><rect x="815.3" y="421" width="0.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="818.27" y="431.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (175,257,726 samples, 0.37%)</title><rect x="909.9" y="261" width="4.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="912.92" y="271.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="485" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.29" y="495.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="698.5" y="229" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.50" y="239.5" ></text>
</g>
<g >
<title>Eigen::QuaternionBase&lt;Eigen::Quaternion&lt;double, 0&gt; &gt;::_transformVector (10,309,278 samples, 0.02%)</title><rect x="12.8" y="437" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="15.83" y="447.5" ></text>
</g>
<g >
<title>decltype  (10,309,278 samples, 0.02%)</title><rect x="922.0" y="421" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="925.01" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="11.5" y="629" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.54" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_create_storage (1,845,360,762 samples, 3.90%)</title><rect x="577.6" y="389" width="46.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="580.62" y="399.5" >std:..</text>
</g>
<g >
<title>double siv::perlin_detail::Lerp&lt;double&gt; (41,237,112 samples, 0.09%)</title><rect x="811.9" y="325" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="814.93" y="335.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::PlainObjectBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (41,237,112 samples, 0.09%)</title><rect x="72.2" y="421" width="1.1" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="75.24" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::_M_move_assign (1,958,762,820 samples, 4.14%)</title><rect x="641.2" y="469" width="48.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="644.15" y="479.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;groundInfo const&amp;&gt;, std::tuple&lt;&gt; &gt; (41,237,112 samples, 0.09%)</title><rect x="527.2" y="389" width="1.0" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="530.21" y="399.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (257,731,950 samples, 0.54%)</title><rect x="634.7" y="389" width="6.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="637.72" y="399.5" ></text>
</g>
<g >
<title>double Eigen::internal::scalar_sum_op&lt;double, double&gt;::predux&lt;double __vector (20,618,556 samples, 0.04%)</title><rect x="70.4" y="373" width="0.6" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="73.44" y="383.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (195,876,282 samples, 0.41%)</title><rect x="922.5" y="405" width="4.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="925.52" y="415.5" ></text>
</g>
<g >
<title>_int_free (1,061,855,634 samples, 2.24%)</title><rect x="880.6" y="325" width="26.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="883.60" y="335.5" >_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,309,278 samples, 0.02%)</title><rect x="874.4" y="469" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="877.42" y="479.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_innervec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 2, 4&gt;::run (10,309,278 samples, 0.02%)</title><rect x="928.2" y="245" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="931.18" y="255.5" ></text>
</g>
<g >
<title>collisionModel::triangle&amp; std::vector&lt;collisionModel::triangle, std::allocator&lt;collisionModel::triangle&gt; &gt;::emplace_back&lt;collisionModel::triangle&gt; (10,309,278 samples, 0.02%)</title><rect x="12.6" y="469" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="15.57" y="479.5" ></text>
</g>
<g >
<title>tcache_get (10,309,278 samples, 0.02%)</title><rect x="622.9" y="277" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="625.89" y="287.5" ></text>
</g>
<g >
<title>operator new (20,618,556 samples, 0.04%)</title><rect x="815.3" y="293" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="818.27" y="303.5" ></text>
</g>
<g >
<title>Eigen::internal::scalar_difference_op&lt;double, double&gt;::operator (10,309,278 samples, 0.02%)</title><rect x="72.2" y="277" width="0.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="75.24" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="927.4" y="405" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="930.41" y="415.5" ></text>
</g>
<g >
<title>std::equal_to&lt;groundInfo&gt;::operator (175,257,726 samples, 0.37%)</title><rect x="518.5" y="341" width="4.3" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="521.47" y="351.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (711,340,182 samples, 1.50%)</title><rect x="722.2" y="357" width="17.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="725.17" y="367.5" ></text>
</g>
<g >
<title>start_thread (47,123,709,738 samples, 99.63%)</title><rect x="14.1" y="613" width="1175.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="17.12" y="623.5" >start_thread</text>
</g>
<g >
<title>heap_trim (10,309,278 samples, 0.02%)</title><rect x="927.4" y="325" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="930.41" y="335.5" ></text>
</g>
<g >
<title>void Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;::assignPacket&lt;0, 0, double __vector (30,927,834 samples, 0.07%)</title><rect x="72.5" y="309" width="0.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="75.50" y="319.5" ></text>
</g>
<g >
<title>[libglfw.so.3.3] (10,309,278 samples, 0.02%)</title><rect x="788.0" y="469" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="791.01" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::operator[] (20,618,556 samples, 0.04%)</title><rect x="71.7" y="453" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="74.73" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="725.0" y="197" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="728.00" y="207.5" ></text>
</g>
<g >
<title>__GI___isoc99_sscanf (10,309,278 samples, 0.02%)</title><rect x="787.2" y="469" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="790.24" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (10,309,278 samples, 0.02%)</title><rect x="874.4" y="421" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="877.42" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (7,329,896,658 samples, 15.50%)</title><rect x="292.1" y="341" width="182.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="295.14" y="351.5" >std::__detail::_Hashtab..</text>
</g>
<g >
<title>renderer::createModelsFromPhysicsObjects (5,639,175,066 samples, 11.92%)</title><rect x="789.6" y="485" width="140.6" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="792.55" y="495.5" >renderer::createM..</text>
</g>
<g >
<title>Eigen::internal::rotation_base_generic_product_selector&lt;Eigen::Quaternion&lt;double, 0&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, true&gt;::run (10,309,278 samples, 0.02%)</title><rect x="12.8" y="453" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="15.83" y="463.5" ></text>
</g>
<g >
<title>three_point_interpolate (30,927,834 samples, 0.07%)</title><rect x="798.3" y="437" width="0.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="801.30" y="447.5" ></text>
</g>
<g >
<title>_int_free_create_chunk (41,237,112 samples, 0.09%)</title><rect x="639.6" y="325" width="1.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="642.61" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (41,237,112 samples, 0.09%)</title><rect x="813.0" y="389" width="1.0" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="815.96" y="399.5" ></text>
</g>
<g >
<title>glXSwapBuffers (10,309,278 samples, 0.02%)</title><rect x="786.0" y="485" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="788.95" y="495.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (298,969,062 samples, 0.63%)</title><rect x="723.7" y="341" width="7.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="726.71" y="351.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*&gt; (1,958,762,820 samples, 4.14%)</title><rect x="641.2" y="405" width="48.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="644.15" y="415.5" >void..</text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt; &gt;::allocate (30,927,834 samples, 0.07%)</title><rect x="527.2" y="357" width="0.8" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="530.21" y="367.5" ></text>
</g>
<g >
<title>model::~model (1,577,319,534 samples, 3.33%)</title><rect x="874.9" y="357" width="39.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="877.94" y="367.5" >mod..</text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::vector (206,185,560 samples, 0.44%)</title><rect x="922.3" y="469" width="5.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="925.26" y="479.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="213" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="223.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex*, vertex*&gt; (3,494,845,242 samples, 7.39%)</title><rect x="933.3" y="341" width="87.2" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="936.32" y="351.5" >vertex* st..</text>
</g>
<g >
<title>tcache_get_n (41,237,112 samples, 0.09%)</title><rect x="737.9" y="293" width="1.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="740.86" y="303.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_LinearTraversal_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 2, 3&gt;::run (41,237,112 samples, 0.09%)</title><rect x="794.7" y="341" width="1.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="797.69" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_create_storage (10,309,278 samples, 0.02%)</title><rect x="922.3" y="437" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="925.26" y="447.5" ></text>
</g>
<g >
<title>void Eigen::internal::div_assign_op&lt;double, double&gt;::assignPacket&lt;0, double __vector (92,783,502 samples, 0.20%)</title><rect x="67.6" y="325" width="2.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="70.61" y="335.5" ></text>
</g>
<g >
<title>renderer::applyKeyResponses (41,237,112 samples, 0.09%)</title><rect x="788.5" y="485" width="1.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="791.52" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (20,618,556 samples, 0.04%)</title><rect x="526.7" y="389" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="529.70" y="399.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="261" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="271.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="787.0" y="373" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="789.98" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,309,278 samples, 0.02%)</title><rect x="815.0" y="309" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="818.01" y="319.5" ></text>
</g>
<g >
<title>operator new (1,288,659,750 samples, 2.72%)</title><rect x="591.5" y="309" width="32.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="594.51" y="319.5" >op..</text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="613" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.74" y="623.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (206,185,560 samples, 0.44%)</title><rect x="629.6" y="389" width="5.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="632.58" y="399.5" ></text>
</g>
<g >
<title>getTriangleNormal (2,185,566,936 samples, 4.62%)</title><rect x="18.7" y="469" width="54.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="21.74" y="479.5" >getTr..</text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="718.8" y="293" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="721.82" y="303.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="928.4" y="229" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="931.44" y="239.5" ></text>
</g>
<g >
<title>Eigen::internal::rotation_base_generic_product_selector&lt;Eigen::Quaternion&lt;double, 0&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, true&gt;::run (72,164,946 samples, 0.15%)</title><rect x="928.4" y="437" width="1.8" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="931.44" y="447.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*&gt; (1,958,762,820 samples, 4.14%)</title><rect x="641.2" y="421" width="48.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="644.15" y="431.5" >void..</text>
</g>
<g >
<title>[libxcb.so.1.1.0] (20,618,556 samples, 0.04%)</title><rect x="789.0" y="389" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="792.04" y="399.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*, vertex&gt; (195,876,282 samples, 0.41%)</title><rect x="922.5" y="453" width="4.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="925.52" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="698.5" y="245" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.50" y="255.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (1,536,082,422 samples, 3.25%)</title><rect x="1136.5" y="437" width="38.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1139.50" y="447.5" >ver..</text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="724.0" y="261" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="726.97" y="271.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="706.0" y="309" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="708.96" y="319.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (41,237,112 samples, 0.09%)</title><rect x="72.2" y="357" width="1.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="75.24" y="367.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="788.8" y="421" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="791.78" y="431.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="694.1" y="309" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="697.13" y="319.5" ></text>
</g>
<g >
<title>operator new (61,855,668 samples, 0.13%)</title><rect x="563.7" y="357" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="566.74" y="367.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (10,309,278 samples, 0.02%)</title><rect x="714.2" y="277" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="717.19" y="287.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,804,123,650 samples, 3.81%)</title><rect x="696.2" y="405" width="45.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="699.19" y="415.5" >[lib..</text>
</g>
<g >
<title>void std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (6,226,803,912 samples, 13.16%)</title><rect x="931.8" y="453" width="155.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="934.78" y="463.5" >void std::vector&lt;ve..</text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::operator= (608,247,402 samples, 1.29%)</title><rect x="562.2" y="453" width="15.2" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="565.19" y="463.5" ></text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="181" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1091.41" y="191.5" ></text>
</g>
<g >
<title>vertex* std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (2,237,113,326 samples, 4.73%)</title><rect x="818.6" y="437" width="55.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="821.61" y="447.5" >verte..</text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::vector (1,979,381,376 samples, 4.18%)</title><rect x="577.6" y="421" width="49.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="580.62" y="431.5" >std:..</text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="734.5" y="293" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="737.51" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_base (206,185,560 samples, 0.44%)</title><rect x="629.6" y="325" width="5.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="632.58" y="335.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="914.3" y="325" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="917.29" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="10.0" y="597" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt; &gt; &gt;::allocate (30,927,834 samples, 0.07%)</title><rect x="527.2" y="373" width="0.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="530.21" y="383.5" ></text>
</g>
<g >
<title>operator new (10,309,278 samples, 0.02%)</title><rect x="927.7" y="373" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="930.66" y="383.5" ></text>
</g>
<g >
<title>Eigen::internal::cross_impl&lt;Eigen::Block&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, 3, 1, false&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, 3&gt;::run (61,855,668 samples, 0.13%)</title><rect x="928.7" y="389" width="1.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="931.69" y="399.5" ></text>
</g>
<g >
<title>arena_for_chunk (41,237,112 samples, 0.09%)</title><rect x="688.7" y="229" width="1.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="691.73" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="814.8" y="293" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="817.76" y="303.5" ></text>
</g>
<g >
<title>tcache_get (41,237,112 samples, 0.09%)</title><rect x="737.9" y="309" width="1.0" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="740.86" y="319.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Grad&lt;double&gt; (144,329,892 samples, 0.31%)</title><rect x="808.3" y="325" width="3.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="811.33" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="10.0" y="613" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>[amdxc64.so] (92,783,502 samples, 0.20%)</title><rect x="723.7" y="293" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="726.71" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="927.4" y="421" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="930.41" y="431.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (206,185,560 samples, 0.44%)</title><rect x="629.6" y="373" width="5.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="632.58" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9,567,009,984 samples, 20.23%)</title><rect x="236.3" y="373" width="238.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="239.33" y="383.5" >std::_Hashtable&lt;groundInfo, std..</text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="710.1" y="261" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.08" y="271.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (20,618,556 samples, 0.04%)</title><rect x="737.1" y="293" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="740.08" y="303.5" ></text>
</g>
<g >
<title>double Eigen::DenseBase&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::redux&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="796.0" y="389" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="798.98" y="399.5" ></text>
</g>
<g >
<title>Eigen::internal::scalar_sum_op&lt;double, double&gt;::operator (10,309,278 samples, 0.02%)</title><rect x="796.0" y="357" width="0.2" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="798.98" y="367.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (103,092,780 samples, 0.22%)</title><rect x="735.0" y="325" width="2.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="738.03" y="335.5" ></text>
</g>
<g >
<title>[libdxcore.so] (20,618,556 samples, 0.04%)</title><rect x="731.4" y="325" width="0.5" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="734.43" y="335.5" ></text>
</g>
<g >
<title>heap_for_ptr (10,309,278 samples, 0.02%)</title><rect x="907.1" y="293" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="910.09" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (14,030,927,358 samples, 29.66%)</title><rect x="152.7" y="405" width="350.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="155.74" y="415.5" >std::_Hashtable&lt;groundInfo, std::pair&lt;groundInf..</text>
</g>
<g >
<title>[amdxc64.so] (92,783,502 samples, 0.20%)</title><rect x="708.8" y="341" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="711.79" y="351.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.2" y="357" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="931.18" y="367.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (51,546,390 samples, 0.11%)</title><rect x="794.7" y="373" width="1.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="797.69" y="383.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="565" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="14.29" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::begin (195,876,282 samples, 0.41%)</title><rect x="1174.8" y="469" width="4.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1177.83" y="479.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="724.2" y="245" width="1.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="727.22" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (268,041,228 samples, 0.57%)</title><rect x="907.6" y="325" width="6.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="910.60" y="335.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="928.2" y="197" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="931.18" y="207.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (20,618,556 samples, 0.04%)</title><rect x="694.4" y="309" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="697.39" y="319.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="718.8" y="261" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="721.82" y="271.5" ></text>
</g>
<g >
<title>void std::destroy_at&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (1,711,340,148 samples, 3.62%)</title><rect x="647.3" y="373" width="42.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="650.32" y="383.5" >void..</text>
</g>
<g >
<title>void Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;::assignPacket&lt;0, 16, double __vector (10,309,278 samples, 0.02%)</title><rect x="795.7" y="325" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="798.72" y="335.5" ></text>
</g>
<g >
<title>Eigen::ScalarBinaryOpTraits&lt;double, Eigen::internal::traits&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::Scalar, Eigen::internal::scalar_product_op&lt;double, Eigen::internal::traits&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::Scalar&gt; &gt;::ReturnType Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::dot&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (20,618,556 samples, 0.04%)</title><rect x="793.4" y="453" width="0.5" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="796.41" y="463.5" ></text>
</g>
<g >
<title>getTriangleNormal (103,092,780 samples, 0.22%)</title><rect x="793.9" y="453" width="2.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="796.92" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (30,927,834 samples, 0.07%)</title><rect x="932.3" y="421" width="0.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="935.29" y="431.5" ></text>
</g>
<g >
<title>glfwPollEvents (10,309,278 samples, 0.02%)</title><rect x="788.3" y="485" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="791.27" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, std::pair&lt;double, double&gt;, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt; &gt;::operator[] (2,381,443,218 samples, 5.03%)</title><rect x="502.8" y="437" width="59.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="505.78" y="447.5" >std::u..</text>
</g>
<g >
<title>void Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;::assignPacketByOuterInner&lt;16, 16, double __vector (10,309,278 samples, 0.02%)</title><rect x="928.2" y="229" width="0.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="931.18" y="239.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Fade&lt;double&gt; (10,309,278 samples, 0.02%)</title><rect x="808.1" y="325" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="811.07" y="335.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (1,371,133,974 samples, 2.90%)</title><rect x="839.4" y="293" width="34.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="842.45" y="303.5" >__..</text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (484,536,066 samples, 1.02%)</title><rect x="565.3" y="405" width="12.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="568.28" y="415.5" ></text>
</g>
<g >
<title>vectorWorldspace::Matrix&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (41,237,112 samples, 0.09%)</title><rect x="72.2" y="453" width="1.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="75.24" y="463.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;true, vertex*, vertex*&gt; (2,670,103,002 samples, 5.65%)</title><rect x="1020.5" y="357" width="66.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1023.51" y="367.5" >vertex*..</text>
</g>
<g >
<title>[unknown] (61,855,668 samples, 0.13%)</title><rect x="10.0" y="629" width="1.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="815.8" y="357" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="818.78" y="367.5" ></text>
</g>
<g >
<title>void std::destroy_at&lt;model&gt; (1,577,319,534 samples, 3.33%)</title><rect x="874.9" y="373" width="39.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="877.94" y="383.5" >voi..</text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex const*, vertex*&gt; (1,402,061,808 samples, 2.96%)</title><rect x="839.4" y="341" width="35.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="842.45" y="351.5" >ve..</text>
</g>
<g >
<title>getTriangleNormal (20,618,556 samples, 0.04%)</title><rect x="70.4" y="341" width="0.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="73.44" y="351.5" ></text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="18.2" y="357" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="21.23" y="367.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (134,020,614 samples, 0.28%)</title><rect x="711.4" y="357" width="3.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="714.36" y="367.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (1,536,082,422 samples, 3.25%)</title><rect x="1136.5" y="453" width="38.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1139.50" y="463.5" >ver..</text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::vector (206,185,560 samples, 0.44%)</title><rect x="629.6" y="341" width="5.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="632.58" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="719.1" y="245" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="722.08" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (268,041,228 samples, 0.57%)</title><rect x="907.6" y="341" width="6.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="910.60" y="351.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="719.3" y="229" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="722.34" y="239.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (72,164,946 samples, 0.15%)</title><rect x="718.6" y="341" width="1.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="721.57" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (113,402,058 samples, 0.24%)</title><rect x="708.5" y="357" width="2.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="711.54" y="367.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (30,927,834 samples, 0.07%)</title><rect x="693.6" y="341" width="0.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="696.62" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_innervec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 0, 4&gt;::run (10,309,278 samples, 0.02%)</title><rect x="928.2" y="261" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="931.18" y="271.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="719.9" y="261" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="722.85" y="271.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (10,309,278 samples, 0.02%)</title><rect x="1088.7" y="293" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1091.67" y="303.5" ></text>
</g>
<g >
<title>_int_free (10,309,278 samples, 0.02%)</title><rect x="914.3" y="277" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="917.29" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="717.5" y="245" width="1.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="720.54" y="255.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="698.5" y="309" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.50" y="319.5" ></text>
</g>
<g >
<title>unlink_chunk (154,639,170 samples, 0.33%)</title><rect x="618.8" y="261" width="3.8" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="621.78" y="271.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex, vertex&gt; (3,494,845,242 samples, 7.39%)</title><rect x="933.3" y="325" width="87.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="936.32" y="335.5" >vertex* st..</text>
</g>
<g >
<title>unlink_chunk (10,309,278 samples, 0.02%)</title><rect x="906.8" y="293" width="0.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="909.83" y="303.5" ></text>
</g>
<g >
<title>_int_free (10,309,278 samples, 0.02%)</title><rect x="927.4" y="357" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="930.41" y="367.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="706.0" y="341" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="708.96" y="351.5" ></text>
</g>
<g >
<title>model::~model (10,309,278 samples, 0.02%)</title><rect x="914.3" y="405" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="917.29" y="415.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="786.2" y="421" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="789.21" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (257,731,950 samples, 0.54%)</title><rect x="634.7" y="453" width="6.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="637.72" y="463.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (1,288,659,750 samples, 2.72%)</title><rect x="591.5" y="341" width="32.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="594.51" y="351.5" >st..</text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_linearvec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 0, 2&gt;::run (10,309,278 samples, 0.02%)</title><rect x="795.7" y="341" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="798.72" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (30,927,834 samples, 0.07%)</title><rect x="813.2" y="373" width="0.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="816.21" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::operator= (2,340,206,106 samples, 4.95%)</title><rect x="816.0" y="453" width="58.4" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="819.04" y="463.5" >std::v..</text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="389" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.29" y="399.5" ></text>
</g>
<g >
<title>main (82,474,224 samples, 0.17%)</title><rect x="12.1" y="581" width="2.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="15.06" y="591.5" ></text>
</g>
<g >
<title>waitDeltaT (30,927,834 samples, 0.07%)</title><rect x="13.3" y="549" width="0.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="16.34" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl_data::_Vector_impl_data (10,309,278 samples, 0.02%)</title><rect x="922.0" y="341" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="925.01" y="351.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::sum (10,309,278 samples, 0.02%)</title><rect x="796.0" y="405" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="798.98" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (1,711,340,148 samples, 3.62%)</title><rect x="647.3" y="325" width="42.7" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="650.32" y="335.5" >std:..</text>
</g>
<g >
<title>model::model (2,340,206,106 samples, 4.95%)</title><rect x="816.0" y="469" width="58.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="819.04" y="479.5" >model:..</text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="18.2" y="373" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="21.23" y="383.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::operator/= (298,969,062 samples, 0.63%)</title><rect x="62.5" y="453" width="7.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="65.47" y="463.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;&amp; Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;::operator=&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.2" y="389" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="931.18" y="399.5" ></text>
</g>
<g >
<title>Eigen::internal::dense_assignment_loop&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 2, 2&gt;::run (10,309,278 samples, 0.02%)</title><rect x="928.2" y="277" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="931.18" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="713.2" y="245" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="716.16" y="255.5" ></text>
</g>
<g >
<title>operator new (30,927,834 samples, 0.07%)</title><rect x="932.3" y="373" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="935.29" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1,257,731,916 samples, 2.66%)</title><rect x="591.8" y="293" width="31.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="594.77" y="303.5" >__..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (175,257,726 samples, 0.37%)</title><rect x="518.5" y="357" width="4.3" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="521.47" y="367.5" ></text>
</g>
<g >
<title>heap_for_ptr (41,237,112 samples, 0.09%)</title><rect x="688.7" y="213" width="1.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="691.73" y="223.5" ></text>
</g>
<g >
<title>arena_for_chunk (41,237,112 samples, 0.09%)</title><rect x="688.7" y="245" width="1.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="691.73" y="255.5" ></text>
</g>
<g >
<title>clone3 (47,123,709,738 samples, 99.63%)</title><rect x="14.1" y="629" width="1175.6" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="17.12" y="639.5" >clone3</text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (30,927,834 samples, 0.07%)</title><rect x="932.3" y="405" width="0.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="935.29" y="415.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (835,051,518 samples, 1.77%)</title><rect x="818.6" y="389" width="20.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="821.61" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="922.3" y="341" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="925.26" y="351.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="786.2" y="453" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="789.21" y="463.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="357" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.29" y="367.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (10,309,278 samples, 0.02%)</title><rect x="874.4" y="405" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="877.42" y="415.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;groundInfo const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="528.0" y="373" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="530.99" y="383.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="341" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.29" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (10,309,278 samples, 0.02%)</title><rect x="815.8" y="453" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="818.78" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="698.5" y="277" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.50" y="287.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D_01 (278,350,506 samples, 0.59%)</title><rect x="799.1" y="405" width="6.9" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="802.07" y="415.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;model*, model&gt; (1,587,628,812 samples, 3.36%)</title><rect x="874.7" y="437" width="39.6" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="877.68" y="447.5" >voi..</text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D (195,876,282 samples, 0.41%)</title><rect x="145.8" y="405" width="4.9" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="148.80" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="725.3" y="181" width="0.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="728.25" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="922.3" y="405" width="0.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="925.26" y="415.5" ></text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="793.4" y="373" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="796.41" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="714.5" y="309" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="717.45" y="319.5" ></text>
</g>
<g >
<title>tcache_get_n (10,309,278 samples, 0.02%)</title><rect x="703.9" y="181" width="0.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="706.91" y="191.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="718.8" y="309" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="721.82" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;double&gt;::operator (1,268,041,194 samples, 2.68%)</title><rect x="530.6" y="373" width="31.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="533.56" y="383.5" >st..</text>
</g>
<g >
<title>__GI___libc_free (20,618,556 samples, 0.04%)</title><rect x="738.9" y="341" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="741.88" y="351.5" ></text>
</g>
<g >
<title>__libc_calloc (10,309,278 samples, 0.02%)</title><rect x="1090.0" y="341" width="0.2" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1092.95" y="351.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,030,927,800 samples, 2.18%)</title><rect x="714.7" y="373" width="25.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="717.71" y="383.5" >[..</text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="814.8" y="341" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="817.76" y="351.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (30,927,834 samples, 0.07%)</title><rect x="1088.9" y="325" width="0.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1091.92" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;* std::__relocate_a&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (206,185,560 samples, 0.44%)</title><rect x="629.6" y="421" width="5.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="632.58" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_base (10,309,278 samples, 0.02%)</title><rect x="922.0" y="373" width="0.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="925.01" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (814,432,962 samples, 1.72%)</title><rect x="482.5" y="325" width="20.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="485.46" y="335.5" ></text>
</g>
<g >
<title>vectorLocalspace::toWorldspacePositional (10,309,278 samples, 0.02%)</title><rect x="12.8" y="485" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="15.83" y="495.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="703.1" y="245" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="706.13" y="255.5" ></text>
</g>
<g >
<title>getGroundModel_Sub (18,999,999,354 samples, 40.17%)</title><rect x="103.4" y="469" width="474.0" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="106.36" y="479.5" >getGroundModel_Sub</text>
</g>
<g >
<title>vectorLocalspace::toWorldspacePositional (10,309,278 samples, 0.02%)</title><rect x="12.1" y="501" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="15.06" y="511.5" ></text>
</g>
<g >
<title>smoothstep (463,917,510 samples, 0.98%)</title><rect x="82.0" y="453" width="11.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="85.01" y="463.5" ></text>
</g>
<g >
<title>__GI___nanosleep (20,618,556 samples, 0.04%)</title><rect x="13.6" y="517" width="0.5" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="16.60" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt; &gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="814.8" y="357" width="0.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="817.76" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="933.1" y="373" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="936.06" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="717.5" y="309" width="1.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="720.54" y="319.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="719.1" y="229" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="722.08" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (51,546,390 samples, 0.11%)</title><rect x="563.7" y="341" width="1.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="566.74" y="351.5" ></text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="197" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1091.41" y="207.5" ></text>
</g>
<g >
<title>__libc_calloc (10,309,278 samples, 0.02%)</title><rect x="740.9" y="373" width="0.3" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="743.94" y="383.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D_01 (278,350,506 samples, 0.59%)</title><rect x="806.0" y="405" width="7.0" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="809.01" y="415.5" ></text>
</g>
<g >
<title>Eigen::Quaternion&lt;double, 0&gt;::Quaternion&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.2" y="437" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="931.18" y="447.5" ></text>
</g>
<g >
<title>std::equal_to&lt;groundInfo&gt;::operator (412,371,120 samples, 0.87%)</title><rect x="281.9" y="325" width="10.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="284.85" y="335.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,969,072,098 samples, 4.16%)</title><rect x="1087.4" y="421" width="49.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1090.38" y="431.5" >[lib..</text>
</g>
<g >
<title>void Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.2" y="341" width="0.2" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="931.18" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (103,092,780 samples, 0.22%)</title><rect x="627.0" y="341" width="2.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="630.01" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="10.5" y="517" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.51" y="527.5" ></text>
</g>
<g >
<title>getGroundAltitude (288,659,784 samples, 0.61%)</title><rect x="138.3" y="437" width="7.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="141.34" y="447.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (113,402,058 samples, 0.24%)</title><rect x="1087.4" y="389" width="2.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1090.38" y="399.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="922.3" y="373" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="925.26" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (113,402,058 samples, 0.24%)</title><rect x="506.1" y="389" width="2.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="509.12" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::allocate (103,092,780 samples, 0.22%)</title><rect x="627.0" y="421" width="2.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="630.01" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (10,309,278 samples, 0.02%)</title><rect x="922.3" y="421" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="925.26" y="431.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,309,278 samples, 0.02%)</title><rect x="874.4" y="453" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="877.42" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="710.6" y="181" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.59" y="191.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="691.3" y="453" width="0.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="694.30" y="463.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (20,618,556 samples, 0.04%)</title><rect x="785.2" y="421" width="0.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="788.18" y="431.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (10,309,278 samples, 0.02%)</title><rect x="928.2" y="309" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="931.18" y="319.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (61,855,668 samples, 0.13%)</title><rect x="563.7" y="389" width="1.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="566.74" y="399.5" ></text>
</g>
<g >
<title>double __vector (30,927,834 samples, 0.07%)</title><rect x="72.5" y="261" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="75.50" y="271.5" ></text>
</g>
<g >
<title>Eigen::internal::scalar_sum_op&lt;double, double&gt;::operator (20,618,556 samples, 0.04%)</title><rect x="69.9" y="373" width="0.5" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="72.93" y="383.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="694.1" y="325" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="697.13" y="335.5" ></text>
</g>
<g >
<title>getTriangleNormal (10,309,278 samples, 0.02%)</title><rect x="796.2" y="405" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="799.24" y="415.5" ></text>
</g>
<g >
<title>vectorLocalspace::toWorldspace (92,783,502 samples, 0.20%)</title><rect x="927.9" y="469" width="2.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="930.92" y="479.5" ></text>
</g>
<g >
<title>__GI___ioctl (41,237,112 samples, 0.09%)</title><rect x="721.1" y="309" width="1.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="724.14" y="319.5" ></text>
</g>
<g >
<title>glfwGetTime (10,309,278 samples, 0.02%)</title><rect x="788.0" y="485" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="791.01" y="495.5" ></text>
</g>
<g >
<title>double const&amp; std::clamp&lt;double&gt; (412,371,120 samples, 0.87%)</title><rect x="83.3" y="437" width="10.3" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="86.30" y="447.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;::assignCoeff (206,185,560 samples, 0.44%)</title><rect x="62.5" y="341" width="5.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="65.47" y="351.5" ></text>
</g>
<g >
<title>dl_open_worker_begin (10,309,278 samples, 0.02%)</title><rect x="11.3" y="101" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="14.29" y="111.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;model*&gt; (1,587,628,812 samples, 3.36%)</title><rect x="874.7" y="405" width="39.6" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="877.68" y="415.5" >voi..</text>
</g>
<g >
<title>___pthread_mutex_unlock (10,309,278 samples, 0.02%)</title><rect x="704.2" y="245" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="707.16" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl::_Vector_impl (20,618,556 samples, 0.04%)</title><rect x="623.7" y="389" width="0.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="626.66" y="399.5" ></text>
</g>
<g >
<title>__GI_getpid (10,309,278 samples, 0.02%)</title><rect x="786.7" y="405" width="0.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="789.72" y="415.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (30,927,834 samples, 0.07%)</title><rect x="695.2" y="325" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="698.16" y="335.5" ></text>
</g>
<g >
<title>_int_free (10,309,278 samples, 0.02%)</title><rect x="739.1" y="325" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="742.14" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (10,309,278 samples, 0.02%)</title><rect x="815.8" y="421" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="818.78" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (1,288,659,750 samples, 2.72%)</title><rect x="591.5" y="357" width="32.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="594.51" y="367.5" >st..</text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="704.4" y="341" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="707.42" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::sqrt_retval&lt;Eigen::internal::global_math_functions_filtering_base&lt;double, void&gt;::type&gt;::type Eigen::numext::sqrt&lt;double&gt; (10,309,278 samples, 0.02%)</title><rect x="796.2" y="421" width="0.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="799.24" y="431.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (10,309,278 samples, 0.02%)</title><rect x="695.7" y="309" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="698.68" y="319.5" ></text>
</g>
<g >
<title>Eigen::internal::sqrt_retval&lt;Eigen::internal::global_math_functions_filtering_base&lt;double, void&gt;::type&gt;::type Eigen::numext::sqrt&lt;double&gt; (30,927,834 samples, 0.07%)</title><rect x="71.0" y="437" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="73.95" y="447.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="928.2" y="165" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="931.18" y="175.5" ></text>
</g>
<g >
<title>vertex* std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (546,391,734 samples, 1.16%)</title><rect x="563.7" y="437" width="13.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="566.74" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (3,350,515,350 samples, 7.08%)</title><rect x="152.7" y="389" width="83.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="155.74" y="399.5" >std::_Has..</text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (1,402,061,808 samples, 2.96%)</title><rect x="839.4" y="357" width="35.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="842.45" y="367.5" >ve..</text>
</g>
<g >
<title>__GI___clock_gettime (30,927,834 samples, 0.07%)</title><rect x="736.8" y="309" width="0.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="739.83" y="319.5" ></text>
</g>
<g >
<title>XShmPutImage (20,618,556 samples, 0.04%)</title><rect x="693.1" y="389" width="0.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="696.10" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (113,402,058 samples, 0.24%)</title><rect x="701.6" y="341" width="2.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="704.59" y="351.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;&amp; Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::_set_noalias&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.4" y="373" width="0.3" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="931.44" y="383.5" ></text>
</g>
<g >
<title>decltype  (1,979,381,376 samples, 4.18%)</title><rect x="577.6" y="437" width="49.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="580.62" y="447.5" >decl..</text>
</g>
<g >
<title>XGetInputFocus (41,237,112 samples, 0.09%)</title><rect x="788.5" y="453" width="1.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="791.52" y="463.5" ></text>
</g>
<g >
<title>___pthread_cond_wait (10,309,278 samples, 0.02%)</title><rect x="694.9" y="357" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="697.90" y="367.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="786.2" y="405" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="789.21" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="713.2" y="229" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="716.16" y="239.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (113,402,058 samples, 0.24%)</title><rect x="693.1" y="405" width="2.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="696.10" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="712.7" y="293" width="0.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="715.65" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;* std::__relocate_a_1&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt; (206,185,560 samples, 0.44%)</title><rect x="629.6" y="405" width="5.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="632.58" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="717.5" y="325" width="1.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="720.54" y="335.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;model&gt; (1,577,319,534 samples, 3.33%)</title><rect x="874.9" y="389" width="39.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="877.94" y="399.5" >voi..</text>
</g>
<g >
<title>XGetGeometry (20,618,556 samples, 0.04%)</title><rect x="784.4" y="373" width="0.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="787.41" y="383.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;::allocate (103,092,780 samples, 0.22%)</title><rect x="627.0" y="389" width="2.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="630.01" y="399.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise2D (278,350,506 samples, 0.59%)</title><rect x="138.6" y="373" width="6.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="141.60" y="383.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;&amp; Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; &gt;::_set&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.2" y="373" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="931.18" y="383.5" ></text>
</g>
<g >
<title>model::model (10,309,278 samples, 0.02%)</title><rect x="922.0" y="405" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="925.01" y="415.5" ></text>
</g>
<g >
<title>tcache_get_n (10,309,278 samples, 0.02%)</title><rect x="695.4" y="261" width="0.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="698.42" y="271.5" ></text>
</g>
<g >
<title>dlopen_implementation (10,309,278 samples, 0.02%)</title><rect x="11.3" y="245" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="14.29" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl::_Vector_impl (10,309,278 samples, 0.02%)</title><rect x="922.0" y="357" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="925.01" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (10,309,278 samples, 0.02%)</title><rect x="814.2" y="373" width="0.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="817.24" y="383.5" ></text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="277" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1091.41" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (1,711,340,148 samples, 3.62%)</title><rect x="647.3" y="357" width="42.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="650.32" y="367.5" >std:..</text>
</g>
<g >
<title>_int_free_maybe_consolidate (10,309,278 samples, 0.02%)</title><rect x="933.1" y="341" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="936.06" y="351.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (1,577,319,534 samples, 3.33%)</title><rect x="650.7" y="277" width="39.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="653.67" y="287.5" >std..</text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.2" y="325" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="931.18" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,309,278 samples, 0.02%)</title><rect x="814.0" y="373" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="816.98" y="383.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="815.8" y="389" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="818.78" y="399.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Grad&lt;double&gt; (103,092,780 samples, 0.22%)</title><rect x="147.1" y="341" width="2.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="150.08" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (10,309,278 samples, 0.02%)</title><rect x="736.6" y="277" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="739.57" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="713.9" y="309" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="716.94" y="319.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (206,185,560 samples, 0.44%)</title><rect x="726.0" y="325" width="5.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="729.02" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::size (72,164,946 samples, 0.15%)</title><rect x="816.8" y="437" width="1.8" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="819.81" y="447.5" ></text>
</g>
<g >
<title>_int_free_create_chunk (474,226,788 samples, 1.00%)</title><rect x="675.9" y="213" width="11.8" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="678.87" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (20,618,556 samples, 0.04%)</title><rect x="932.6" y="341" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="935.55" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::dot_nocheck&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, false&gt;::run (61,855,668 samples, 0.13%)</title><rect x="17.2" y="453" width="1.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="20.20" y="463.5" ></text>
</g>
<g >
<title>waitDeltaT (30,927,834 samples, 0.07%)</title><rect x="13.3" y="565" width="0.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="16.34" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;double&gt;::operator (979,381,410 samples, 2.07%)</title><rect x="478.3" y="357" width="24.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="481.35" y="367.5" >s..</text>
</g>
<g >
<title>[amdxc64.so] (113,402,058 samples, 0.24%)</title><rect x="728.3" y="245" width="2.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="731.34" y="255.5" ></text>
</g>
<g >
<title>auto siv::perlin_detail::Octave2D&lt;siv::BasicPerlinNoise&lt;double&gt;, double&gt; (288,659,784 samples, 0.61%)</title><rect x="138.3" y="389" width="7.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="141.34" y="399.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (30,927,834 samples, 0.07%)</title><rect x="932.3" y="389" width="0.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="935.29" y="399.5" ></text>
</g>
<g >
<title>groundInfo::operator== (412,371,120 samples, 0.87%)</title><rect x="281.9" y="309" width="10.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="284.85" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (123,711,336 samples, 0.26%)</title><rect x="505.9" y="405" width="3.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="508.87" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="698.5" y="325" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.50" y="335.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="453" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.29" y="463.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (10,309,278 samples, 0.02%)</title><rect x="706.5" y="341" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="709.48" y="351.5" ></text>
</g>
<g >
<title>tcache_get_n (10,309,278 samples, 0.02%)</title><rect x="927.7" y="325" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="930.66" y="335.5" ></text>
</g>
<g >
<title>Eigen::internal::cross_impl&lt;Eigen::Block&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, 3, 1, false&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, 3&gt;::return_type Eigen::MatrixBase&lt;Eigen::Block&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, 3, 1, false&gt; &gt;::cross&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="12.8" y="421" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="15.83" y="431.5" ></text>
</g>
<g >
<title>Eigen::internal::conj_helper&lt;double __vector (20,618,556 samples, 0.04%)</title><rect x="793.4" y="325" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="796.41" y="335.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="1089.2" y="309" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1092.18" y="319.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (103,092,780 samples, 0.22%)</title><rect x="1087.6" y="373" width="2.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1090.64" y="383.5" ></text>
</g>
<g >
<title>getGroundColor (278,350,506 samples, 0.59%)</title><rect x="806.0" y="421" width="7.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="809.01" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (20,618,556 samples, 0.04%)</title><rect x="526.7" y="373" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="529.70" y="383.5" ></text>
</g>
<g >
<title>Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::norm (20,618,556 samples, 0.04%)</title><rect x="796.0" y="437" width="0.5" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="798.98" y="447.5" ></text>
</g>
<g >
<title>__vfscanf_internal (10,309,278 samples, 0.02%)</title><rect x="787.2" y="453" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="790.24" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::_S_relocate (206,185,560 samples, 0.44%)</title><rect x="629.6" y="437" width="5.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="632.58" y="447.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="733.7" y="245" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="736.74" y="255.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex const, vertex&gt; (484,536,066 samples, 1.02%)</title><rect x="565.3" y="309" width="12.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="568.28" y="319.5" ></text>
</g>
<g >
<title>applySunlightToModel (268,041,228 samples, 0.57%)</title><rect x="792.4" y="469" width="6.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="795.38" y="479.5" ></text>
</g>
<g >
<title>three_point_interpolate (175,257,726 samples, 0.37%)</title><rect x="93.6" y="453" width="4.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="96.59" y="463.5" ></text>
</g>
<g >
<title>recalculateGround (27,030,926,916 samples, 57.15%)</title><rect x="15.7" y="501" width="674.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="18.66" y="511.5" >recalculateGround</text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D_01 (195,876,282 samples, 0.41%)</title><rect x="145.8" y="421" width="4.9" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="148.80" y="431.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (103,092,780 samples, 0.22%)</title><rect x="783.4" y="437" width="2.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="786.38" y="447.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="437" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.29" y="447.5" ></text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="18.2" y="325" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="21.23" y="335.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="736.3" y="309" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="739.31" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (10,309,278 samples, 0.02%)</title><rect x="914.3" y="389" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="917.29" y="399.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (10,309,278 samples, 0.02%)</title><rect x="740.4" y="357" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="743.43" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,309,278 samples, 0.02%)</title><rect x="813.0" y="341" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="815.96" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="698.5" y="293" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.50" y="303.5" ></text>
</g>
<g >
<title>Eigen::internal::unpacket_traits&lt;double __vector (20,618,556 samples, 0.04%)</title><rect x="70.4" y="357" width="0.6" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="73.44" y="367.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="787.0" y="389" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="789.98" y="399.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="734.8" y="261" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="737.77" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (30,927,834 samples, 0.07%)</title><rect x="813.2" y="325" width="0.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="816.21" y="335.5" ></text>
</g>
<g >
<title>__GI__dl_catch_exception (10,309,278 samples, 0.02%)</title><rect x="11.3" y="117" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="14.29" y="127.5" ></text>
</g>
<g >
<title>_int_free (10,309,278 samples, 0.02%)</title><rect x="815.8" y="341" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="818.78" y="351.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (113,402,058 samples, 0.24%)</title><rect x="624.2" y="341" width="2.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="627.18" y="351.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="165" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="175.5" ></text>
</g>
<g >
<title>setVertexColorsByBrightness (989,690,688 samples, 2.09%)</title><rect x="73.3" y="469" width="24.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="76.27" y="479.5" >s..</text>
</g>
<g >
<title>double Eigen::internal::redux_impl&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::internal::redux_evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, 3, 2&gt;::run&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (20,618,556 samples, 0.04%)</title><rect x="793.4" y="389" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="796.41" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (61,855,668 samples, 0.13%)</title><rect x="717.0" y="341" width="1.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="720.02" y="351.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;::Matrix&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.4" y="405" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="931.44" y="415.5" ></text>
</g>
<g >
<title>groundInfoHash::operator (1,113,402,024 samples, 2.35%)</title><rect x="475.0" y="373" width="27.8" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="478.00" y="383.5" >g..</text>
</g>
<g >
<title>Eigen::internal::dense_assignment_loop&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 3, 2&gt;::run (298,969,062 samples, 0.63%)</title><rect x="62.5" y="373" width="7.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="65.47" y="383.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (113,402,058 samples, 0.24%)</title><rect x="624.2" y="277" width="2.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="627.18" y="287.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (30,927,834 samples, 0.07%)</title><rect x="703.4" y="245" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="706.39" y="255.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (3,494,845,242 samples, 7.39%)</title><rect x="933.3" y="373" width="87.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="936.32" y="383.5" >vertex* st..</text>
</g>
<g >
<title>elf_dynamic_do_Rela (10,309,278 samples, 0.02%)</title><rect x="11.3" y="53" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="14.29" y="63.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="714.2" y="309" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="717.19" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (47,103,091,182 samples, 99.59%)</title><rect x="14.4" y="533" width="1175.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="17.37" y="543.5" >std::__invoke_result&lt;void </text>
</g>
<g >
<title>tcache_put (20,618,556 samples, 0.04%)</title><rect x="640.6" y="341" width="0.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="643.64" y="351.5" ></text>
</g>
<g >
<title>auto siv::perlin_detail::Octave2D&lt;siv::BasicPerlinNoise&lt;double&gt;, double&gt; (278,350,506 samples, 0.59%)</title><rect x="806.0" y="373" width="7.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="809.01" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="927.7" y="357" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="930.66" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (144,329,892 samples, 0.31%)</title><rect x="727.6" y="261" width="3.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="730.57" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (61,855,668 samples, 0.13%)</title><rect x="563.7" y="405" width="1.6" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="566.74" y="415.5" ></text>
</g>
<g >
<title>unsigned long std::_Hash_impl::hash&lt;double&gt; (1,134,020,580 samples, 2.40%)</title><rect x="533.9" y="357" width="28.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="536.90" y="367.5" >u..</text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="795.7" y="293" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="798.72" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (3,350,515,350 samples, 7.08%)</title><rect x="152.7" y="357" width="83.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="155.74" y="367.5" >std::__de..</text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="787.0" y="437" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="789.98" y="447.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (10,309,278 samples, 0.02%)</title><rect x="789.0" y="373" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="792.04" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (10,309,278 samples, 0.02%)</title><rect x="814.0" y="341" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="816.98" y="351.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (113,402,058 samples, 0.24%)</title><rect x="624.2" y="357" width="2.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="627.18" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (257,731,950 samples, 0.54%)</title><rect x="634.7" y="437" width="6.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="637.72" y="447.5" ></text>
</g>
<g >
<title>__recvmsg_syscall (10,309,278 samples, 0.02%)</title><rect x="789.0" y="341" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="792.04" y="351.5" ></text>
</g>
<g >
<title>_XVIDtoVisual (10,309,278 samples, 0.02%)</title><rect x="787.8" y="389" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="790.75" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="698.8" y="181" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.76" y="191.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (1,402,061,808 samples, 2.96%)</title><rect x="839.4" y="373" width="35.0" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="842.45" y="383.5" >ve..</text>
</g>
<g >
<title>Eigen::ScalarBinaryOpTraits&lt;double, Eigen::internal::traits&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::Scalar, Eigen::internal::scalar_product_op&lt;double, Eigen::internal::traits&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::Scalar&gt; &gt;::ReturnType Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::dot&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (61,855,668 samples, 0.13%)</title><rect x="17.2" y="469" width="1.5" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="20.20" y="479.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; const&amp;&gt; (1,979,381,376 samples, 4.18%)</title><rect x="577.6" y="453" width="49.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="580.62" y="463.5" >void..</text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="18.2" y="389" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="21.23" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::vector (20,618,556 samples, 0.04%)</title><rect x="815.3" y="405" width="0.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="818.27" y="415.5" ></text>
</g>
<g >
<title>Eigen::internal::cross_impl&lt;Eigen::Block&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, 3, 1, false&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, 3&gt;::return_type Eigen::MatrixBase&lt;Eigen::Block&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, 3, 1, false&gt; &gt;::cross&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (61,855,668 samples, 0.13%)</title><rect x="928.7" y="405" width="1.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="931.69" y="415.5" ></text>
</g>
<g >
<title>operator delete (10,309,278 samples, 0.02%)</title><rect x="907.3" y="341" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="910.35" y="351.5" ></text>
</g>
<g >
<title>groundInfoHash::operator (1,360,824,696 samples, 2.88%)</title><rect x="528.2" y="389" width="34.0" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="531.24" y="399.5" >gr..</text>
</g>
<g >
<title>std::hash&lt;double&gt;::operator (10,309,278 samples, 0.02%)</title><rect x="815.0" y="357" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="818.01" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (3,350,515,350 samples, 7.08%)</title><rect x="152.7" y="373" width="83.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="155.74" y="383.5" >std::__de..</text>
</g>
<g >
<title>double siv::perlin_detail::Lerp&lt;double&gt; (41,237,112 samples, 0.09%)</title><rect x="149.7" y="341" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="152.66" y="351.5" ></text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="793.4" y="357" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="796.41" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="10.5" y="533" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.51" y="543.5" ></text>
</g>
<g >
<title>double Eigen::internal::redux_impl&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::internal::redux_evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, 3, 2&gt;::run&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (61,855,668 samples, 0.13%)</title><rect x="17.2" y="405" width="1.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="20.20" y="415.5" ></text>
</g>
<g >
<title>all (47,298,967,464 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="914.3" y="293" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="917.29" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (10,309,278 samples, 0.02%)</title><rect x="815.0" y="389" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="818.01" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (103,092,780 samples, 0.22%)</title><rect x="627.0" y="357" width="2.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="630.01" y="367.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (2,649,484,446 samples, 5.60%)</title><rect x="1021.0" y="293" width="66.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1024.02" y="303.5" >__memcp..</text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="928.4" y="261" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="931.44" y="271.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="702.6" y="293" width="1.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="705.62" y="303.5" ></text>
</g>
<g >
<title>operator new (103,092,780 samples, 0.22%)</title><rect x="627.0" y="373" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="630.01" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="718.8" y="325" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="721.82" y="335.5" ></text>
</g>
<g >
<title>void std::vector&lt;visualModel, std::allocator&lt;visualModel&gt; &gt;::_M_realloc_insert&lt;visualModel const&amp;&gt; (10,309,278 samples, 0.02%)</title><rect x="927.7" y="453" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="930.66" y="463.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="1088.4" y="325" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="335.5" ></text>
</g>
<g >
<title>tcache_get (10,309,278 samples, 0.02%)</title><rect x="927.7" y="341" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="930.66" y="351.5" ></text>
</g>
<g >
<title>unlink_chunk (20,618,556 samples, 0.04%)</title><rect x="527.5" y="277" width="0.5" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="530.47" y="287.5" ></text>
</g>
<g >
<title>double Eigen::DenseBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::redux&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt; &gt; (20,618,556 samples, 0.04%)</title><rect x="793.4" y="405" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="796.41" y="415.5" ></text>
</g>
<g >
<title>getTriangleNormal (30,927,834 samples, 0.07%)</title><rect x="72.5" y="245" width="0.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="75.50" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (742,268,016 samples, 1.57%)</title><rect x="820.9" y="325" width="18.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="823.93" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (154,639,170 samples, 0.33%)</title><rect x="522.8" y="357" width="3.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="525.84" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (10,309,278 samples, 0.02%)</title><rect x="874.4" y="437" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="877.42" y="447.5" ></text>
</g>
<g >
<title>[libGLX.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="786.7" y="437" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="789.72" y="447.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex const*, vertex*&gt; (195,876,282 samples, 0.41%)</title><rect x="922.5" y="357" width="4.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="925.52" y="367.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (1,288,659,750 samples, 2.72%)</title><rect x="591.5" y="325" width="32.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="594.51" y="335.5" >st..</text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="922.3" y="389" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="925.26" y="399.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (30,927,834 samples, 0.07%)</title><rect x="784.1" y="389" width="0.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="787.15" y="399.5" ></text>
</g>
<g >
<title>tcache_thread_shutdown (10,309,278 samples, 0.02%)</title><rect x="1189.5" y="581" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1192.49" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;visualModel&gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="927.7" y="421" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="930.66" y="431.5" ></text>
</g>
<g >
<title>[libglapi.so.0.0.0] (41,237,112 samples, 0.09%)</title><rect x="14.6" y="501" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="17.63" y="511.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; const&amp;&gt; (309,278,340 samples, 0.65%)</title><rect x="627.0" y="453" width="7.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="630.01" y="463.5" ></text>
</g>
<g >
<title>double Eigen::internal::redux_impl&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::internal::redux_evaluator&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, 3, 2&gt;::run&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="796.0" y="373" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="798.98" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="733.7" y="229" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="736.74" y="239.5" ></text>
</g>
<g >
<title>operator new (30,927,834 samples, 0.07%)</title><rect x="527.2" y="325" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="530.21" y="335.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (41,237,112 samples, 0.09%)</title><rect x="1088.9" y="341" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1091.92" y="351.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;true, vertex*, vertex*&gt; (2,670,103,002 samples, 5.65%)</title><rect x="1020.5" y="325" width="66.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1023.51" y="335.5" >vertex*..</text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;&amp; Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::_set_noalias&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (41,237,112 samples, 0.09%)</title><rect x="72.2" y="405" width="1.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="75.24" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (1,577,319,534 samples, 3.33%)</title><rect x="650.7" y="309" width="39.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="653.67" y="319.5" >std..</text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;groundInfo const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="814.8" y="389" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="817.76" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="703.1" y="277" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="706.13" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="734.3" y="133" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="737.25" y="143.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_LinearTraversal_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 2, 3&gt;::run (206,185,560 samples, 0.44%)</title><rect x="62.5" y="357" width="5.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="65.47" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="698.5" y="341" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.50" y="351.5" ></text>
</g>
<g >
<title>glfwGetFramebufferSize (20,618,556 samples, 0.04%)</title><rect x="787.5" y="485" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="790.49" y="495.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (3,494,845,242 samples, 7.39%)</title><rect x="692.8" y="421" width="87.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="695.85" y="431.5" >[libgalliu..</text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="729.1" y="213" width="2.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="732.11" y="223.5" ></text>
</g>
<g >
<title>[amdxc64.so] (92,783,502 samples, 0.20%)</title><rect x="723.7" y="325" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="726.71" y="335.5" ></text>
</g>
<g >
<title>vectorWorldspace::vectorWorldspace (10,309,278 samples, 0.02%)</title><rect x="13.1" y="533" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="16.09" y="543.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (195,876,282 samples, 0.41%)</title><rect x="922.5" y="421" width="4.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="925.52" y="431.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="706.0" y="325" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="708.96" y="335.5" ></text>
</g>
<g >
<title>double Eigen::DenseBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::redux&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt; &gt; (61,855,668 samples, 0.13%)</title><rect x="17.2" y="421" width="1.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="20.20" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (14,103,092,304 samples, 29.82%)</title><rect x="150.9" y="421" width="351.9" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="153.94" y="431.5" >std::_Hashtable&lt;groundInfo, std::pair&lt;groundInf..</text>
</g>
<g >
<title>__libc_recvmsg (10,309,278 samples, 0.02%)</title><rect x="789.0" y="357" width="0.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="792.04" y="367.5" ></text>
</g>
<g >
<title>_int_free_create_chunk (319,587,618 samples, 0.68%)</title><rect x="898.9" y="293" width="7.9" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="901.86" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_free (1,298,969,028 samples, 2.75%)</title><rect x="874.9" y="341" width="32.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="877.94" y="351.5" >__..</text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex const*, vertex*&gt; (1,402,061,808 samples, 2.96%)</title><rect x="839.4" y="325" width="35.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="842.45" y="335.5" >ve..</text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;true, vertex*, vertex*&gt; (2,670,103,002 samples, 5.65%)</title><rect x="1020.5" y="341" width="66.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1023.51" y="351.5" >vertex*..</text>
</g>
<g >
<title>double __vector (92,783,502 samples, 0.20%)</title><rect x="67.6" y="309" width="2.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="70.61" y="319.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (10,309,278 samples, 0.02%)</title><rect x="11.8" y="613" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="14.80" y="623.5" ></text>
</g>
<g >
<title>D3DKMTSubmitCommand (10,309,278 samples, 0.02%)</title><rect x="703.6" y="229" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="706.65" y="239.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="787.0" y="421" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="789.98" y="431.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="373" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.29" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (1,711,340,148 samples, 3.62%)</title><rect x="647.3" y="341" width="42.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="650.32" y="351.5" >std:..</text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (20,618,556 samples, 0.04%)</title><rect x="526.7" y="405" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="529.70" y="415.5" ></text>
</g>
<g >
<title>xcb_wait_for_reply64 (30,927,834 samples, 0.07%)</title><rect x="695.2" y="357" width="0.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="698.16" y="367.5" ></text>
</g>
<g >
<title>applySunlightToModel (20,618,556 samples, 0.04%)</title><rect x="793.4" y="293" width="0.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="796.41" y="303.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (835,051,518 samples, 1.77%)</title><rect x="667.9" y="229" width="20.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="670.90" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt; &gt;::allocate (30,927,834 samples, 0.07%)</title><rect x="527.2" y="341" width="0.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="530.21" y="351.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (41,237,112 samples, 0.09%)</title><rect x="72.2" y="389" width="1.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="75.24" y="399.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_linearvec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 0, 2&gt;::run (92,783,502 samples, 0.20%)</title><rect x="67.6" y="357" width="2.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="70.61" y="367.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;::Matrix&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (41,237,112 samples, 0.09%)</title><rect x="72.2" y="437" width="1.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="75.24" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10,309,278 samples, 0.02%)</title><rect x="813.0" y="357" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="815.96" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="733.7" y="197" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="736.74" y="207.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (20,618,556 samples, 0.04%)</title><rect x="789.0" y="405" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="792.04" y="415.5" ></text>
</g>
<g >
<title>__GI___pthread_disable_asynccancel (10,309,278 samples, 0.02%)</title><rect x="13.9" y="485" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="16.86" y="495.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (3,587,628,744 samples, 7.59%)</title><rect x="690.8" y="469" width="89.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="693.79" y="479.5" >[libGLX_me..</text>
</g>
<g >
<title>futex_wait (61,855,668 samples, 0.13%)</title><rect x="666.4" y="213" width="1.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="669.36" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_create_storage (20,618,556 samples, 0.04%)</title><rect x="815.3" y="373" width="0.5" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="818.27" y="383.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="101" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="111.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (3,525,773,076 samples, 7.45%)</title><rect x="692.1" y="437" width="87.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="695.07" y="447.5" >[libgalliu..</text>
</g>
<g >
<title>_XSend (20,618,556 samples, 0.04%)</title><rect x="694.4" y="357" width="0.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="697.39" y="367.5" ></text>
</g>
<g >
<title>double __vector (30,927,834 samples, 0.07%)</title><rect x="72.5" y="277" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="75.50" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="717.5" y="229" width="1.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="720.54" y="239.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (175,257,726 samples, 0.37%)</title><rect x="909.9" y="277" width="4.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="912.92" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="712.4" y="309" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="715.39" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (175,257,726 samples, 0.37%)</title><rect x="909.9" y="293" width="4.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="912.92" y="303.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex const*, vertex*&gt; (195,876,282 samples, 0.41%)</title><rect x="922.5" y="373" width="4.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="925.52" y="383.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (391,752,564 samples, 0.83%)</title><rect x="697.0" y="389" width="9.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="699.96" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="713.9" y="325" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="716.94" y="335.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (10,309,278 samples, 0.02%)</title><rect x="1089.4" y="261" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1092.44" y="271.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (41,237,112 samples, 0.09%)</title><rect x="72.2" y="373" width="1.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="75.24" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (10,309,278 samples, 0.02%)</title><rect x="914.3" y="357" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="917.29" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (92,783,502 samples, 0.20%)</title><rect x="702.1" y="309" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="705.11" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (835,051,518 samples, 1.77%)</title><rect x="818.6" y="421" width="20.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="821.61" y="431.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="933.1" y="405" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="936.06" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (20,618,556 samples, 0.04%)</title><rect x="815.3" y="341" width="0.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="818.27" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::binary_evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double&gt;::coeff (10,309,278 samples, 0.02%)</title><rect x="72.2" y="293" width="0.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="75.24" y="303.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise2D (247,422,672 samples, 0.52%)</title><rect x="799.8" y="357" width="6.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="802.84" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="710.1" y="245" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.08" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::_M_erase (10,309,278 samples, 0.02%)</title><rect x="914.3" y="453" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="917.29" y="463.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (10,309,278 samples, 0.02%)</title><rect x="694.9" y="341" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="697.90" y="351.5" ></text>
</g>
<g >
<title>Eigen::QuaternionBase&lt;Eigen::Quaternion&lt;double, 0&gt; &gt;::_transformVector (72,164,946 samples, 0.15%)</title><rect x="928.4" y="421" width="1.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="931.44" y="431.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (1,958,762,820 samples, 4.14%)</title><rect x="641.2" y="437" width="48.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="644.15" y="447.5" >void..</text>
</g>
<g >
<title>[libGLX.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="786.7" y="421" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="789.72" y="431.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (61,855,668 samples, 0.13%)</title><rect x="563.7" y="373" width="1.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="566.74" y="383.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (51,546,390 samples, 0.11%)</title><rect x="783.9" y="405" width="1.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="786.89" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (10,309,278 samples, 0.02%)</title><rect x="927.4" y="453" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="930.41" y="463.5" ></text>
</g>
<g >
<title>aerodynamicSurface::update_staticSurface (20,618,556 samples, 0.04%)</title><rect x="12.1" y="533" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="15.06" y="543.5" ></text>
</g>
<g >
<title>[libglfw.so.3.3] (20,618,556 samples, 0.04%)</title><rect x="786.7" y="469" width="0.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="789.72" y="479.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;model&gt; &gt;::construct&lt;model, model&gt; (10,309,278 samples, 0.02%)</title><rect x="922.0" y="437" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="925.01" y="447.5" ></text>
</g>
<g >
<title>Eigen::internal::rotation_base_generic_product_selector&lt;Eigen::Quaternion&lt;double, 0&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;::IsVectorAtCompileTime&gt;::ReturnType Eigen::RotationBase&lt;Eigen::Quaternion&lt;double, 0&gt;, 3&gt;::operator*&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="12.8" y="469" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="15.83" y="479.5" ></text>
</g>
<g >
<title>Eigen::internal::scalar_sum_op&lt;double, double&gt;::operator (41,237,112 samples, 0.09%)</title><rect x="17.2" y="389" width="1.0" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="20.20" y="399.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; (1,711,340,148 samples, 3.62%)</title><rect x="647.3" y="389" width="42.7" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="650.32" y="399.5" >void..</text>
</g>
<g >
<title>void Eigen::internal::div_assign_op&lt;double, double&gt;::assignPacket&lt;0, double __vector (10,309,278 samples, 0.02%)</title><rect x="795.7" y="309" width="0.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="798.72" y="319.5" ></text>
</g>
<g >
<title>tcache_get_n (10,309,278 samples, 0.02%)</title><rect x="622.9" y="261" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="625.89" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (10,309,278 samples, 0.02%)</title><rect x="922.3" y="325" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="925.26" y="335.5" ></text>
</g>
<g >
<title>double const&amp; std::max&lt;double&gt; (391,752,564 samples, 0.83%)</title><rect x="83.3" y="421" width="9.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="86.30" y="431.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="710.1" y="293" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.08" y="303.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (10,309,278 samples, 0.02%)</title><rect x="927.4" y="341" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="930.41" y="351.5" ></text>
</g>
<g >
<title>[libd3d12.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="293" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1091.41" y="303.5" ></text>
</g>
<g >
<title>stepPhysicsObjects (51,546,390 samples, 0.11%)</title><rect x="12.1" y="565" width="1.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="15.06" y="575.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,979,381,376 samples, 4.18%)</title><rect x="1087.1" y="453" width="49.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1090.12" y="463.5" >[lib..</text>
</g>
<g >
<title>__memset_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="699.3" y="357" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="702.28" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10,309,278 samples, 0.02%)</title><rect x="813.0" y="373" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="815.96" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="729.9" y="181" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="732.88" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;::pair&lt;groundInfo const&amp;, 0ul&gt; (10,309,278 samples, 0.02%)</title><rect x="528.0" y="325" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="530.99" y="335.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;::assignCoeff (41,237,112 samples, 0.09%)</title><rect x="794.7" y="325" width="1.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="797.69" y="335.5" ></text>
</g>
<g >
<title>scratch_buffer_init (10,309,278 samples, 0.02%)</title><rect x="787.2" y="437" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="790.24" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (113,402,058 samples, 0.24%)</title><rect x="506.1" y="373" width="2.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="509.12" y="383.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="1088.4" y="341" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;::__normal_iterator (195,876,282 samples, 0.41%)</title><rect x="1174.8" y="453" width="4.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1177.83" y="463.5" ></text>
</g>
<g >
<title>vectorLocalspace::vectorLocalspace (10,309,278 samples, 0.02%)</title><rect x="12.3" y="517" width="0.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="15.31" y="527.5" ></text>
</g>
<g >
<title>Eigen::internal::conj_helper&lt;double __vector (20,618,556 samples, 0.04%)</title><rect x="18.2" y="341" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="21.23" y="351.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (20,618,556 samples, 0.04%)</title><rect x="787.5" y="421" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="790.49" y="431.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="733.7" y="261" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="736.74" y="271.5" ></text>
</g>
<g >
<title>getGroundAltitudeAndColorAveraged (649,484,514 samples, 1.37%)</title><rect x="799.1" y="437" width="16.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="802.07" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::_M_erase_at_end (1,587,628,812 samples, 3.36%)</title><rect x="874.7" y="453" width="39.6" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="877.68" y="463.5" >std..</text>
</g>
<g >
<title>getGroundModel (680,412,348 samples, 1.44%)</title><rect x="799.1" y="469" width="16.9" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="802.07" y="479.5" ></text>
</g>
<g >
<title>_int_free (10,309,278 samples, 0.02%)</title><rect x="933.1" y="357" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="936.06" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::push_back (309,278,340 samples, 0.65%)</title><rect x="914.5" y="469" width="7.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="917.55" y="479.5" ></text>
</g>
<g >
<title>Eigen::internal::dot_nocheck&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, false&gt;::run (20,618,556 samples, 0.04%)</title><rect x="793.4" y="437" width="0.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="796.41" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_base (10,309,278 samples, 0.02%)</title><rect x="922.3" y="453" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="925.26" y="463.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="695.9" y="389" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="698.93" y="399.5" ></text>
</g>
<g >
<title>arena_for_chunk (10,309,278 samples, 0.02%)</title><rect x="907.1" y="325" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="910.09" y="335.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Lerp&lt;double&gt; (72,164,946 samples, 0.15%)</title><rect x="143.7" y="341" width="1.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="146.74" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="710.3" y="229" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.34" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl::_Vector_impl (206,185,560 samples, 0.44%)</title><rect x="629.6" y="309" width="5.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="632.58" y="319.5" ></text>
</g>
<g >
<title>tcache_get (10,309,278 samples, 0.02%)</title><rect x="703.9" y="197" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="706.91" y="207.5" ></text>
</g>
<g >
<title>_start (82,474,224 samples, 0.17%)</title><rect x="12.1" y="629" width="2.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="15.06" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (41,237,112 samples, 0.09%)</title><rect x="813.0" y="405" width="1.0" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="815.96" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (92,783,502 samples, 0.20%)</title><rect x="728.9" y="229" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="731.85" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_free (257,731,950 samples, 0.54%)</title><rect x="634.7" y="373" width="6.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="637.72" y="383.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (288,659,784 samples, 0.61%)</title><rect x="707.5" y="373" width="7.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="710.51" y="383.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (82,474,224 samples, 0.17%)</title><rect x="1088.2" y="357" width="2.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1091.15" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,103,092,746 samples, 2.33%)</title><rect x="534.7" y="325" width="27.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="537.67" y="335.5" >s..</text>
</g>
<g >
<title>double siv::perlin_detail::Grad&lt;double&gt; (154,639,170 samples, 0.33%)</title><rect x="800.6" y="325" width="3.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="803.61" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="717.5" y="261" width="1.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="720.54" y="271.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="85" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1091.41" y="95.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex*, vertex*&gt; (3,494,845,242 samples, 7.39%)</title><rect x="933.3" y="357" width="87.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="936.32" y="367.5" >vertex* st..</text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_linearvec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 0, 2&gt;::run (30,927,834 samples, 0.07%)</title><rect x="72.5" y="325" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="75.50" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::~vector (1,958,762,820 samples, 4.14%)</title><rect x="641.2" y="453" width="48.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="644.15" y="463.5" >std:..</text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (3,494,845,242 samples, 7.39%)</title><rect x="933.3" y="421" width="87.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="936.32" y="431.5" >vertex* st..</text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;std::move_iterator&lt;vertex*&gt;, vertex*&gt; (2,670,103,002 samples, 5.65%)</title><rect x="1020.5" y="389" width="66.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1023.51" y="399.5" >vertex*..</text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::erase (10,309,278 samples, 0.02%)</title><rect x="914.3" y="469" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="917.29" y="479.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="713.2" y="213" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="716.16" y="223.5" ></text>
</g>
<g >
<title>operator new (10,309,278 samples, 0.02%)</title><rect x="922.3" y="357" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="925.26" y="367.5" ></text>
</g>
<g >
<title>_XReply (92,783,502 samples, 0.20%)</title><rect x="693.6" y="373" width="2.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="696.62" y="383.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="703.9" y="229" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="706.91" y="239.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (298,969,062 samples, 0.63%)</title><rect x="62.5" y="437" width="7.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="65.47" y="447.5" ></text>
</g>
<g >
<title>D3DKMTQueryVideoMemoryInfo (61,855,668 samples, 0.13%)</title><rect x="720.6" y="325" width="1.6" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="723.62" y="335.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="786.2" y="437" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="789.21" y="447.5" ></text>
</g>
<g >
<title>[amdxc64.so] (154,639,170 samples, 0.33%)</title><rect x="700.8" y="357" width="3.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="703.82" y="367.5" ></text>
</g>
<g >
<title>renderer::runWindow (20,020,617,876 samples, 42.33%)</title><rect x="690.0" y="501" width="499.5" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="693.02" y="511.5" >renderer::runWindow</text>
</g>
<g >
<title>_int_malloc (10,309,278 samples, 0.02%)</title><rect x="1090.0" y="325" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1092.95" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="740.7" y="373" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="743.68" y="383.5" ></text>
</g>
<g >
<title>getTriangleNormal (10,309,278 samples, 0.02%)</title><rect x="795.7" y="277" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="798.72" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="733.5" y="277" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="736.48" y="287.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common64 (10,309,278 samples, 0.02%)</title><rect x="694.9" y="293" width="0.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="697.90" y="303.5" ></text>
</g>
<g >
<title>[amdxc64.so] (144,329,892 samples, 0.31%)</title><rect x="727.6" y="277" width="3.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="730.57" y="287.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (1,536,082,422 samples, 3.25%)</title><rect x="1136.5" y="373" width="38.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1139.50" y="383.5" >__m..</text>
</g>
<g >
<title>void Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;::assignPacket&lt;0, 16, double __vector (92,783,502 samples, 0.20%)</title><rect x="67.6" y="341" width="2.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="70.61" y="351.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="421" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.29" y="431.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (47,103,091,182 samples, 99.59%)</title><rect x="14.4" y="565" width="1175.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="17.37" y="575.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>model&amp; std::vector&lt;model, std::allocator&lt;model&gt; &gt;::emplace_back&lt;model&gt; (309,278,340 samples, 0.65%)</title><rect x="914.5" y="453" width="7.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="917.55" y="463.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;model*&gt; (1,587,628,812 samples, 3.36%)</title><rect x="874.7" y="421" width="39.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="877.68" y="431.5" >voi..</text>
</g>
<g >
<title>_int_free (10,309,278 samples, 0.02%)</title><rect x="11.5" y="613" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="14.54" y="623.5" ></text>
</g>
<g >
<title>glXGetFBConfigAttrib (10,309,278 samples, 0.02%)</title><rect x="786.7" y="453" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="789.72" y="463.5" ></text>
</g>
<g >
<title>Eigen::QuaternionBase&lt;Eigen::Quaternion&lt;double, 0&gt; &gt;::inverse (20,618,556 samples, 0.04%)</title><rect x="927.9" y="453" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="930.92" y="463.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise3D (278,350,506 samples, 0.59%)</title><rect x="138.6" y="357" width="6.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="141.60" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="714.2" y="293" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="717.19" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (10,309,278 samples, 0.02%)</title><rect x="927.4" y="469" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="930.41" y="479.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="713.9" y="293" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="716.94" y="303.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (835,051,518 samples, 1.77%)</title><rect x="818.6" y="373" width="20.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="821.61" y="383.5" ></text>
</g>
<g >
<title>glfwCreateWindow (10,309,278 samples, 0.02%)</title><rect x="11.3" y="613" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="14.29" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (10,309,278 samples, 0.02%)</title><rect x="563.5" y="437" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="566.48" y="447.5" ></text>
</g>
<g >
<title>[amdxc64.so] (92,783,502 samples, 0.20%)</title><rect x="723.7" y="277" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="726.71" y="287.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::operator/= (51,546,390 samples, 0.11%)</title><rect x="794.7" y="437" width="1.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="797.69" y="447.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise2D (268,041,228 samples, 0.57%)</title><rect x="806.3" y="357" width="6.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="809.27" y="367.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="501" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.29" y="511.5" ></text>
</g>
<g >
<title>auto siv::perlin_detail::Octave2D&lt;siv::BasicPerlinNoise&lt;double&gt;, double&gt; (278,350,506 samples, 0.59%)</title><rect x="799.1" y="373" width="6.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="802.07" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="10.0" y="581" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (195,876,282 samples, 0.41%)</title><rect x="922.5" y="389" width="4.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="925.52" y="399.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="117" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,360,824,662 samples, 4.99%)</title><rect x="503.3" y="421" width="58.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="506.30" y="431.5" >std::_..</text>
</g>
<g >
<title>_dl_open (10,309,278 samples, 0.02%)</title><rect x="11.3" y="165" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="14.29" y="175.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="933.1" y="389" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="936.06" y="399.5" ></text>
</g>
<g >
<title>getGroundAltitudeAndColorAveraged (17,092,782,924 samples, 36.14%)</title><rect x="135.8" y="453" width="426.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="138.77" y="463.5" >getGroundAltitudeAndColorAveraged</text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="725.8" y="165" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="728.77" y="175.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex, vertex&gt; (2,670,103,002 samples, 5.65%)</title><rect x="1020.5" y="309" width="66.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1023.51" y="319.5" >vertex*..</text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="739.9" y="357" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="742.91" y="367.5" ></text>
</g>
<g >
<title>_dl_open_relocate_one_object (10,309,278 samples, 0.02%)</title><rect x="11.3" y="85" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="14.29" y="95.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (10,309,278 samples, 0.02%)</title><rect x="788.0" y="453" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="791.01" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="733.7" y="181" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="736.74" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;collisionModel::triangle, std::allocator&lt;collisionModel::triangle&gt; &gt;::push_back (10,309,278 samples, 0.02%)</title><rect x="12.6" y="485" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="15.57" y="495.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (226,804,116 samples, 0.48%)</title><rect x="780.3" y="485" width="5.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="783.29" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~vector (257,731,950 samples, 0.54%)</title><rect x="634.7" y="469" width="6.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="637.72" y="479.5" ></text>
</g>
<g >
<title>Eigen::internal::div_assign_op&lt;double, double&gt;::assignCoeff (206,185,560 samples, 0.44%)</title><rect x="62.5" y="325" width="5.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="65.47" y="335.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex const*, vertex*&gt; (484,536,066 samples, 1.02%)</title><rect x="565.3" y="341" width="12.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="568.28" y="351.5" ></text>
</g>
<g >
<title>glfwCreateWindow (51,546,390 samples, 0.11%)</title><rect x="786.2" y="485" width="1.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="789.21" y="495.5" ></text>
</g>
<g >
<title>__malloc_arena_thread_freeres (10,309,278 samples, 0.02%)</title><rect x="1189.5" y="597" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1192.49" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (10,309,278 samples, 0.02%)</title><rect x="914.3" y="373" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="917.29" y="383.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (3,546,391,632 samples, 7.50%)</title><rect x="691.6" y="453" width="88.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="694.56" y="463.5" >[libgalliu..</text>
</g>
<g >
<title>void Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;::assignPacket&lt;0, 0, double __vector (10,309,278 samples, 0.02%)</title><rect x="928.4" y="277" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="931.44" y="287.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (30,927,834 samples, 0.07%)</title><rect x="693.6" y="357" width="0.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="696.62" y="367.5" ></text>
</g>
<g >
<title>applySunlightToModel (3,432,989,574 samples, 7.26%)</title><rect x="15.7" y="485" width="85.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="18.66" y="495.5" >applySunli..</text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (1,402,061,808 samples, 2.96%)</title><rect x="839.4" y="389" width="35.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="842.45" y="399.5" >ve..</text>
</g>
<g >
<title>[libdxcore.so] (30,927,834 samples, 0.07%)</title><rect x="731.2" y="341" width="0.7" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="734.17" y="351.5" ></text>
</g>
<g >
<title>malloc@plt (10,309,278 samples, 0.02%)</title><rect x="565.0" y="341" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="568.02" y="351.5" ></text>
</g>
<g >
<title>renderer::setVerticesByModels (9,999,999,660 samples, 21.14%)</title><rect x="930.2" y="485" width="249.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="933.24" y="495.5" >renderer::setVerticesByModels</text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="787.0" y="405" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="789.98" y="415.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="549" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="14.29" y="559.5" ></text>
</g>
<g >
<title>getGroundAltitude (278,350,506 samples, 0.59%)</title><rect x="799.1" y="421" width="6.9" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="802.07" y="431.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="309" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.29" y="319.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (10,309,278 samples, 0.02%)</title><rect x="784.7" y="341" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="787.66" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,113,402,024 samples, 2.35%)</title><rect x="475.0" y="389" width="27.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="478.00" y="399.5" >s..</text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (61,855,668 samples, 0.13%)</title><rect x="563.7" y="421" width="1.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="566.74" y="431.5" ></text>
</g>
<g >
<title>[libdxcore.so] (72,164,946 samples, 0.15%)</title><rect x="720.4" y="357" width="1.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="723.37" y="367.5" ></text>
</g>
<g >
<title>__memset_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="711.1" y="341" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="714.11" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (20,618,556 samples, 0.04%)</title><rect x="815.3" y="277" width="0.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="818.27" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="710.1" y="277" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.08" y="287.5" ></text>
</g>
<g >
<title>setVertexColorsByBrightness (103,092,780 samples, 0.22%)</title><rect x="796.5" y="453" width="2.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="799.50" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,134,020,580 samples, 2.40%)</title><rect x="533.9" y="341" width="28.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="536.90" y="351.5" >s..</text>
</g>
<g >
<title>[amdxc64.so] (61,855,668 samples, 0.13%)</title><rect x="724.5" y="229" width="1.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="727.48" y="239.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,381,443,252 samples, 2.92%)</title><rect x="706.7" y="389" width="34.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="709.73" y="399.5" >[l..</text>
</g>
<g >
<title>physicsObject::queueForce (10,309,278 samples, 0.02%)</title><rect x="12.1" y="517" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="15.06" y="527.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.2" y="293" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="931.18" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (20,618,556 samples, 0.04%)</title><rect x="815.3" y="357" width="0.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="818.27" y="367.5" ></text>
</g>
<g >
<title>Eigen::Quaternion&lt;double, 0&gt;&amp; Eigen::QuaternionBase&lt;Eigen::Quaternion&lt;double, 0&gt; &gt;::operator=&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.2" y="421" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="931.18" y="431.5" ></text>
</g>
<g >
<title>operator new (10,309,278 samples, 0.02%)</title><rect x="1189.7" y="629" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1192.74" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::_M_allocate (103,092,780 samples, 0.22%)</title><rect x="627.0" y="437" width="2.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="630.01" y="447.5" ></text>
</g>
<g >
<title>operator new (835,051,518 samples, 1.77%)</title><rect x="818.6" y="357" width="20.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="821.61" y="367.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="711.6" y="341" width="1.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="714.62" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="717.5" y="277" width="1.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="720.54" y="287.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@plt (10,309,278 samples, 0.02%)</title><rect x="740.2" y="357" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="743.17" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (9,567,009,984 samples, 20.23%)</title><rect x="236.3" y="389" width="238.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="239.33" y="399.5" >std::_Hashtable&lt;groundInfo, std..</text>
</g>
<g >
<title>heap_trim (10,309,278 samples, 0.02%)</title><rect x="933.1" y="325" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="936.06" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="703.9" y="213" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="706.91" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,360,824,696 samples, 2.88%)</title><rect x="528.2" y="405" width="34.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="531.24" y="415.5" >st..</text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="698.5" y="261" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.50" y="271.5" ></text>
</g>
<g >
<title>_dl_catch_error (10,309,278 samples, 0.02%)</title><rect x="11.3" y="213" width="0.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="14.29" y="223.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (10,309,278 samples, 0.02%)</title><rect x="693.9" y="325" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="696.88" y="335.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;::Matrix (10,309,278 samples, 0.02%)</title><rect x="12.3" y="501" width="0.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="15.31" y="511.5" ></text>
</g>
<g >
<title>groundInfo::operator== (175,257,726 samples, 0.37%)</title><rect x="518.5" y="325" width="4.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="521.47" y="335.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="734.5" y="277" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="737.51" y="287.5" ></text>
</g>
<g >
<title>Eigen::internal::cross_impl&lt;Eigen::Block&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, 3, 1, false&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, 3&gt;::run (10,309,278 samples, 0.02%)</title><rect x="12.8" y="405" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="15.83" y="415.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::sum (41,237,112 samples, 0.09%)</title><rect x="69.9" y="421" width="1.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="72.93" y="431.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (10,309,278 samples, 0.02%)</title><rect x="914.3" y="261" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="917.29" y="271.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (92,783,502 samples, 0.20%)</title><rect x="732.7" y="325" width="2.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="735.71" y="335.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;::allocate (103,092,780 samples, 0.22%)</title><rect x="627.0" y="405" width="2.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="630.01" y="415.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise3D (247,422,672 samples, 0.52%)</title><rect x="799.8" y="341" width="6.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="802.84" y="351.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;::assignCoeff (10,309,278 samples, 0.02%)</title><rect x="72.2" y="309" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="75.24" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (30,927,834 samples, 0.07%)</title><rect x="813.2" y="341" width="0.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="816.21" y="351.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (41,237,112 samples, 0.09%)</title><rect x="639.6" y="341" width="1.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="642.61" y="351.5" ></text>
</g>
<g >
<title>__round (72,164,946 samples, 0.15%)</title><rect x="134.0" y="453" width="1.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="136.97" y="463.5" ></text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="793.4" y="309" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="796.41" y="319.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_move_if_noexcept_a&lt;vertex*, vertex*, std::allocator&lt;vertex&gt; &gt; (2,670,103,002 samples, 5.65%)</title><rect x="1020.5" y="437" width="66.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1023.51" y="447.5" >vertex*..</text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="133" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="143.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;visualModel&gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="927.7" y="389" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="930.66" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (51,546,390 samples, 0.11%)</title><rect x="737.6" y="325" width="1.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="740.60" y="335.5" ></text>
</g>
<g >
<title>elf_machine_rela_relative (10,309,278 samples, 0.02%)</title><rect x="11.3" y="37" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.29" y="47.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (824,742,240 samples, 1.74%)</title><rect x="818.9" y="341" width="20.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="821.87" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (257,731,950 samples, 0.54%)</title><rect x="634.7" y="421" width="6.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="637.72" y="431.5" ></text>
</g>
<g >
<title>__libc_start_call_main (82,474,224 samples, 0.17%)</title><rect x="12.1" y="597" width="2.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="15.06" y="607.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="710.9" y="149" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.85" y="159.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex const*, vertex*&gt; (484,536,066 samples, 1.02%)</title><rect x="565.3" y="325" width="12.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="568.28" y="335.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="10.8" y="517" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="13.77" y="527.5" ></text>
</g>
<g >
<title>renderer::createModelsFromPhysicsObjects (10,309,278 samples, 0.02%)</title><rect x="928.4" y="213" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="931.44" y="223.5" ></text>
</g>
<g >
<title>Eigen::internal::dense_assignment_loop&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 3, 2&gt;::run (41,237,112 samples, 0.09%)</title><rect x="72.2" y="341" width="1.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="75.24" y="351.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D (278,350,506 samples, 0.59%)</title><rect x="806.0" y="389" width="7.0" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="809.01" y="399.5" ></text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;std::move_iterator&lt;vertex*&gt;, vertex*&gt; (2,670,103,002 samples, 5.65%)</title><rect x="1020.5" y="405" width="66.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1023.51" y="415.5" >vertex*..</text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*, vertex&gt; (484,536,066 samples, 1.02%)</title><rect x="565.3" y="421" width="12.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="568.28" y="431.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::PlainObjectBase (10,309,278 samples, 0.02%)</title><rect x="12.3" y="485" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="15.31" y="495.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (195,876,282 samples, 0.41%)</title><rect x="922.5" y="325" width="4.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="925.52" y="335.5" ></text>
</g>
<g >
<title>__GI___errno_location (10,309,278 samples, 0.02%)</title><rect x="694.1" y="293" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="697.13" y="303.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.4" y="357" width="0.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="931.44" y="367.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Grad&lt;double&gt; (144,329,892 samples, 0.31%)</title><rect x="140.1" y="341" width="3.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="143.14" y="351.5" ></text>
</g>
<g >
<title>getGroundColor (206,185,560 samples, 0.44%)</title><rect x="145.5" y="437" width="5.2" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="148.54" y="447.5" ></text>
</g>
<g >
<title>glfwGetWindowAttrib (41,237,112 samples, 0.09%)</title><rect x="788.5" y="469" width="1.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="791.52" y="479.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex const, vertex&gt; (195,876,282 samples, 0.41%)</title><rect x="922.5" y="341" width="4.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="925.52" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (51,546,390 samples, 0.11%)</title><rect x="814.0" y="405" width="1.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="816.98" y="415.5" ></text>
</g>
<g >
<title>_int_free (195,876,282 samples, 0.41%)</title><rect x="636.3" y="357" width="4.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="639.26" y="367.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="597" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="14.29" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_init@plt (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="37" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1091.41" y="47.5" ></text>
</g>
<g >
<title>decltype  (206,185,560 samples, 0.44%)</title><rect x="629.6" y="357" width="5.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="632.58" y="367.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="405" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.29" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="709.3" y="309" width="1.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="712.31" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;::pair&lt;groundInfo const&amp;&gt; (10,309,278 samples, 0.02%)</title><rect x="528.0" y="341" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="530.99" y="351.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D (278,350,506 samples, 0.59%)</title><rect x="799.1" y="389" width="6.9" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="802.07" y="399.5" ></text>
</g>
<g >
<title>_dl_relocate_object (10,309,278 samples, 0.02%)</title><rect x="11.3" y="69" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="14.29" y="79.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (298,969,062 samples, 0.63%)</title><rect x="62.5" y="405" width="7.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="65.47" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (30,927,834 samples, 0.07%)</title><rect x="932.3" y="357" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="935.29" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (1,030,927,800 samples, 2.18%)</title><rect x="596.9" y="277" width="25.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="599.91" y="287.5" >_..</text>
</g>
<g >
<title>getTriangleNormal (92,783,502 samples, 0.20%)</title><rect x="67.6" y="293" width="2.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="70.61" y="303.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (47,103,091,182 samples, 99.59%)</title><rect x="14.4" y="581" width="1175.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="17.37" y="591.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex const, vertex&gt; (1,402,061,808 samples, 2.96%)</title><rect x="839.4" y="309" width="35.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="842.45" y="319.5" >ve..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::allocate (835,051,518 samples, 1.77%)</title><rect x="818.6" y="405" width="20.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="821.61" y="415.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common (10,309,278 samples, 0.02%)</title><rect x="694.9" y="309" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="697.90" y="319.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (1,556,700,978 samples, 3.29%)</title><rect x="741.2" y="405" width="38.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="744.20" y="415.5" >__m..</text>
</g>
<g >
<title>[libd3d12core.so] (30,927,834 samples, 0.07%)</title><rect x="719.6" y="293" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="722.59" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_free (10,309,278 samples, 0.02%)</title><rect x="927.4" y="373" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="930.41" y="383.5" ></text>
</g>
<g >
<title>double __vector (30,927,834 samples, 0.07%)</title><rect x="72.5" y="293" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="75.50" y="303.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::PlainObjectBase (10,309,278 samples, 0.02%)</title><rect x="13.1" y="501" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="16.09" y="511.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (474,226,788 samples, 1.00%)</title><rect x="565.5" y="293" width="11.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="568.54" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (10,309,278 samples, 0.02%)</title><rect x="814.5" y="357" width="0.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="817.50" y="367.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::allocate (20,618,556 samples, 0.04%)</title><rect x="815.3" y="325" width="0.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="818.27" y="335.5" ></text>
</g>
<g >
<title>tcache_get_n (10,309,278 samples, 0.02%)</title><rect x="739.7" y="309" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="742.66" y="319.5" ></text>
</g>
<g >
<title>double Eigen::internal::redux_impl&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::internal::redux_evaluator&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, 3, 2&gt;::run&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (41,237,112 samples, 0.09%)</title><rect x="69.9" y="389" width="1.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="72.93" y="399.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (175,257,726 samples, 0.37%)</title><rect x="781.6" y="469" width="4.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="784.58" y="479.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex*, vertex*&gt; (1,536,082,422 samples, 3.25%)</title><rect x="1136.5" y="421" width="38.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1139.50" y="431.5" >ver..</text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;model&gt; &gt;::destroy&lt;model&gt; (10,309,278 samples, 0.02%)</title><rect x="914.3" y="437" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="917.29" y="447.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="581" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="14.29" y="591.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex*, vertex*&gt; (1,536,082,422 samples, 3.25%)</title><rect x="1136.5" y="405" width="38.3" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="1139.50" y="415.5" >ver..</text>
</g>
<g >
<title>applySunlightToModel (20,618,556 samples, 0.04%)</title><rect x="18.2" y="309" width="0.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="21.23" y="319.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::sum (61,855,668 samples, 0.13%)</title><rect x="17.2" y="437" width="1.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="20.20" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::push_back (2,298,968,994 samples, 4.86%)</title><rect x="577.4" y="469" width="57.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="580.37" y="479.5" >std::v..</text>
</g>
<g >
<title>void std::this_thread::sleep_for&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (30,927,834 samples, 0.07%)</title><rect x="13.3" y="533" width="0.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="16.34" y="543.5" ></text>
</g>
<g >
<title>[amdxc64.so] (92,783,502 samples, 0.20%)</title><rect x="723.7" y="309" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="726.71" y="319.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (3,453,608,130 samples, 7.30%)</title><rect x="933.3" y="309" width="86.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="936.32" y="319.5" >__memcpy_a..</text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="469" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.29" y="479.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise3D (195,876,282 samples, 0.41%)</title><rect x="145.8" y="357" width="4.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="148.80" y="367.5" ></text>
</g>
<g >
<title>free@plt (10,309,278 samples, 0.02%)</title><rect x="689.8" y="261" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="692.76" y="271.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="733.7" y="165" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="736.74" y="175.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;std::move_iterator&lt;vertex*&gt;, vertex*, vertex&gt; (2,670,103,002 samples, 5.65%)</title><rect x="1020.5" y="421" width="66.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1023.51" y="431.5" >vertex*..</text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="815.8" y="373" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="818.78" y="383.5" ></text>
</g>
<g >
<title>_int_malloc (30,927,834 samples, 0.07%)</title><rect x="527.2" y="293" width="0.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="530.21" y="303.5" ></text>
</g>
<g >
<title>double __vector (20,618,556 samples, 0.04%)</title><rect x="793.4" y="341" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="796.41" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="724.7" y="213" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="727.74" y="223.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="710.6" y="165" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.59" y="175.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_LinearTraversal_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 2, 3&gt;::run (10,309,278 samples, 0.02%)</title><rect x="72.2" y="325" width="0.3" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="75.24" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (72,164,946 samples, 0.15%)</title><rect x="697.7" y="373" width="1.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="700.73" y="383.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="927.4" y="389" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="930.41" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="713.2" y="197" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="716.16" y="207.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, std::pair&lt;double, double&gt;, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt; &gt;::find (41,237,112 samples, 0.09%)</title><rect x="813.0" y="421" width="1.0" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="815.96" y="431.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (20,618,556 samples, 0.04%)</title><rect x="695.2" y="309" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="698.16" y="319.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,969,072,098 samples, 4.16%)</title><rect x="1087.4" y="405" width="49.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1090.38" y="415.5" >[lib..</text>
</g>
<g >
<title>dlopen_doit (10,309,278 samples, 0.02%)</title><rect x="11.3" y="181" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="14.29" y="191.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (10,309,278 samples, 0.02%)</title><rect x="927.4" y="437" width="0.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="930.41" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_base (20,618,556 samples, 0.04%)</title><rect x="815.3" y="389" width="0.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="818.27" y="399.5" ></text>
</g>
<g >
<title>Eigen::internal::div_assign_op&lt;double, double&gt;::assignCoeff (41,237,112 samples, 0.09%)</title><rect x="794.7" y="309" width="1.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="797.69" y="319.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="703.1" y="261" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="706.13" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (10,309,278 samples, 0.02%)</title><rect x="740.9" y="357" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="743.94" y="367.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (278,350,506 samples, 0.59%)</title><rect x="731.9" y="341" width="7.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="734.94" y="351.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (3,587,628,744 samples, 7.59%)</title><rect x="690.8" y="485" width="89.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="693.79" y="495.5" >[libGLX_me..</text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::allocate (20,618,556 samples, 0.04%)</title><rect x="815.3" y="309" width="0.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="818.27" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (10,309,278 samples, 0.02%)</title><rect x="814.5" y="373" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="817.50" y="383.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="928.4" y="245" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="931.44" y="255.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="720.1" y="261" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="723.11" y="271.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex const, vertex&gt; (113,402,058 samples, 0.24%)</title><rect x="624.2" y="293" width="2.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="627.18" y="303.5" ></text>
</g>
<g >
<title>___dlopen (10,309,278 samples, 0.02%)</title><rect x="11.3" y="261" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="14.29" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (30,927,834 samples, 0.07%)</title><rect x="932.3" y="437" width="0.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="935.29" y="447.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (51,546,390 samples, 0.11%)</title><rect x="713.4" y="341" width="1.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="716.42" y="351.5" ></text>
</g>
<g >
<title>Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::squaredNorm (41,237,112 samples, 0.09%)</title><rect x="69.9" y="437" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="72.93" y="447.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (51,546,390 samples, 0.11%)</title><rect x="794.7" y="421" width="1.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="797.69" y="431.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="277" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.29" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="815.8" y="405" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="818.78" y="415.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="229" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="239.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (47,103,091,182 samples, 99.59%)</title><rect x="14.4" y="517" width="1175.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="17.37" y="527.5" >void std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>double Eigen::DenseBase&lt;Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_abs2_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::redux&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt; &gt; (41,237,112 samples, 0.09%)</title><rect x="69.9" y="405" width="1.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="72.93" y="415.5" ></text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (195,876,282 samples, 0.41%)</title><rect x="922.5" y="437" width="4.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="925.52" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (10,309,278 samples, 0.02%)</title><rect x="814.0" y="389" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="816.98" y="399.5" ></text>
</g>
<g >
<title>Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::norm (72,164,946 samples, 0.15%)</title><rect x="69.9" y="453" width="1.8" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="72.93" y="463.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; const&amp;&gt; (20,618,556 samples, 0.04%)</title><rect x="815.3" y="437" width="0.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="818.27" y="447.5" ></text>
</g>
<g >
<title>Eigen::MatrixBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::squaredNorm (10,309,278 samples, 0.02%)</title><rect x="796.0" y="421" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="798.98" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;groundInfo, std::pair&lt;double, double&gt;, groundInfoHash, std::equal_to&lt;groundInfo&gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt; &gt;::operator[] (51,546,390 samples, 0.11%)</title><rect x="814.0" y="421" width="1.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="816.98" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (20,618,556 samples, 0.04%)</title><rect x="814.2" y="389" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="817.24" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="698.8" y="213" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.76" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (30,927,834 samples, 0.07%)</title><rect x="527.2" y="309" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="530.21" y="319.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (3,494,845,242 samples, 7.39%)</title><rect x="933.3" y="389" width="87.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="936.32" y="399.5" >vertex* st..</text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*, vertex&gt; (3,494,845,242 samples, 7.39%)</title><rect x="933.3" y="437" width="87.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="936.32" y="447.5" >vertex* st..</text>
</g>
<g >
<title>_int_malloc (10,309,278 samples, 0.02%)</title><rect x="814.8" y="277" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="817.76" y="287.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="698.8" y="197" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="701.76" y="207.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="712.9" y="261" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="715.91" y="271.5" ></text>
</g>
<g >
<title>__GI___poll (10,309,278 samples, 0.02%)</title><rect x="694.6" y="293" width="0.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="697.65" y="303.5" ></text>
</g>
<g >
<title>__GI___poll (10,309,278 samples, 0.02%)</title><rect x="789.3" y="373" width="0.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="792.29" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="69" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1091.41" y="79.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (711,340,182 samples, 1.50%)</title><rect x="889.3" y="309" width="17.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="892.34" y="319.5" ></text>
</g>
<g >
<title>XSync (92,783,502 samples, 0.20%)</title><rect x="693.6" y="389" width="2.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="696.62" y="399.5" ></text>
</g>
<g >
<title>unsigned long std::_Hash_impl::hash&lt;double&gt; (10,309,278 samples, 0.02%)</title><rect x="815.0" y="341" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="818.01" y="351.5" ></text>
</g>
<g >
<title>double __vector (10,309,278 samples, 0.02%)</title><rect x="928.2" y="181" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="931.18" y="191.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise2D (195,876,282 samples, 0.41%)</title><rect x="145.8" y="373" width="4.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="148.80" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (711,340,182 samples, 1.50%)</title><rect x="509.0" y="405" width="17.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="511.95" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="699.0" y="165" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="702.02" y="175.5" ></text>
</g>
<g >
<title>main (47,298,967,464 samples, 100.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >main</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::insert&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, void&gt; (6,226,803,912 samples, 13.16%)</title><rect x="931.8" y="469" width="155.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="934.78" y="479.5" >__gnu_cxx::__normal..</text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="53" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1091.41" y="63.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="1089.7" y="325" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1092.69" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_base (1,865,979,318 samples, 3.95%)</title><rect x="577.6" y="405" width="46.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="580.62" y="415.5" >std:..</text>
</g>
<g >
<title>_int_free_maybe_consolidate (30,927,834 samples, 0.07%)</title><rect x="888.6" y="309" width="0.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="891.57" y="319.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="149" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="159.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_allocate (1,298,969,028 samples, 2.75%)</title><rect x="591.3" y="373" width="32.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="594.26" y="383.5" >st..</text>
</g>
<g >
<title>[libxcb.so.1.1.0] (20,618,556 samples, 0.04%)</title><rect x="694.4" y="325" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="697.39" y="335.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="517" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.29" y="527.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="1088.4" y="309" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (20,618,556 samples, 0.04%)</title><rect x="739.4" y="341" width="0.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="742.40" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (7,773,195,612 samples, 16.43%)</title><rect x="281.1" y="357" width="193.9" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="284.08" y="367.5" >std::__detail::_Hashtable..</text>
</g>
<g >
<title>double siv::perlin_detail::Fade&lt;double&gt; (10,309,278 samples, 0.02%)</title><rect x="146.8" y="341" width="0.3" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="149.83" y="351.5" ></text>
</g>
<g >
<title>tcache_get (10,309,278 samples, 0.02%)</title><rect x="695.4" y="277" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="698.42" y="287.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (484,536,066 samples, 1.02%)</title><rect x="565.3" y="389" width="12.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="568.28" y="399.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;vertex&gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="914.3" y="309" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="917.29" y="319.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (61,855,668 samples, 0.13%)</title><rect x="783.6" y="421" width="1.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="786.64" y="431.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::noise3D (268,041,228 samples, 0.57%)</title><rect x="806.3" y="341" width="6.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="809.27" y="351.5" ></text>
</g>
<g >
<title>xcb_writev (20,618,556 samples, 0.04%)</title><rect x="694.4" y="341" width="0.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="697.39" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (82,474,224 samples, 0.17%)</title><rect x="709.0" y="325" width="2.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="712.05" y="335.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="695.9" y="405" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="698.93" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (10,309,278 samples, 0.02%)</title><rect x="814.0" y="357" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="816.98" y="367.5" ></text>
</g>
<g >
<title>Eigen::internal::dense_assignment_loop&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, 0&gt;, 3, 2&gt;::run (51,546,390 samples, 0.11%)</title><rect x="794.7" y="357" width="1.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="797.69" y="367.5" ></text>
</g>
<g >
<title>void Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;::assignPacket&lt;16, 16, double __vector (10,309,278 samples, 0.02%)</title><rect x="928.2" y="213" width="0.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="931.18" y="223.5" ></text>
</g>
<g >
<title>_XReply (30,927,834 samples, 0.07%)</title><rect x="788.8" y="437" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="791.78" y="447.5" ></text>
</g>
<g >
<title>__GI__dl_catch_exception (10,309,278 samples, 0.02%)</title><rect x="11.3" y="197" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="14.29" y="207.5" ></text>
</g>
<g >
<title>collisionModel::collider::update (20,618,556 samples, 0.04%)</title><rect x="12.6" y="517" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="15.57" y="527.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;::PlainObjectBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.4" y="389" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="931.44" y="399.5" ></text>
</g>
<g >
<title>memmove@plt (41,237,112 samples, 0.09%)</title><rect x="1019.5" y="309" width="1.0" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1022.48" y="319.5" ></text>
</g>
<g >
<title>_int_free (10,309,278 samples, 0.02%)</title><rect x="11.8" y="629" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="14.80" y="639.5" ></text>
</g>
<g >
<title>void std::destroy_at&lt;model&gt; (10,309,278 samples, 0.02%)</title><rect x="914.3" y="421" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="917.29" y="431.5" ></text>
</g>
<g >
<title>[libxcb.so.1.1.0] (30,927,834 samples, 0.07%)</title><rect x="695.2" y="341" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="698.16" y="351.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (30,927,834 samples, 0.07%)</title><rect x="719.6" y="309" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="722.59" y="319.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (10,309,278 samples, 0.02%)</title><rect x="11.0" y="613" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="14.03" y="623.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wait_private (61,855,668 samples, 0.13%)</title><rect x="666.4" y="229" width="1.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="669.36" y="239.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (30,927,834 samples, 0.07%)</title><rect x="719.6" y="325" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="722.59" y="335.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (298,969,062 samples, 0.63%)</title><rect x="62.5" y="421" width="7.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="65.47" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (773,195,850 samples, 1.63%)</title><rect x="483.5" y="309" width="19.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="486.49" y="319.5" ></text>
</g>
<g >
<title>decltype  (10,309,278 samples, 0.02%)</title><rect x="528.0" y="357" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="530.99" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl_data::_Vector_impl_data (20,618,556 samples, 0.04%)</title><rect x="623.7" y="373" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="626.66" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (154,639,170 samples, 0.33%)</title><rect x="727.3" y="293" width="3.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="730.31" y="303.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;vertex, vertex&gt; (1,536,082,422 samples, 3.25%)</title><rect x="1136.5" y="389" width="38.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1139.50" y="399.5" >ver..</text>
</g>
<g >
<title>__GI___libc_free (1,567,010,256 samples, 3.31%)</title><rect x="650.7" y="261" width="39.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="653.67" y="271.5" >__G..</text>
</g>
<g >
<title>physicsObject::updateModules (51,546,390 samples, 0.11%)</title><rect x="12.1" y="549" width="1.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="15.06" y="559.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D (288,659,784 samples, 0.61%)</title><rect x="138.3" y="405" width="7.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="141.34" y="415.5" ></text>
</g>
<g >
<title>Eigen::internal::rotation_base_generic_product_selector&lt;Eigen::Quaternion&lt;double, 0&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;::IsVectorAtCompileTime&gt;::ReturnType Eigen::RotationBase&lt;Eigen::Quaternion&lt;double, 0&gt;, 3&gt;::operator*&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt; (72,164,946 samples, 0.15%)</title><rect x="928.4" y="453" width="1.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="931.44" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="712.1" y="325" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="715.14" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="710.3" y="197" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="713.34" y="207.5" ></text>
</g>
<g >
<title>_XReply (10,309,278 samples, 0.02%)</title><rect x="784.7" y="357" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="787.66" y="367.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (20,618,556 samples, 0.04%)</title><rect x="1089.2" y="293" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1092.18" y="303.5" ></text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="695.9" y="373" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="698.93" y="383.5" ></text>
</g>
<g >
<title>_dlerror_run (10,309,278 samples, 0.02%)</title><rect x="11.3" y="229" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="14.29" y="239.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (51,546,390 samples, 0.11%)</title><rect x="794.7" y="389" width="1.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="797.69" y="399.5" ></text>
</g>
<g >
<title>getGroundModel (21,639,174,522 samples, 45.75%)</title><rect x="101.3" y="485" width="539.9" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="104.30" y="495.5" >getGroundModel</text>
</g>
<g >
<title>[amdxc64.so] (10,309,278 samples, 0.02%)</title><rect x="725.8" y="149" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="728.77" y="159.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (20,618,556 samples, 0.04%)</title><rect x="786.2" y="469" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="789.21" y="479.5" ></text>
</g>
<g >
<title>__GI__dl_catch_exception (10,309,278 samples, 0.02%)</title><rect x="11.3" y="149" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="14.29" y="159.5" ></text>
</g>
<g >
<title>[amdxc64.so] (20,618,556 samples, 0.04%)</title><rect x="730.7" y="165" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="733.65" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_Vector_impl_data::_Vector_impl_data (206,185,560 samples, 0.44%)</title><rect x="629.6" y="293" width="5.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="632.58" y="303.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="1088.4" y="245" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1091.41" y="255.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_assignment_no_alias&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (51,546,390 samples, 0.11%)</title><rect x="794.7" y="405" width="1.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="797.69" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::vector (10,309,278 samples, 0.02%)</title><rect x="922.0" y="389" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="925.01" y="399.5" ></text>
</g>
<g >
<title>[libX11.so.6.4.0] (10,309,278 samples, 0.02%)</title><rect x="787.8" y="405" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="790.75" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (10,309,278 samples, 0.02%)</title><rect x="815.0" y="325" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="818.01" y="335.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.4" y="325" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="931.44" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::size (391,752,564 samples, 0.83%)</title><rect x="1179.7" y="485" width="9.8" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1182.71" y="495.5" ></text>
</g>
<g >
<title>memmove@plt (30,927,834 samples, 0.07%)</title><rect x="873.7" y="293" width="0.7" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="876.65" y="303.5" ></text>
</g>
<g >
<title>unsigned long std::_Hash_impl::hash&lt;double&gt; (814,432,962 samples, 1.72%)</title><rect x="482.5" y="341" width="20.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="485.46" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="733.7" y="213" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="736.74" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (711,340,182 samples, 1.50%)</title><rect x="509.0" y="389" width="17.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="511.95" y="399.5" ></text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (1,402,061,808 samples, 2.96%)</title><rect x="839.4" y="405" width="35.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="842.45" y="415.5" >ve..</text>
</g>
<g >
<title>vertex* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*, vertex&gt; (1,402,061,808 samples, 2.96%)</title><rect x="839.4" y="421" width="35.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="842.45" y="431.5" >ve..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_key_equals (412,371,120 samples, 0.87%)</title><rect x="281.9" y="341" width="10.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="284.85" y="351.5" ></text>
</g>
<g >
<title>[libGLX_mesa.so.0.0.0] (10,309,278 samples, 0.02%)</title><rect x="691.3" y="437" width="0.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="694.30" y="447.5" ></text>
</g>
<g >
<title>XGetWindowAttributes (20,618,556 samples, 0.04%)</title><rect x="787.5" y="469" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="790.49" y="479.5" ></text>
</g>
<g >
<title>groundInfoHash::operator (10,309,278 samples, 0.02%)</title><rect x="815.0" y="373" width="0.3" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="818.01" y="383.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (484,536,066 samples, 1.02%)</title><rect x="565.3" y="357" width="12.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="568.28" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;::size (134,020,614 samples, 0.28%)</title><rect x="98.0" y="469" width="3.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="100.96" y="479.5" ></text>
</g>
<g >
<title>__libc_calloc (20,618,556 samples, 0.04%)</title><rect x="736.3" y="293" width="0.5" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="739.31" y="303.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (82,474,224 samples, 0.17%)</title><rect x="704.7" y="357" width="2.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="707.68" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;groundInfo const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="814.8" y="373" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="817.76" y="383.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (484,536,066 samples, 1.02%)</title><rect x="565.3" y="373" width="12.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="568.28" y="383.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (82,474,224 samples, 0.17%)</title><rect x="733.0" y="309" width="2.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="735.97" y="319.5" ></text>
</g>
<g >
<title>[libdxcore.so] (72,164,946 samples, 0.15%)</title><rect x="720.4" y="341" width="1.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="723.37" y="351.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;void  (47,103,091,182 samples, 99.59%)</title><rect x="14.4" y="549" width="1175.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="17.37" y="559.5" >void std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>renderer::setVertices (3,515,463,798 samples, 7.43%)</title><rect x="1087.1" y="469" width="87.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1090.12" y="479.5" >renderer::..</text>
</g>
<g >
<title>std::_Vector_base&lt;visualModel, std::allocator&lt;visualModel&gt; &gt;::_M_allocate (10,309,278 samples, 0.02%)</title><rect x="927.7" y="437" width="0.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="930.66" y="447.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (20,618,556 samples, 0.04%)</title><rect x="714.2" y="325" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="717.19" y="335.5" ></text>
</g>
<g >
<title>unlink_chunk (20,618,556 samples, 0.04%)</title><rect x="838.9" y="309" width="0.5" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="841.93" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::~_Vector_base (10,309,278 samples, 0.02%)</title><rect x="815.8" y="437" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="818.78" y="447.5" ></text>
</g>
<g >
<title>Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;::Matrix (10,309,278 samples, 0.02%)</title><rect x="13.1" y="517" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="16.09" y="527.5" ></text>
</g>
<g >
<title>collisionModel::collider::rotateModelData (20,618,556 samples, 0.04%)</title><rect x="12.6" y="501" width="0.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="15.57" y="511.5" ></text>
</g>
<g >
<title>Eigen::internal::Assignment&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt;, Eigen::internal::assign_op&lt;double, double&gt;, Eigen::internal::Dense2Dense, void&gt;::run (10,309,278 samples, 0.02%)</title><rect x="928.4" y="341" width="0.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="931.44" y="351.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="712.7" y="277" width="0.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="715.65" y="287.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (1,969,072,098 samples, 4.16%)</title><rect x="1087.4" y="437" width="49.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1090.38" y="447.5" >[lib..</text>
</g>
<g >
<title>__GI___clock_gettime (20,618,556 samples, 0.04%)</title><rect x="1089.2" y="277" width="0.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1092.18" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="933.1" y="421" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="936.06" y="431.5" ></text>
</g>
<g >
<title>collisionModel::collider::update (20,618,556 samples, 0.04%)</title><rect x="12.6" y="533" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="15.57" y="543.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (288,659,784 samples, 0.61%)</title><rect x="699.5" y="373" width="7.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="702.53" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;vertex&gt; &gt;::deallocate (10,309,278 samples, 0.02%)</title><rect x="914.3" y="341" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="917.29" y="351.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="293" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.29" y="303.5" ></text>
</g>
<g >
<title>void Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::div_assign_op&lt;double, double&gt; &gt; (298,969,062 samples, 0.63%)</title><rect x="62.5" y="389" width="7.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="65.47" y="399.5" ></text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (1,577,319,534 samples, 3.33%)</title><rect x="650.7" y="293" width="39.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="653.67" y="303.5" >std..</text>
</g>
<g >
<title>_XReply (20,618,556 samples, 0.04%)</title><rect x="787.5" y="437" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="790.49" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (350,515,452 samples, 0.74%)</title><rect x="518.0" y="373" width="8.7" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="520.96" y="383.5" ></text>
</g>
<g >
<title>__libc_start_main_impl (82,474,224 samples, 0.17%)</title><rect x="12.1" y="613" width="2.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="15.06" y="623.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (10,309,278 samples, 0.02%)</title><rect x="780.0" y="453" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="783.03" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (164,948,448 samples, 0.35%)</title><rect x="727.1" y="309" width="4.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="730.05" y="319.5" ></text>
</g>
<g >
<title>vertex* std::copy&lt;std::move_iterator&lt;vertex*&gt;, vertex*&gt; (2,670,103,002 samples, 5.65%)</title><rect x="1020.5" y="373" width="66.6" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1023.51" y="383.5" >vertex*..</text>
</g>
<g >
<title>std::allocator&lt;visualModel&gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="927.7" y="405" width="0.2" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="930.66" y="415.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="733.5" y="293" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="736.48" y="303.5" ></text>
</g>
<g >
<title>checked_request2size (10,309,278 samples, 0.02%)</title><rect x="622.6" y="277" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="625.63" y="287.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="533" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.29" y="543.5" ></text>
</g>
<g >
<title>vertex* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (113,402,058 samples, 0.24%)</title><rect x="624.2" y="389" width="2.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="627.18" y="399.5" ></text>
</g>
<g >
<title>__GI___futex_abstimed_wait_cancelable64 (10,309,278 samples, 0.02%)</title><rect x="694.9" y="325" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="697.90" y="335.5" ></text>
</g>
<g >
<title>siv::BasicPerlinNoise&lt;double&gt;::octave2D_01 (288,659,784 samples, 0.61%)</title><rect x="138.3" y="421" width="7.2" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="141.34" y="431.5" ></text>
</g>
<g >
<title>double const&amp; std::min&lt;double&gt; (20,618,556 samples, 0.04%)</title><rect x="93.1" y="421" width="0.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="96.07" y="431.5" ></text>
</g>
<g >
<title>_int_malloc (10,309,278 samples, 0.02%)</title><rect x="815.5" y="261" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="818.53" y="271.5" ></text>
</g>
<g >
<title>unlink_chunk (41,237,112 samples, 0.09%)</title><rect x="687.7" y="213" width="1.0" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="690.70" y="223.5" ></text>
</g>
<g >
<title>__memset_avx512_unaligned_erms (10,309,278 samples, 0.02%)</title><rect x="784.9" y="389" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="787.92" y="399.5" ></text>
</g>
<g >
<title>[amdxc64.so] (103,092,780 samples, 0.22%)</title><rect x="701.8" y="325" width="2.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="704.85" y="335.5" ></text>
</g>
<g >
<title>double siv::perlin_detail::Lerp&lt;double&gt; (61,855,668 samples, 0.13%)</title><rect x="804.5" y="325" width="1.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="807.47" y="335.5" ></text>
</g>
<g >
<title>[amdxc64.so] (41,237,112 samples, 0.09%)</title><rect x="717.5" y="293" width="1.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="720.54" y="303.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;::sum (20,618,556 samples, 0.04%)</title><rect x="793.4" y="421" width="0.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="796.41" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;visualModel, std::allocator&lt;visualModel&gt; &gt;::push_back (10,309,278 samples, 0.02%)</title><rect x="927.7" y="469" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="930.66" y="479.5" ></text>
</g>
<g >
<title>__memcpy_avx512_unaligned_erms (1,855,670,040 samples, 3.92%)</title><rect x="1090.2" y="389" width="46.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1093.21" y="399.5" >__me..</text>
</g>
<g >
<title>[amdxc64.so] (51,546,390 samples, 0.11%)</title><rect x="698.0" y="357" width="1.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="700.99" y="367.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a2&lt;false, vertex const*, vertex*&gt; (113,402,058 samples, 0.24%)</title><rect x="624.2" y="309" width="2.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="627.18" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;model, std::allocator&lt;model&gt; &gt;::clear (1,587,628,812 samples, 3.36%)</title><rect x="874.7" y="469" width="39.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="877.68" y="479.5" >std..</text>
</g>
<g >
<title>arena_for_chunk (10,309,278 samples, 0.02%)</title><rect x="907.1" y="309" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="910.09" y="319.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (30,927,834 samples, 0.07%)</title><rect x="719.6" y="277" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="722.59" y="287.5" ></text>
</g>
<g >
<title>auto siv::perlin_detail::Octave2D&lt;siv::BasicPerlinNoise&lt;double&gt;, double&gt; (195,876,282 samples, 0.41%)</title><rect x="145.8" y="389" width="4.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="148.80" y="399.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (134,020,614 samples, 0.28%)</title><rect x="717.0" y="357" width="3.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="720.02" y="367.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, true&gt; &gt;::allocate (10,309,278 samples, 0.02%)</title><rect x="814.8" y="325" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="817.76" y="335.5" ></text>
</g>
<g >
<title>void Eigen::internal::quaternionbase_assign_impl&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 4, 1, 0, 4, 1&gt; const&gt; const&gt;, 4, 1&gt;::run&lt;Eigen::Quaternion&lt;double, 0&gt; &gt; (10,309,278 samples, 0.02%)</title><rect x="928.2" y="405" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="931.18" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10,309,278 samples, 0.02%)</title><rect x="695.4" y="293" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="698.42" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;vertex, std::allocator&lt;vertex&gt; &gt;::_M_deallocate (268,041,228 samples, 0.57%)</title><rect x="907.6" y="309" width="6.7" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="910.60" y="319.5" ></text>
</g>
<g >
<title>tcache_get_n (10,309,278 samples, 0.02%)</title><rect x="564.8" y="309" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="567.76" y="319.5" ></text>
</g>
<g >
<title>[libd3d12core.so] (10,309,278 samples, 0.02%)</title><rect x="11.3" y="325" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="14.29" y="335.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_linearvec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 0, 2&gt;::run (10,309,278 samples, 0.02%)</title><rect x="928.4" y="293" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="931.44" y="303.5" ></text>
</g>
<g >
<title>Eigen::internal::dense_assignment_loop&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 1, 0, 3, 1&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 3, 2&gt;::run (10,309,278 samples, 0.02%)</title><rect x="928.4" y="309" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="931.44" y="319.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (10,309,278 samples, 0.02%)</title><rect x="788.0" y="437" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="791.01" y="447.5" ></text>
</g>
<g >
<title>renderer::createModelsFromPhysicsObjects (10,309,278 samples, 0.02%)</title><rect x="928.2" y="149" width="0.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="931.18" y="159.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="10.3" y="549" width="0.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.26" y="559.5" ></text>
</g>
<g >
<title>_XGetWindowAttributes (20,618,556 samples, 0.04%)</title><rect x="787.5" y="453" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="790.49" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (47,113,400,460 samples, 99.61%)</title><rect x="14.1" y="597" width="1175.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="17.12" y="607.5" >[libstdc++.so.6.0.33]</text>
</g>
<g >
<title>tcache_get (10,309,278 samples, 0.02%)</title><rect x="564.8" y="325" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="567.76" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt;, std::allocator&lt;std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt; &gt;::push_back (20,618,556 samples, 0.04%)</title><rect x="815.3" y="453" width="0.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="818.27" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;groundInfo, std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt;, std::allocator&lt;std::pair&lt;groundInfo const, std::pair&lt;double, double&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;groundInfo&gt;, groundInfoHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (10,309,278 samples, 0.02%)</title><rect x="814.2" y="357" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="817.24" y="367.5" ></text>
</g>
<g >
<title>[libgallium-24.2.8-1ubuntu1~24.04.1.so] (123,711,336 samples, 0.26%)</title><rect x="782.9" y="453" width="3.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="785.86" y="463.5" ></text>
</g>
<g >
<title>[amdxc64.so] (30,927,834 samples, 0.07%)</title><rect x="718.8" y="277" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="721.82" y="287.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (3,494,845,242 samples, 7.39%)</title><rect x="933.3" y="405" width="87.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="936.32" y="415.5" >vertex* st..</text>
</g>
<g >
<title>std::allocator&lt;vertex&gt;::deallocate (257,731,950 samples, 0.54%)</title><rect x="634.7" y="405" width="6.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="637.72" y="415.5" ></text>
</g>
<g >
<title>vertex* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;vertex const*, std::vector&lt;vertex, std::allocator&lt;vertex&gt; &gt; &gt;, vertex*&gt; (113,402,058 samples, 0.24%)</title><rect x="624.2" y="373" width="2.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="627.18" y="383.5" ></text>
</g>
<g >
<title>[amdxc64.so] (61,855,668 samples, 0.13%)</title><rect x="729.6" y="197" width="1.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="732.63" y="207.5" ></text>
</g>
<g >
<title>glXGetFBConfigs (10,309,278 samples, 0.02%)</title><rect x="787.0" y="453" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="789.98" y="463.5" ></text>
</g>
<g >
<title>__GI___clock_nanosleep (20,618,556 samples, 0.04%)</title><rect x="13.6" y="501" width="0.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="16.60" y="511.5" ></text>
</g>
<g >
<title>vertex* std::__copy_move_a1&lt;false, vertex const*, vertex*&gt; (113,402,058 samples, 0.24%)</title><rect x="624.2" y="325" width="2.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="627.18" y="335.5" ></text>
</g>
</g>
</svg>
