#version 330 core

uniform float time;
uniform float z_near;
uniform float z_far;
//uniform float fog_1_over_e_factor;
uniform vec3 sky_color;
uniform vec2 resolution;
uniform float fov;
in vec3 color;
in vec4 gl_FragCoord;
out vec4 FragColor;
// note: this one is experiencing some issues in that it goes pink when oversaturated


//=================================================================================================
//
//  Baking Lab
//  by MJP and David Neubelt
//  http://mynameismjp.wordpress.com/
//
//  All code licensed under the MIT license
//
//=================================================================================================

// The code in this file was originally written by Stephen Hill (@self_shadow), who deserves all
// credit for coming up with this fit and implementing it. Buy him a beer next time you see him. :)

// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
mat3 ACESInputMat =
{
    {0.59719, 0.35458, 0.04823},
    {0.07600, 0.90834, 0.01566},
    {0.02840, 0.13383, 0.83777}
};

// ODT_SAT => XYZ => D60_2_D65 => sRGB
mat3 ACESOutputMat =
{
    { 1.60475, -0.53108, -0.07367},
    {-0.10208,  1.10813, -0.00605},
    {-0.00327, -0.07276,  1.07602}
};

vec3 RRTAndODTFit(vec3 v)
{
    vec3 a = v * (v + 0.0245786f) - 0.000090537f;
    vec3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
    return a / b;
}

vec3 ACESFitted(vec3 color)
{
    color = ACESInputMat * color;

    // Apply RRT and ODT
    color = RRTAndODTFit(color);

    color = ACESOutputMat * color;

    // Clamp to [0, 1]
    color = clamp(color, 0.0, 1.0);

    return color;
}

// END of externally sourced file

void main()
{

    float fog_1_over_e_factor = 50000;

    float fog_start = 20;
    float fog_end = 21;

    float z_buffer = gl_FragCoord.z;
    float z_normalized = 2.0 * z_buffer - 1.0;
    float z_eyespace = 2*z_far*z_near / (z_far + z_near - (z_far - z_near)*(2*z_buffer -1));
    
    vec2 screen_position = gl_FragCoord.xy;
    screen_position /= resolution.xy;
    screen_position = (screen_position * 1) - vec2(0.5, 0.5);
    screen_position.x *= (resolution.x / resolution.y);

    float distance_z = z_eyespace;
    float unit_distances_from_center = length(screen_position * 2 * tan(fov / 2));
    float distance_xy = distance_z * unit_distances_from_center;
    float distance = sqrt(distance_xy * distance_xy + distance_z * distance_z);

    //float fog_fraction = (distance - fog_start) / (fog_end - fog_start);
    //fog_fraction = min(1.0, fog_fraction);
    //fog_fraction = max(0.0, fog_fraction);

    float fog_fraction = 1 - exp(-distance / fog_1_over_e_factor);

    vec3 color_with_fog = (1 - fog_fraction) * color + (fog_fraction) * sky_color;

    color_with_fog = ACESFitted(color_with_fog * 10.0);

    FragColor = vec4(color_with_fog, 1.0);
}