#version 330 core

uniform float time;
uniform float z_near;
uniform float z_far;
//uniform float fog_1_over_e_factor;
uniform vec3 sky_color;
uniform vec2 resolution;
uniform float fov;
in vec3 color;
in vec4 gl_FragCoord;
out vec4 FragColor;

vec3 ACES_film(vec3 x)
{
float a = 2.51f;
float b = 0.03f;
float c = 2.43f;
float d = 0.59f;
float e = 0.14f;
return clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.0, 1.0);
}

void main()
{
    float gamma = 2.2;

    float fog_1_over_e_factor = 200000;

    float fog_start = 20;
    float fog_end = 21;

    float z_buffer = gl_FragCoord.z;
    float z_normalized = 2.0 * z_buffer - 1.0;
    float z_eyespace = 2*z_far*z_near / (z_far + z_near - (z_far - z_near)*(2*z_buffer -1));
    
    vec2 screen_position = gl_FragCoord.xy;
    screen_position /= resolution.xy;
    screen_position = (screen_position * 1) - vec2(0.5, 0.5);
    screen_position.x *= (resolution.x / resolution.y);

    float distance_z = z_eyespace;
    float unit_distances_from_center = length(screen_position * 2 * tan(fov / 2));
    float distance_xy = distance_z * unit_distances_from_center;
    float distance = sqrt(distance_xy * distance_xy + distance_z * distance_z);

    //float fog_fraction = (distance - fog_start) / (fog_end - fog_start);
    //fog_fraction = min(1.0, fog_fraction);
    //fog_fraction = max(0.0, fog_fraction);

    float fog_fraction = 1 - exp(-distance / fog_1_over_e_factor);

    //linear_color_to_srgb
    //vec3 color_srgb = pow(color, 1.0/gamma);
    vec3 color_srgb = sqrt(color);

    vec3 color_with_fog = (1 - fog_fraction) * color_srgb + (fog_fraction) * sky_color;

    color_with_fog = ACES_film(color_with_fog * 0.6);

    FragColor = vec4(color_with_fog, 1.0);
}